"fileName","callerClass","callerMethod","line#","relationInfo","calleeName","calleeProperty,"TypeInfo","expressionValue"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","Rule","","11.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","Rule","","11.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","Rule","","11.00035","Assign","Rule","FAILURE_STRING","string","'Found chai call with vague failure message. Please add an explicit failure message'"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","Rule",".","13.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","Rule",".apply","13.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","Rule",".apply","14.00084","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","Rule",".apply","14.00084","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","Rule",".apply","14.00084","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new ChaiVagueErrorsRuleWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","Rule",".apply","14.00084","calls","/*<Rule>*/ this","applyWithWalker","any","((new ChaiVagueErrorsRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","Rule",".apply","14.00084","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new ChaiVagueErrorsRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","Rule",".apply","14.00084","pickUpedName","/*<Rule>*/ this","getOptions","","((new ChaiVagueErrorsRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","Rule",".apply","14.00084","return","","","any","this.applyWithWalker((new ChaiVagueErrorsRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","Rule","","19.00006","defined","ChaiVagueErrorsRuleWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker","","19.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".","22.00014","TS.MethodDefined","ChaiVagueErrorsRuleWalker","visitPropertyAccessExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","22.00054","define.Parameter","visitPropertyAccessExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","22.00087","Conditional","/*<ChaiVagueErrorsRuleWalker>*/ this.isExpectInvocation(node)","","/*IfStatement*/ boolean/* no Else Clause*/","this.isExpectInvocation((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","23.00037","call.arguments[0]","/*<ChaiVagueErrorsRuleWalker>*/ this","isExpectInvocation","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","23.00037","calls","/*<ChaiVagueErrorsRuleWalker>*/ this","isExpectInvocation","boolean","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","23.00037","pickUpedName","/*<ChaiVagueErrorsRuleWalker>*/ this","isExpectInvocation","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","23.00045","Conditional","/ok|true|false|undefined|null/.test(node.name.getText())","","/*IfStatement*/ boolean/* no Else Clause*/","/ok|true|false|undefined|null/.test((/*Args:*/<any>node).name.getText())"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","24.00063","calls","(/*Args:*/<any>node).name","getText","any","()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","24.00063","call.arguments[0]","/ok|true|false|undefined|null/","test","any","(/*Args:*/<any>node).name.getText()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","24.00063","calls","/ok|true|false|undefined|null/","test","boolean","((/*Args:*/<any>node).name.getText())"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","25.00057","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","25.00074","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","25.00091","call.arguments[0]","/*<ChaiVagueErrorsRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","25.00091","call.arguments[1]","/*<ChaiVagueErrorsRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","25.00091","call.arguments[2]","/*<ChaiVagueErrorsRuleWalker>*/ this","createFailure","string","'Found chai call with vague failure message. Please add an explicit failure message'"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","25.00091","calls","/*<ChaiVagueErrorsRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found chai call with vague failure message. Please add an explicit failure message')"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","25.00091","pickUpedName","/*<ChaiVagueErrorsRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found chai call with vague failure message. Please add an explicit failure message')"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","25.00091","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found chai call with vague failure message. Please add an explicit failure message')"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","25.00091","call.arguments[0]","/*<ChaiVagueErrorsRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found chai call with vague failure message. Please add an explicit failure message')"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","25.00091","calls","/*<ChaiVagueErrorsRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found chai call with vague failure message. Please add an explicit failure message'))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","25.00091","pickUpedName","/*<ChaiVagueErrorsRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found chai call with vague failure message. Please add an explicit failure message'))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","25.00091","pickUpedName","/*<ChaiVagueErrorsRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found chai call with vague failure message. Please add an explicit failure message'))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","25.00091","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found chai call with vague failure message. Please add an explicit failure message'))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","28.00045","call.arguments[0]","super","visitPropertyAccessExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitPropertyAccessExpression","28.00045","calls","super","visitPropertyAccessExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".","32.00014","TS.MethodDefined","ChaiVagueErrorsRuleWalker","visitCallExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","32.00044","define.Parameter","visitCallExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","32.00067","Conditional","/*<ChaiVagueErrorsRuleWalker>*/ this.isExpectInvocation(node)","","/*IfStatement*/ boolean/* no Else Clause*/","this.isExpectInvocation((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","33.00037","call.arguments[0]","/*<ChaiVagueErrorsRuleWalker>*/ this","isExpectInvocation","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","33.00037","calls","/*<ChaiVagueErrorsRuleWalker>*/ this","isExpectInvocation","boolean","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","33.00037","pickUpedName","/*<ChaiVagueErrorsRuleWalker>*/ this","isExpectInvocation","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","33.00045","Conditional","node.expression.kind === SyntaxKind.current().PropertyAccessExpression","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).expression.kind === SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","34.00053","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","34.00063","ref.varName","SyntaxKind.current()","PropertyAccessExpression","number",""
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","34.00063","Compare","node.expression","kind","=== /*number*/","SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","34.00063","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.kind"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","35.00020","TS.VariableDeclaration","","propExpression","any",""
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","35.00101","Assign","propExpression","","any","(/*Args:*/<any>node).expression"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","35.00112","Conditional","/equal|equals|eql/.test(propExpression.name.getText())","","/*IfStatement*/ boolean/* no Else Clause*/","/equal|equals|eql/.test((/*Args:*/<any>node).expression.name.getText())"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","36.00065","calls","(/*Args:*/<any>node).expression.name","getText","any","()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","36.00065","call.arguments[0]","/equal|equals|eql/","test","any","(/*Args:*/<any>node).expression.name.getText()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","36.00065","calls","/equal|equals|eql/","test","boolean","((/*Args:*/<any>node).expression.name.getText())"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","36.00078","Conditional","node.arguments.length === 1","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).arguments.length === 1"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","37.00050","Compare","node.arguments","length","=== /*number*/","1"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","37.00050","CompareR","1","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).arguments.length"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","37.00055","Conditional","/true|false|null|undefined/.test(node.arguments[0].getText())","","/*IfStatement*/ boolean/* no Else Clause*/","/true|false|null|undefined/.test((/*Args:*/<any>node).arguments[0].getText())"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","38.00080","calls","(/*Args:*/<any>node).arguments[0]","getText","any","()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","38.00080","call.arguments[0]","/true|false|null|undefined/","test","any","(/*Args:*/<any>node).arguments[0].getText()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","38.00080","calls","/true|false|null|undefined/","test","boolean","((/*Args:*/<any>node).arguments[0].getText())"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","39.00069","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","39.00086","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","39.00103","call.arguments[0]","/*<ChaiVagueErrorsRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","39.00103","call.arguments[1]","/*<ChaiVagueErrorsRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","39.00103","call.arguments[2]","/*<ChaiVagueErrorsRuleWalker>*/ this","createFailure","string","'Found chai call with vague failure message. Please add an explicit failure message'"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","39.00103","calls","/*<ChaiVagueErrorsRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found chai call with vague failure message. Please add an explicit failure message')"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","39.00103","pickUpedName","/*<ChaiVagueErrorsRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found chai call with vague failure message. Please add an explicit failure message')"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","39.00103","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found chai call with vague failure message. Please add an explicit failure message')"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","39.00103","call.arguments[0]","/*<ChaiVagueErrorsRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found chai call with vague failure message. Please add an explicit failure message')"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","39.00103","calls","/*<ChaiVagueErrorsRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found chai call with vague failure message. Please add an explicit failure message'))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","39.00103","pickUpedName","/*<ChaiVagueErrorsRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found chai call with vague failure message. Please add an explicit failure message'))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","39.00103","pickUpedName","/*<ChaiVagueErrorsRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found chai call with vague failure message. Please add an explicit failure message'))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","39.00103","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found chai call with vague failure message. Please add an explicit failure message'))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","45.00035","call.arguments[0]","super","visitCallExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".visitCallExpression","45.00035","calls","super","visitCallExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".","48.00012","TS.MethodDefined","ChaiVagueErrorsRuleWalker","isExpectInvocation","(node: any) => boolean","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".isExpectInvocation","48.00071","define.Parameter","isExpectInvocation","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".isExpectInvocation","49.00012","TS.VariableDeclaration","","callExpression","any",""
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".isExpectInvocation","49.00101","call.arguments[0]","ChaiVagueErrorsRuleWalker","getLeftMostCallExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".isExpectInvocation","49.00101","calls","ChaiVagueErrorsRuleWalker","getLeftMostCallExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".isExpectInvocation","49.00101","pickUpedName","ChaiVagueErrorsRuleWalker","getLeftMostCallExpression","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".isExpectInvocation","49.00101","Assign","callExpression","","any","ChaiVagueErrorsRuleWalker.getLeftMostCallExpression((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".isExpectInvocation","49.00101","pickUpedName","ChaiVagueErrorsRuleWalker","getLeftMostCallExpression","","ChaiVagueErrorsRuleWalker.getLeftMostCallExpression((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".isExpectInvocation","49.00107","Conditional","callExpression == null","","/*IfStatement*/ boolean/* no Else Clause*/","ChaiVagueErrorsRuleWalker.getLeftMostCallExpression((/*Args:*/<any>node)) == null"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".isExpectInvocation","50.00030","Compare","callExpression","","== /*null*/","null"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".isExpectInvocation","50.00030","CompareR","null","","/*Reverse*/== /*any*/","ChaiVagueErrorsRuleWalker.getLeftMostCallExpression((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".isExpectInvocation","51.00019","return","","","boolean","false"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".isExpectInvocation","53.00061","calls","ChaiVagueErrorsRuleWalker.getLeftMostCallExpression((/*Args:*/<any>node)).expression","getText","any","()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".isExpectInvocation","53.00061","call.arguments[0]","/.*\.?expect/","test","any","ChaiVagueErrorsRuleWalker.getLeftMostCallExpression((/*Args:*/<any>node)).expression.getText()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".isExpectInvocation","53.00061","calls","/.*\.?expect/","test","boolean","(ChaiVagueErrorsRuleWalker.getLeftMostCallExpression((/*Args:*/<any>node)).expression.getText())"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".isExpectInvocation","53.00061","return","","","boolean","/.*\.?expect/.test(ChaiVagueErrorsRuleWalker.getLeftMostCallExpression((/*Args:*/<any>node)).expression.getText())"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".","56.00019","TS.MethodDefined","ChaiVagueErrorsRuleWalker","getLeftMostCallExpression","(node: any) => any","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","56.00085","define.Parameter","getLeftMostCallExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","57.00012","TS.VariableDeclaration","","leftSide","any",""
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","57.00038","Assign","leftSide","","any","(/*Args:*/<any>node).expression"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","57.00049","Conditional","leftSide != null","","/*WhileStatement*/ boolean","(/*Args:*/<any>node).expression != null"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","58.00027","Compare","leftSide","","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","58.00027","CompareR","null","","/*Reverse*/!= /*any*/","(/*Args:*/<any>node).expression"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","58.00035","Conditional","leftSide.kind === SyntaxKind.current().CallExpression","","/*IfStatement*/ boolean","(/*Args:*/<any>node).expression.kind === SyntaxKind.current().CallExpression"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","59.00046","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","59.00056","ref.varName","SyntaxKind.current()","CallExpression","number",""
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","59.00056","Compare","leftSide","kind","=== /*number*/","SyntaxKind.current().CallExpression"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","59.00056","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.kind"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","60.00043","return","","","any","(/*Args:*/<any>node).expression"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","61.00019","Conditional","leftSide.kind === (SyntaxKind.current().PropertyAccessExpression)","","/*IfStatement*/ boolean","(/*Args:*/<any>node).expression.kind === (SyntaxKind.current().PropertyAccessExpression)"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","61.00054","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","61.00064","Compare","leftSide","kind","=== /*number*/","(SyntaxKind.current().PropertyAccessExpression)"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","61.00064","CompareR","(SyntaxKind.current().PropertyAccessExpression)","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.kind"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","62.00068","ref.varName","(<ts.PropertyAccessExpression>leftSide)","expression","any",""
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","62.00068","Assign","leftSide","","= /*any*/","((/*Args:*/<any>node).expression).expression"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","62.00068","pickUpedName","leftSide","","","((/*Args:*/<any>node).expression).expression"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","64.00023","return","","","null","null"
"../tslint-microsoft-contrib-master/src/chaiVagueErrorsRule.ts","ChaiVagueErrorsRuleWalker",".getLeftMostCallExpression","67.00015","return","","","null","null"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule","","11.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule","","12.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule","","12.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule","","12.00035","Assign","Rule","FAILURE_STRING","string","'The exported module name must match the file name. Found: '"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".","14.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".apply","14.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".apply","15.00075","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".apply","15.00075","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".apply","15.00075","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new ExportNameWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".apply","15.00075","calls","/*<Rule>*/ this","applyWithWalker","any","((new ExportNameWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".apply","15.00075","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new ExportNameWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".apply","15.00075","pickUpedName","/*<Rule>*/ this","getOptions","","((new ExportNameWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".apply","15.00075","return","","","any","this.applyWithWalker((new ExportNameWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".","18.00018","TS.MethodDefined","Rule","getExceptions","(options: any) => string[]","(@param)?\W+options *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".getExceptions","18.00048","define.Parameter","getExceptions","options","any","/*Args:*/<any>options"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".getExceptions","18.00070","Conditional","options.ruleArguments instanceof Array","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>options).ruleArguments instanceof Array"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".getExceptions","19.00045","BinaryExpression","options","ruleArguments","instanceof /*ArrayConstructor*/","Array"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".getExceptions","19.00045","ref.type","ArrayConstructor","","",""
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".getExceptions","20.00042","return","","","any","(/*Args:*/<any>options).ruleArguments[0]"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".getExceptions","21.00010","Conditional","options instanceof Array","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>options) instanceof Array"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".getExceptions","22.00031","BinaryExpression","options","","instanceof /*ArrayConstructor*/","Array"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".getExceptions","22.00031","ref.type","ArrayConstructor","","",""
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".getExceptions","23.00035","return","","","string[]","(/*Args:*/<any>options)"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule",".getExceptions","25.00015","return","","","null","null"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","Rule","","29.00006","defined","ExportNameWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker","","29.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".","31.00014","TS.MethodDefined","ExportNameWalker","visitExportAssignment","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","31.00046","define.Parameter","visitExportAssignment","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","32.00012","TS.VariableDeclaration","","exportedName","any",""
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","32.00044","calls","(/*Args:*/<any>node).expression","getText","any","()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","32.00044","Assign","exportedName","","any","(/*Args:*/<any>node).expression.getText()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","33.00012","TS.VariableDeclaration","","regex","RegExp",""
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","33.00055","BinaryExpression","exportedName","","+ /*string*/","'..*'"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","33.00055","Assign","regex","","RegExp","(new RegExp((/*Args:*/<any>node).expression.getText() + '..*'))"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","33.00055","ref.type","RegExp","","",""
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","33.00064","Conditional","! regex.test(this.getFilename())","","/*IfStatement*/ boolean/* no Else Clause*/","! (new RegExp((/*Args:*/<any>node).expression.getText() + '..*')).test(this.getFilename())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","34.00030","calls","/*<ExportNameWalker>*/ this","getFilename","string","()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","34.00030","pickUpedName","/*<ExportNameWalker>*/ this","getFilename","","()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","34.00030","call.arguments[0]","(new RegExp((/*Args:*/<any>node).expression.getText() + '..*'))","test","string","this.getFilename()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","34.00030","calls","(new RegExp((/*Args:*/<any>node).expression.getText() + '..*'))","test","boolean","(this.getFilename())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","34.00030","pickUpedName","/*<ExportNameWalker>*/ this","getFilename","","(this.getFilename())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","34.00047","Conditional","! this.isSuppressed(exportedName)","","/*IfStatement*/ boolean/* no Else Clause*/","! this.isSuppressed((/*Args:*/<any>node).expression.getText())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","35.00036","call.arguments[0]","/*<ExportNameWalker>*/ this","isSuppressed","any","(/*Args:*/<any>node).expression.getText()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","35.00036","calls","/*<ExportNameWalker>*/ this","isSuppressed","boolean","((/*Args:*/<any>node).expression.getText())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","35.00036","pickUpedName","/*<ExportNameWalker>*/ this","isSuppressed","","((/*Args:*/<any>node).expression.getText())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","36.00020","TS.VariableDeclaration","","failureString","string",""
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","36.00064","calls","/*<ExportNameWalker>*/ this","getSourceFile","any","()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","36.00064","pickUpedName","/*<ExportNameWalker>*/ this","getSourceFile","","()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","36.00080","ref.varName","/*<ExportNameWalker>*/ this.getSourceFile()","fileName","any",""
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","36.00080","BinaryExpression","Rule","FAILURE_STRING","+ /*any*/","this.getSourceFile().fileName"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","36.00080","pickUpedName","/*<ExportNameWalker>*/ this","getSourceFile","","this.getSourceFile().fileName"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","36.00090","BinaryExpression","Rule.FAILURE_STRING + this.getSourceFile().fileName","","+ /*string*/","' and '"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","36.00090","pickUpedName","/*<ExportNameWalker>*/ this","","","' and '"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","36.00100","BinaryExpression","Rule.FAILURE_STRING + this.getSourceFile().fileName + ' and '","","+ /*any*/","(/*Args:*/<any>node).expression.getText()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","36.00100","pickUpedName","/*<ExportNameWalker>*/ this","","","(/*Args:*/<any>node).expression.getText()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","36.00100","Assign","failureString","","string","'The exported module name must match the file name. Found: ' + this.getSourceFile().fileName + ' and ' + (/*Args:*/<any>node).expression.getText()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","36.00100","pickUpedName","/*<ExportNameWalker>*/ this","getSourceFile","","'The exported module name must match the file name. Found: ' + this.getSourceFile().fileName + ' and ' + (/*Args:*/<any>node).expression.getText()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","36.00100","pickUpedName","Rule","FAILURE_STRING","","'The exported module name must match the file name. Found: ' + this.getSourceFile().fileName + ' and ' + (/*Args:*/<any>node).expression.getText()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","37.00020","TS.VariableDeclaration","","failure","any",""
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","37.00066","calls","(/*Args:*/<any>node).expression","getStart","any","()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","37.00094","calls","(/*Args:*/<any>node).expression","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","37.00105","call.arguments[0]","/*<ExportNameWalker>*/ this","createFailure","any","(/*Args:*/<any>node).expression.getStart()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","37.00105","call.arguments[1]","/*<ExportNameWalker>*/ this","createFailure","any","(/*Args:*/<any>node).expression.getWidth()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","37.00105","call.arguments[2]","/*<ExportNameWalker>*/ this","createFailure","string","'The exported module name must match the file name. Found: ' + this.getSourceFile().fileName + ' and ' + (/*Args:*/<any>node).expression.getText()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","37.00105","calls","/*<ExportNameWalker>*/ this","createFailure","any","((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'The exported module name must match the file name. Found: ' + this.getSourceFile().fileName + ' and ' + (/*Args:*/<any>node).expression.getText())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","37.00105","pickUpedName","/*<ExportNameWalker>*/ this","createFailure","","((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'The exported module name must match the file name. Found: ' + this.getSourceFile().fileName + ' and ' + (/*Args:*/<any>node).expression.getText())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","37.00105","Assign","failure","","any","this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'The exported module name must match the file name. Found: ' + this.getSourceFile().fileName + ' and ' + (/*Args:*/<any>node).expression.getText())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","37.00105","pickUpedName","/*<ExportNameWalker>*/ this","createFailure","","this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'The exported module name must match the file name. Found: ' + this.getSourceFile().fileName + ' and ' + (/*Args:*/<any>node).expression.getText())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","38.00033","call.arguments[0]","/*<ExportNameWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'The exported module name must match the file name. Found: ' + this.getSourceFile().fileName + ' and ' + (/*Args:*/<any>node).expression.getText())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","38.00033","calls","/*<ExportNameWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'The exported module name must match the file name. Found: ' + this.getSourceFile().fileName + ' and ' + (/*Args:*/<any>node).expression.getText()))"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","38.00033","pickUpedName","/*<ExportNameWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'The exported module name must match the file name. Found: ' + this.getSourceFile().fileName + ' and ' + (/*Args:*/<any>node).expression.getText()))"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","41.00037","call.arguments[0]","super","visitExportAssignment","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".visitExportAssignment","41.00037","calls","super","visitExportAssignment","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".","44.00012","TS.MethodDefined","ExportNameWalker","getFilename","() => string","@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".getFilename","45.00012","TS.VariableDeclaration","","filename","any",""
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".getFilename","45.00029","calls","/*<ExportNameWalker>*/ this","getSourceFile","any","()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".getFilename","45.00029","pickUpedName","/*<ExportNameWalker>*/ this","getSourceFile","","()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".getFilename","45.00045","Assign","filename","","any","this.getSourceFile().fileName"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".getFilename","45.00045","pickUpedName","/*<ExportNameWalker>*/ this","getSourceFile","","this.getSourceFile().fileName"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".getFilename","46.00012","TS.VariableDeclaration","","lastSlash","any",""
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".getFilename","46.00046","call.arguments[0]","/*<ExportNameWalker>*/ this.getSourceFile().fileName","lastIndexOf","string","'/'"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".getFilename","46.00046","calls","/*<ExportNameWalker>*/ this.getSourceFile().fileName","lastIndexOf","any","('/')"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".getFilename","46.00046","Assign","lastSlash","","any","this.getSourceFile().fileName.lastIndexOf('/')"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".getFilename","46.00051","Conditional","lastSlash > - 1","","/*IfStatement*/ boolean/* no Else Clause*/","this.getSourceFile().fileName.lastIndexOf('/') > - 1"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".getFilename","47.00026","Compare","lastSlash","","> /*number*/","- 1"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".getFilename","47.00026","CompareR","- 1","","/*Reverse*/> /*any*/","this.getSourceFile().fileName.lastIndexOf('/')"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".getFilename","48.00050","BinaryExpression","lastSlash","","+ /*number*/","1"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".getFilename","48.00050","call.arguments[0]","/*<ExportNameWalker>*/ this.getSourceFile().fileName","substring","any","this.getSourceFile().fileName.lastIndexOf('/') + 1"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".getFilename","48.00050","calls","/*<ExportNameWalker>*/ this.getSourceFile().fileName","substring","any","(this.getSourceFile().fileName.lastIndexOf('/') + 1)"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".getFilename","48.00050","return","","","any","this.getSourceFile().fileName.substring(this.getSourceFile().fileName.lastIndexOf('/') + 1)"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".getFilename","50.00015","return","","","any","this.getSourceFile().fileName"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".","53.00012","TS.MethodDefined","ExportNameWalker","isSuppressed","(exportedName: string) => boolean","(@param)?\W+exportedName *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed","53.00039","define.Parameter","isSuppressed","exportedName","string","/*Args:*/<string>exportedName"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed","54.00012","TS.VariableDeclaration","","allExceptions","string[]",""
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed","54.00064","calls","/*<ExportNameWalker>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed","54.00064","pickUpedName","/*<ExportNameWalker>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed","54.00064","call.arguments[0]","Rule","getExceptions","any","this.getOptions()"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed","54.00064","calls","Rule","getExceptions","string[]","(this.getOptions())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed","54.00064","pickUpedName","Rule","getExceptions","","(this.getOptions())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed","54.00064","pickUpedName","/*<ExportNameWalker>*/ this","getOptions","","(this.getOptions())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed","54.00064","Assign","allExceptions","","string[]","Rule.getExceptions(this.getOptions())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed","54.00064","pickUpedName","Rule","getExceptions","","Rule.getExceptions(this.getOptions())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed","54.00064","pickUpedName","/*<ExportNameWalker>*/ this","getOptions","","Rule.getExceptions(this.getOptions())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed;Utils.exists(Arguments[1])","56.00043","call.func","Utils","exists","(exception: string) => boolean",""
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed;Utils.exists(Arguments[1])","56.00055","define.Parameter","exception","","string","/*Args:*/<string>exception"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed;Utils.exists(Arguments[1])","57.00047","call.arguments[0]","(new RegExp((/*Args:*/<string>exception)))","test","string","(/*Args:*/<string>exportedName)"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed;Utils.exists(Arguments[1])","57.00047","calls","(new RegExp((/*Args:*/<string>exception)))","test","boolean","((/*Args:*/<string>exportedName))"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed;Utils.exists(Arguments[1])","57.00047","pickUpedName","exportedName","","","((/*Args:*/<string>exportedName))"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed;Utils.exists(Arguments[1])","57.00047","return","","","boolean","(new RegExp((/*Args:*/<string>exception))).test((/*Args:*/<string>exportedName))"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed","57.00047","call.arguments[0]","Utils","exists","string[]","Rule.getExceptions(this.getOptions())"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed","57.00047","call.arguments[1]","Utils","exists","(exception: string) => boolean","/**(exception: string) => boolean**/"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed","57.00047","calls","Utils","exists","boolean","(Rule.getExceptions(this.getOptions()), /**(exception: string) => boolean**/)"
"../tslint-microsoft-contrib-master/src/exportNameRule.ts","ExportNameWalker",".isSuppressed","57.00047","return","","","boolean","Utils.exists(Rule.getExceptions(this.getOptions()), /**(exception: string) => boolean**/)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule","","12.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule","","13.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule","","13.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule","","13.00035","Assign","Rule","FAILURE_STRING","string","'A JQuery deferred was found that appears to not have resolve or reject invoked on all code paths: '"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".","15.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".apply","15.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".apply","16.00081","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".apply","16.00081","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".apply","16.00081","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new JQueryDeferredAnalyzer((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".apply","16.00081","calls","/*<Rule>*/ this","applyWithWalker","any","((new JQueryDeferredAnalyzer((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".apply","16.00081","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new JQueryDeferredAnalyzer((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".apply","16.00081","pickUpedName","/*<Rule>*/ this","getOptions","","((new JQueryDeferredAnalyzer((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".apply","16.00081","return","","","any","this.applyWithWalker((new JQueryDeferredAnalyzer((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".","19.00018","TS.MethodDefined","Rule","isPromiseInstantiation","(expression: any) => boolean","(@param)?\W+expression *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","19.00057","define.Parameter","isPromiseInstantiation","expression","any","/*Args:*/<any>expression"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","19.00080","Conditional","expression != null && expression.kind === SyntaxKind.current().CallExpression","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>expression) != null && (/*Args:*/<any>expression).kind === SyntaxKind.current().CallExpression"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","20.00026","Compare","expression","","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","20.00026","CompareR","null","","/*Reverse*/!= /*any*/","(/*Args:*/<any>expression)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","20.00066","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","20.00076","ref.varName","SyntaxKind.current()","CallExpression","number",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","20.00076","Compare","expression","kind","=== /*number*/","SyntaxKind.current().CallExpression"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","20.00076","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>expression).kind"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","20.00076","BinaryExpression","expression != null","","&& /*boolean*/","(/*Args:*/<any>expression).kind === SyntaxKind.current().CallExpression"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","21.00016","TS.VariableDeclaration","","functionName","string",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","21.00076","call.arguments[0]","AstUtils","getFunctionName","any","(/*Args:*/<any>expression)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","21.00076","calls","AstUtils","getFunctionName","string","((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","21.00076","Assign","functionName","","string","AstUtils.getFunctionName((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","22.00016","TS.VariableDeclaration","","functionTarget","string",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","22.00080","call.arguments[0]","AstUtils","getFunctionTarget","any","(/*Args:*/<any>expression)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","22.00080","calls","AstUtils","getFunctionTarget","string","((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","22.00080","Assign","functionTarget","","string","AstUtils.getFunctionTarget((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","22.00092","Conditional","functionName === 'Deferred' && (functionTarget === '$' || /^(jquery)$/i.test(functionTarget))","","/*IfStatement*/ boolean/* no Else Clause*/","AstUtils.getFunctionName((/*Args:*/<any>expression)) === 'Deferred' && (AstUtils.getFunctionTarget((/*Args:*/<any>expression)) === '$' || /^(jquery)$/i.test(AstUtils.getFunctionTarget((/*Args:*/<any>expression))))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","24.00033","Compare","functionName","","=== /*string*/","'Deferred'"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","24.00033","CompareR","'Deferred'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","25.00036","Compare","functionTarget","","=== /*string*/","'$'"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","25.00036","CompareR","'$'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionTarget((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","25.00063","call.arguments[0]","/^(jquery)$/i","test","string","AstUtils.getFunctionTarget((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","25.00063","calls","/^(jquery)$/i","test","boolean","(AstUtils.getFunctionTarget((/*Args:*/<any>expression)))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","25.00063","BinaryExpression","functionTarget === '$'","","|| /*boolean*/","/^(jquery)$/i.test(AstUtils.getFunctionTarget((/*Args:*/<any>expression)))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","25.00063","BinaryExpression","functionName === 'Deferred'","","&& /*boolean*/","(AstUtils.getFunctionTarget((/*Args:*/<any>expression)) === '$' || /^(jquery)$/i.test(AstUtils.getFunctionTarget((/*Args:*/<any>expression))))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","26.00023","return","","","boolean","true"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isPromiseInstantiation","29.00015","return","","","boolean","false"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".","32.00018","TS.MethodDefined","Rule","isCompletionFunction","(functionName: string) => boolean","(@param)?\W+functionName *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isCompletionFunction","32.00054","define.Parameter","isCompletionFunction","functionName","string","/*Args:*/<string>functionName"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isCompletionFunction","33.00042","call.arguments[0]","/^(resolve|reject)$/","test","string","(/*Args:*/<string>functionName)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isCompletionFunction","33.00042","calls","/^(resolve|reject)$/","test","boolean","((/*Args:*/<string>functionName))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule",".isCompletionFunction","33.00042","return","","","boolean","/^(resolve|reject)$/.test((/*Args:*/<string>functionName))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","Rule","","37.00006","defined","JQueryDeferredAnalyzer","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer","","37.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".","40.00014","TS.MethodDefined","JQueryDeferredAnalyzer","visitBinaryExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","40.00046","define.Parameter","visitBinaryExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","40.00071","Conditional","node.operatorToken.getText() === '=' && Rule.isPromiseInstantiation(node.right)","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).operatorToken.getText() === '=' && Rule.isPromiseInstantiation((/*Args:*/<any>node).right)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","41.00032","calls","(/*Args:*/<any>node).operatorToken","getText","any","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","41.00045","Compare","node.operatorToken.getText()","","=== /*string*/","'='"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","41.00045","CompareR","'='","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).operatorToken.getText()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","41.00086","call.arguments[0]","Rule","isPromiseInstantiation","any","(/*Args:*/<any>node).right"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","41.00086","calls","Rule","isPromiseInstantiation","boolean","((/*Args:*/<any>node).right)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","41.00086","pickUpedName","Rule","isPromiseInstantiation","","((/*Args:*/<any>node).right)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","41.00086","BinaryExpression","node.operatorToken.getText() === '='","","&& /*boolean*/","Rule.isPromiseInstantiation((/*Args:*/<any>node).right)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","41.00086","pickUpedName","Rule","isPromiseInstantiation","","Rule.isPromiseInstantiation((/*Args:*/<any>node).right)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","41.00095","Conditional","node.left.kind === SyntaxKind.current().Identifier","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).left.kind === SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","42.00047","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","42.00057","ref.varName","SyntaxKind.current()","Identifier","number",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","42.00057","Compare","node.left","kind","=== /*number*/","SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","42.00057","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).left.kind"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","42.00070","Conditional","(node.left).text != null","","/*IfStatement*/ boolean/* no Else Clause*/","((/*Args:*/<any>node).left).text != null"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","43.00055","Compare","(<ts.Identifier>node.left)","text","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","43.00055","CompareR","null","","/*Reverse*/!= /*any*/","((/*Args:*/<any>node).left).text"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","44.00024","TS.VariableDeclaration","","name","any",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","44.00068","Assign","name","","any","(/*Args:*/<any>node).left"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","45.00053","call.arguments[0]","/*<JQueryDeferredAnalyzer>*/ this","validateDeferredUsage","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","45.00053","call.arguments[1]","/*<JQueryDeferredAnalyzer>*/ this","validateDeferredUsage","any","(/*Args:*/<any>node).left"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","45.00053","calls","/*<JQueryDeferredAnalyzer>*/ this","validateDeferredUsage","void","((/*Args:*/<any>node), (/*Args:*/<any>node).left)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","45.00053","pickUpedName","/*<JQueryDeferredAnalyzer>*/ this","validateDeferredUsage","","((/*Args:*/<any>node), (/*Args:*/<any>node).left)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","49.00037","call.arguments[0]","super","visitBinaryExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitBinaryExpression","49.00037","calls","super","visitBinaryExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".","52.00014","TS.MethodDefined","JQueryDeferredAnalyzer","visitVariableDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitVariableDeclaration","52.00049","define.Parameter","visitVariableDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitVariableDeclaration","52.00077","Conditional","Rule.isPromiseInstantiation(node.initializer)","","/*IfStatement*/ boolean/* no Else Clause*/","Rule.isPromiseInstantiation((/*Args:*/<any>node).initializer)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitVariableDeclaration","53.00046","call.arguments[0]","Rule","isPromiseInstantiation","any","(/*Args:*/<any>node).initializer"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitVariableDeclaration","53.00046","calls","Rule","isPromiseInstantiation","boolean","((/*Args:*/<any>node).initializer)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitVariableDeclaration","53.00046","pickUpedName","Rule","isPromiseInstantiation","","((/*Args:*/<any>node).initializer)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitVariableDeclaration","53.00061","Conditional","(node.name).text != null","","/*IfStatement*/ boolean/* no Else Clause*/","((/*Args:*/<any>node).name).text != null"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitVariableDeclaration","54.00051","Compare","(<ts.Identifier>node.name)","text","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitVariableDeclaration","54.00051","CompareR","null","","/*Reverse*/!= /*any*/","((/*Args:*/<any>node).name).text"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitVariableDeclaration","55.00020","TS.VariableDeclaration","","name","any",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitVariableDeclaration","55.00064","Assign","name","","any","(/*Args:*/<any>node).name"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitVariableDeclaration","56.00049","call.arguments[0]","/*<JQueryDeferredAnalyzer>*/ this","validateDeferredUsage","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitVariableDeclaration","56.00049","call.arguments[1]","/*<JQueryDeferredAnalyzer>*/ this","validateDeferredUsage","any","(/*Args:*/<any>node).name"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitVariableDeclaration","56.00049","calls","/*<JQueryDeferredAnalyzer>*/ this","validateDeferredUsage","void","((/*Args:*/<any>node), (/*Args:*/<any>node).name)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitVariableDeclaration","56.00049","pickUpedName","/*<JQueryDeferredAnalyzer>*/ this","validateDeferredUsage","","((/*Args:*/<any>node), (/*Args:*/<any>node).name)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitVariableDeclaration","59.00040","call.arguments[0]","super","visitVariableDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".visitVariableDeclaration","59.00040","calls","super","visitVariableDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".","62.00012","TS.MethodDefined","JQueryDeferredAnalyzer","validateDeferredUsage","(rootNode: any, deferredIdentifier: any) => void","(@param)?\W+rootNode *\W+ !! missing description.
(@param)?\W+deferredIdentifier *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","62.00048","define.Parameter","validateDeferredUsage","rootNode","any","/*Args:*/<any>rootNode"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","62.00077","define.Parameter","validateDeferredUsage","deferredIdentifier","any","/*Args:*/<any>deferredIdentifier"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","63.00012","TS.VariableDeclaration","","parent","any",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","63.00057","call.arguments[0]","AstUtils","findParentBlock","any","(/*Args:*/<any>rootNode)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","63.00057","calls","AstUtils","findParentBlock","any","((/*Args:*/<any>rootNode))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","63.00057","Assign","parent","","any","AstUtils.findParentBlock((/*Args:*/<any>rootNode))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","64.00012","TS.VariableDeclaration","","blockAnalyzer","DeferredCompletionWalker",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","64.00063","calls","/*<JQueryDeferredAnalyzer>*/ this","getSourceFile","any","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","64.00063","pickUpedName","/*<JQueryDeferredAnalyzer>*/ this","getSourceFile","","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","64.00085","calls","/*<JQueryDeferredAnalyzer>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","64.00085","pickUpedName","/*<JQueryDeferredAnalyzer>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","64.00098","Assign","blockAnalyzer","","DeferredCompletionWalker","(new DeferredCompletionWalker(this.getSourceFile(), this.getOptions(), (/*Args:*/<any>deferredIdentifier)))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","64.00098","ref.type","DeferredCompletionWalker","","",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","64.00098","pickUpedName","/*<JQueryDeferredAnalyzer>*/ this","","","(new DeferredCompletionWalker(this.getSourceFile(), this.getOptions(), (/*Args:*/<any>deferredIdentifier)))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","64.00098","pickUpedName","/*<JQueryDeferredAnalyzer>*/ this","getOptions","","(new DeferredCompletionWalker(this.getSourceFile(), this.getOptions(), (/*Args:*/<any>deferredIdentifier)))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","65.00033","call.arguments[0]","(new DeferredCompletionWalker(this.getSourceFile(), this.getOptions(), (/*Args:*/<any>deferredIdentifier)))","visitNode","any","AstUtils.findParentBlock((/*Args:*/<any>rootNode))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","65.00033","calls","(new DeferredCompletionWalker(this.getSourceFile(), this.getOptions(), (/*Args:*/<any>deferredIdentifier)))","visitNode","void","(AstUtils.findParentBlock((/*Args:*/<any>rootNode)))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","65.00041","Conditional","! blockAnalyzer.isAlwaysCompleted()","","/*IfStatement*/ boolean/* no Else Clause*/","! (new DeferredCompletionWalker(this.getSourceFile(), this.getOptions(), (/*Args:*/<any>deferredIdentifier))).isAlwaysCompleted()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","66.00028","calls","(new DeferredCompletionWalker(this.getSourceFile(), this.getOptions(), (/*Args:*/<any>deferredIdentifier)))","isAlwaysCompleted","boolean","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","67.00016","TS.VariableDeclaration","","failureString","string",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","67.00054","BinaryExpression","Rule","FAILURE_STRING","+ /*string*/","'''"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","67.00071","calls","(/*Args:*/<any>rootNode)","getText","any","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","67.00071","BinaryExpression","Rule.FAILURE_STRING + '''","","+ /*any*/","(/*Args:*/<any>rootNode).getText()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","67.00082","BinaryExpression","Rule.FAILURE_STRING + ''' + rootNode.getText()","","+ /*string*/","'''"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","67.00082","Assign","failureString","","string","'A JQuery deferred was found that appears to not have resolve or reject invoked on all code paths: '' + (/*Args:*/<any>rootNode).getText() + '''"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","67.00082","pickUpedName","Rule","FAILURE_STRING","","'A JQuery deferred was found that appears to not have resolve or reject invoked on all code paths: '' + (/*Args:*/<any>rootNode).getText() + '''"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","68.00016","TS.VariableDeclaration","","failure","any",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","68.00055","calls","(/*Args:*/<any>rootNode)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","68.00076","calls","(/*Args:*/<any>rootNode)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","68.00087","call.arguments[0]","/*<JQueryDeferredAnalyzer>*/ this","createFailure","any","(/*Args:*/<any>rootNode).getStart()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","68.00087","call.arguments[1]","/*<JQueryDeferredAnalyzer>*/ this","createFailure","any","(/*Args:*/<any>rootNode).getWidth()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","68.00087","call.arguments[2]","/*<JQueryDeferredAnalyzer>*/ this","createFailure","string","'A JQuery deferred was found that appears to not have resolve or reject invoked on all code paths: '' + (/*Args:*/<any>rootNode).getText() + '''"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","68.00087","calls","/*<JQueryDeferredAnalyzer>*/ this","createFailure","any","((/*Args:*/<any>rootNode).getStart(), (/*Args:*/<any>rootNode).getWidth(), 'A JQuery deferred was found that appears to not have resolve or reject invoked on all code paths: '' + (/*Args:*/<any>rootNode).getText() + ''')"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","68.00087","pickUpedName","/*<JQueryDeferredAnalyzer>*/ this","createFailure","","((/*Args:*/<any>rootNode).getStart(), (/*Args:*/<any>rootNode).getWidth(), 'A JQuery deferred was found that appears to not have resolve or reject invoked on all code paths: '' + (/*Args:*/<any>rootNode).getText() + ''')"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","68.00087","Assign","failure","","any","this.createFailure((/*Args:*/<any>rootNode).getStart(), (/*Args:*/<any>rootNode).getWidth(), 'A JQuery deferred was found that appears to not have resolve or reject invoked on all code paths: '' + (/*Args:*/<any>rootNode).getText() + ''')"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","68.00087","pickUpedName","/*<JQueryDeferredAnalyzer>*/ this","createFailure","","this.createFailure((/*Args:*/<any>rootNode).getStart(), (/*Args:*/<any>rootNode).getWidth(), 'A JQuery deferred was found that appears to not have resolve or reject invoked on all code paths: '' + (/*Args:*/<any>rootNode).getText() + ''')"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","69.00029","call.arguments[0]","/*<JQueryDeferredAnalyzer>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>rootNode).getStart(), (/*Args:*/<any>rootNode).getWidth(), 'A JQuery deferred was found that appears to not have resolve or reject invoked on all code paths: '' + (/*Args:*/<any>rootNode).getText() + ''')"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","69.00029","calls","/*<JQueryDeferredAnalyzer>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>rootNode).getStart(), (/*Args:*/<any>rootNode).getWidth(), 'A JQuery deferred was found that appears to not have resolve or reject invoked on all code paths: '' + (/*Args:*/<any>rootNode).getText() + '''))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer",".validateDeferredUsage","69.00029","pickUpedName","/*<JQueryDeferredAnalyzer>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>rootNode).getStart(), (/*Args:*/<any>rootNode).getWidth(), 'A JQuery deferred was found that appears to not have resolve or reject invoked on all code paths: '' + (/*Args:*/<any>rootNode).getText() + '''))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","JQueryDeferredAnalyzer","","75.00006","defined","DeferredCompletionWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker","","75.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker","","77.00012","TS.PropertyDefined","DeferredCompletionWalker","deferredIdentifier","any",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker","","77.00037","TS.PropertyDefined","DeferredCompletionWalker","deferredIdentifier","any",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker","","78.00012","TS.PropertyDefined","DeferredCompletionWalker","wasCompleted","boolean",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker","","78.00037","TS.PropertyDefined","DeferredCompletionWalker","wasCompleted","boolean",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker","","78.00037","Assign","DeferredCompletionWalker","wasCompleted","boolean","false"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker","","79.00012","TS.PropertyDefined","DeferredCompletionWalker","allBranchesCompleted","boolean",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker","","79.00045","TS.PropertyDefined","DeferredCompletionWalker","allBranchesCompleted","boolean",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker","","79.00045","Assign","DeferredCompletionWalker","allBranchesCompleted","boolean","true"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker","","80.00012","TS.PropertyDefined","DeferredCompletionWalker","hasBranches","boolean",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker","","80.00036","TS.PropertyDefined","DeferredCompletionWalker","hasBranches","boolean","/**
by default, there are no branches, so this is true
"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker","","80.00036","Assign","DeferredCompletionWalker","hasBranches","boolean","false"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker","","81.00012","TS.PropertyDefined","DeferredCompletionWalker","walkerOptions","any",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker","","81.00033","TS.PropertyDefined","DeferredCompletionWalker","walkerOptions","any",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".constructor","81.00042","TS.MethodDefined","DeferredCompletionWalker","Constructor","any",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".constructor","83.00032","define.Parameter","/*<DeferredCompletionWalker>*/ this.","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".constructor","83.00058","define.Parameter","/*<DeferredCompletionWalker>*/ this.","options","any","/*Args:*/<any>options"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".constructor","83.00092","define.Parameter","/*<DeferredCompletionWalker>*/ this.","deferredIdentifier","any","/*Args:*/<any>deferredIdentifier"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".constructor","84.00026","call.arguments[0]","super","","any","DeferredCompletionWalker.sourceFile"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".constructor","84.00026","call.arguments[1]","super","","any","DeferredCompletionWalker.options"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".constructor","84.00026","calls","super","","void","(DeferredCompletionWalker.sourceFile, DeferredCompletionWalker.options)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".constructor","84.00026","pickUpedName","sourceFile","","","(DeferredCompletionWalker.sourceFile, DeferredCompletionWalker.options)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".constructor","84.00026","pickUpedName","options","","","(DeferredCompletionWalker.sourceFile, DeferredCompletionWalker.options)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".constructor","85.00029","Assign","/*<DeferredCompletionWalker>*/ this","walkerOptions","= /*any*/","DeferredCompletionWalker.options"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".constructor","85.00029","pickUpedName","/*<DeferredCompletionWalker>*/ this","walkerOptions","","DeferredCompletionWalker.options"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".constructor","85.00029","pickUpedName","options","","","DeferredCompletionWalker.options"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".constructor","86.00034","Assign","/*<DeferredCompletionWalker>*/ this","deferredIdentifier","= /*any*/","DeferredCompletionWalker.deferredIdentifier"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".constructor","86.00034","pickUpedName","/*<DeferredCompletionWalker>*/ this","deferredIdentifier","","DeferredCompletionWalker.deferredIdentifier"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".constructor","86.00034","pickUpedName","deferredIdentifier","","","DeferredCompletionWalker.deferredIdentifier"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".","90.00011","TS.MethodDefined","DeferredCompletionWalker","visitNode","(node: any) => void","/**
need to make this public so it can invoked from parent walker

(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitNode","90.00031","define.Parameter","visitNode","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitNode","91.00025","call.arguments[0]","super","visitNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitNode","91.00025","calls","super","visitNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".","94.00011","TS.MethodDefined","DeferredCompletionWalker","isAlwaysCompleted","() => boolean","@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".isAlwaysCompleted","94.00043","Conditional","/*<DeferredCompletionWalker>*/ this.wasCompleted","","/*IfStatement*/ boolean/* no Else Clause*/","this.wasCompleted"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".isAlwaysCompleted","96.00019","return","","","boolean","true"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".isAlwaysCompleted","97.00010","Conditional","! this.hasBranches","","/*IfStatement*/ boolean/* no Else Clause*/","! this.hasBranches"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".isAlwaysCompleted","99.00019","return","","","boolean","false"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".isAlwaysCompleted","101.00021","return","","","boolean","this.allBranchesCompleted"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".","104.00014","TS.MethodDefined","DeferredCompletionWalker","visitIfStatement","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","104.00041","define.Parameter","visitIfStatement","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","106.00027","Assign","/*<DeferredCompletionWalker>*/ this","hasBranches","= /*boolean*/","{|this.hasBranches |,| true|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","106.00027","pickUpedName","/*<DeferredCompletionWalker>*/ this","hasBranches","","{|this.hasBranches |,| true|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","109.00012","TS.VariableDeclaration","","ifAnalyzer","DeferredCompletionWalker",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","109.00060","calls","/*<DeferredCompletionWalker>*/ this","getSourceFile","any","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","109.00060","pickUpedName","/*<DeferredCompletionWalker>*/ this","getSourceFile","","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","109.00102","Assign","ifAnalyzer","","DeferredCompletionWalker","(new DeferredCompletionWalker(this.getSourceFile(), DeferredCompletionWalker.options, DeferredCompletionWalker.deferredIdentifier))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","109.00102","ref.type","DeferredCompletionWalker","","",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","109.00102","pickUpedName","/*<DeferredCompletionWalker>*/ this","","","(new DeferredCompletionWalker(this.getSourceFile(), DeferredCompletionWalker.options, DeferredCompletionWalker.deferredIdentifier))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","109.00102","pickUpedName","/*<DeferredCompletionWalker>*/ this","walkerOptions","","(new DeferredCompletionWalker(this.getSourceFile(), DeferredCompletionWalker.options, DeferredCompletionWalker.deferredIdentifier))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","109.00102","pickUpedName","/*<DeferredCompletionWalker>*/ this","deferredIdentifier","","(new DeferredCompletionWalker(this.getSourceFile(), DeferredCompletionWalker.options, DeferredCompletionWalker.deferredIdentifier))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","110.00012","TS.VariableDeclaration","","elseAnalyzer","DeferredCompletionWalker",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","110.00062","calls","/*<DeferredCompletionWalker>*/ this","getSourceFile","any","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","110.00062","pickUpedName","/*<DeferredCompletionWalker>*/ this","getSourceFile","","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","110.00104","Assign","elseAnalyzer","","DeferredCompletionWalker","(new DeferredCompletionWalker(this.getSourceFile(), DeferredCompletionWalker.options, DeferredCompletionWalker.deferredIdentifier))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","110.00104","ref.type","DeferredCompletionWalker","","",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","110.00104","pickUpedName","/*<DeferredCompletionWalker>*/ this","","","(new DeferredCompletionWalker(this.getSourceFile(), DeferredCompletionWalker.options, DeferredCompletionWalker.deferredIdentifier))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","110.00104","pickUpedName","/*<DeferredCompletionWalker>*/ this","walkerOptions","","(new DeferredCompletionWalker(this.getSourceFile(), DeferredCompletionWalker.options, DeferredCompletionWalker.deferredIdentifier))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","110.00104","pickUpedName","/*<DeferredCompletionWalker>*/ this","deferredIdentifier","","(new DeferredCompletionWalker(this.getSourceFile(), DeferredCompletionWalker.options, DeferredCompletionWalker.deferredIdentifier))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","112.00035","call.arguments[0]","(new DeferredCompletionWalker(this.getSourceFile(), DeferredCompletionWalker.options, DeferredCompletionWalker.deferredIdentifier))","visitNode","any","(/*Args:*/<any>node).thenStatement"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","112.00035","calls","(new DeferredCompletionWalker(this.getSourceFile(), DeferredCompletionWalker.options, DeferredCompletionWalker.deferredIdentifier))","visitNode","void","((/*Args:*/<any>node).thenStatement)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","112.00050","Conditional","! ifAnalyzer.isAlwaysCompleted()","","/*IfStatement*/ boolean","! (new DeferredCompletionWalker(this.getSourceFile(), DeferredCompletionWalker.options, DeferredCompletionWalker.deferredIdentifier)).isAlwaysCompleted()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","114.00025","calls","(new DeferredCompletionWalker(this.getSourceFile(), DeferredCompletionWalker.options, DeferredCompletionWalker.deferredIdentifier))","isAlwaysCompleted","boolean","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","115.00040","Assign","/*<DeferredCompletionWalker>*/ this","allBranchesCompleted","= /*boolean*/","{|this.allBranchesCompleted |,| false|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","115.00040","pickUpedName","/*<DeferredCompletionWalker>*/ this","allBranchesCompleted","","{|this.allBranchesCompleted |,| false|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","116.00015","Conditional","node.elseStatement != null","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).elseStatement != null"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","116.00041","Compare","node","elseStatement","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","116.00041","CompareR","null","","/*Reverse*/!= /*any*/","(/*Args:*/<any>node).elseStatement"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","117.00041","call.arguments[0]","(new DeferredCompletionWalker(this.getSourceFile(), DeferredCompletionWalker.options, DeferredCompletionWalker.deferredIdentifier))","visitNode","any","(/*Args:*/<any>node).elseStatement"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","117.00041","calls","(new DeferredCompletionWalker(this.getSourceFile(), DeferredCompletionWalker.options, DeferredCompletionWalker.deferredIdentifier))","visitNode","void","((/*Args:*/<any>node).elseStatement)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","117.00056","Conditional","! elseAnalyzer.isAlwaysCompleted()","","/*IfStatement*/ boolean/* no Else Clause*/","! (new DeferredCompletionWalker(this.getSourceFile(), DeferredCompletionWalker.options, DeferredCompletionWalker.deferredIdentifier)).isAlwaysCompleted()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","118.00031","calls","(new DeferredCompletionWalker(this.getSourceFile(), DeferredCompletionWalker.options, DeferredCompletionWalker.deferredIdentifier))","isAlwaysCompleted","boolean","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","119.00044","Assign","/*<DeferredCompletionWalker>*/ this","allBranchesCompleted","= /*boolean*/","{|this.allBranchesCompleted |,| false|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitIfStatement","119.00044","pickUpedName","/*<DeferredCompletionWalker>*/ this","allBranchesCompleted","","{|this.allBranchesCompleted |,| false|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".","125.00014","TS.MethodDefined","DeferredCompletionWalker","visitCallExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","125.00044","define.Parameter","visitCallExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","125.00067","Conditional","node.expression.kind === SyntaxKind.current().PropertyAccessExpression","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).expression.kind === SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","126.00049","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","126.00059","ref.varName","SyntaxKind.current()","PropertyAccessExpression","number",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","126.00059","Compare","node.expression","kind","=== /*number*/","SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","126.00059","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.kind"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","128.00016","TS.VariableDeclaration","","prop","any",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","128.00088","Assign","prop","","any","(/*Args:*/<any>node).expression"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","128.00099","Conditional","AstUtils.isSameIdentifer(DeferredCompletionWalker.deferredIdentifier, prop.expression)","","/*IfStatement*/ boolean/* no Else Clause*/","AstUtils.isSameIdentifer(DeferredCompletionWalker.deferredIdentifier, (/*Args:*/<any>node).expression.expression)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","130.00072","call.arguments[0]","AstUtils","isSameIdentifer","any","DeferredCompletionWalker.deferredIdentifier"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","130.00072","call.arguments[1]","AstUtils","isSameIdentifer","any","(/*Args:*/<any>node).expression.expression"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","130.00072","calls","AstUtils","isSameIdentifer","boolean","(DeferredCompletionWalker.deferredIdentifier, (/*Args:*/<any>node).expression.expression)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","130.00072","pickUpedName","/*<DeferredCompletionWalker>*/ this","deferredIdentifier","","(DeferredCompletionWalker.deferredIdentifier, (/*Args:*/<any>node).expression.expression)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","131.00020","TS.VariableDeclaration","","functionName","string",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","131.00055","calls","(/*Args:*/<any>node).expression.name","getText","any","()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","131.00055","Assign","functionName","","any","(/*Args:*/<any>node).expression.name.getText()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","131.00065","Conditional","Rule.isCompletionFunction(functionName)","","/*IfStatement*/ boolean/* no Else Clause*/","Rule.isCompletionFunction((/*Args:*/<any>node).expression.name.getText())"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","132.00047","call.arguments[0]","Rule","isCompletionFunction","string","(/*Args:*/<any>node).expression.name.getText()"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","132.00047","calls","Rule","isCompletionFunction","boolean","((/*Args:*/<any>node).expression.name.getText())"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","132.00047","pickUpedName","Rule","isCompletionFunction","","((/*Args:*/<any>node).expression.name.getText())"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","133.00040","Assign","/*<DeferredCompletionWalker>*/ this","wasCompleted","= /*boolean*/","{|this.wasCompleted |,| true|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","133.00040","pickUpedName","/*<DeferredCompletionWalker>*/ this","wasCompleted","","{|this.wasCompleted |,| true|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","133.00046","return","","","void",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","139.00012","TS.VariableDeclaration","","referenceEscaped","boolean",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression;Utils.exists(Arguments[1])","139.00070","call.func","Utils","exists","(argument: any) => boolean",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression;Utils.exists(Arguments[1])","139.00085","define.Parameter","argument","","any","/*Args:*/<any>argument"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression;Utils.exists(Arguments[1])","140.00069","call.arguments[0]","AstUtils","isSameIdentifer","any","DeferredCompletionWalker.deferredIdentifier"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression;Utils.exists(Arguments[1])","140.00069","call.arguments[1]","AstUtils","isSameIdentifer","any","(/*Args:*/<any>argument)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression;Utils.exists(Arguments[1])","140.00069","calls","AstUtils","isSameIdentifer","boolean","(DeferredCompletionWalker.deferredIdentifier, (/*Args:*/<any>argument))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression;Utils.exists(Arguments[1])","140.00069","pickUpedName","/*<DeferredCompletionWalker>*/ this","deferredIdentifier","","(DeferredCompletionWalker.deferredIdentifier, (/*Args:*/<any>argument))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression;Utils.exists(Arguments[1])","140.00069","return","","","boolean","AstUtils.isSameIdentifer(DeferredCompletionWalker.deferredIdentifier, (/*Args:*/<any>argument))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","140.00069","call.arguments[0]","Utils","exists","any","(/*Args:*/<any>node).arguments"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","140.00069","call.arguments[1]","Utils","exists","(argument: any) => boolean","/**(argument: any) => boolean**/"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","140.00069","calls","Utils","exists","boolean","((/*Args:*/<any>node).arguments, /**(argument: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","140.00069","Assign","referenceEscaped","","boolean","Utils.exists((/*Args:*/<any>node).arguments, /**(argument: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","141.00012","Conditional","referenceEscaped","","/*IfStatement*/ boolean/* no Else Clause*/","Utils.exists((/*Args:*/<any>node).arguments, /**(argument: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","143.00032","Assign","/*<DeferredCompletionWalker>*/ this","wasCompleted","= /*boolean*/","{|this.wasCompleted |,| true|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","143.00032","pickUpedName","/*<DeferredCompletionWalker>*/ this","wasCompleted","","{|this.wasCompleted |,| true|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","143.00038","return","","","void",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","146.00035","call.arguments[0]","super","visitCallExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitCallExpression","146.00035","calls","super","visitCallExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".","150.00014","TS.MethodDefined","DeferredCompletionWalker","visitArrowFunction","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction","150.00043","define.Parameter","visitArrowFunction","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction","151.00012","TS.VariableDeclaration","","isDeferredShadowed","boolean",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction;Utils.exists(Arguments[1])","151.00073","call.func","Utils","exists","(param: any) => boolean",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction;Utils.exists(Arguments[1])","151.00086","define.Parameter","param","","any","/*Args:*/<any>param"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction;Utils.exists(Arguments[1])","152.00076","call.arguments[0]","AstUtils","isSameIdentifer","any","DeferredCompletionWalker.deferredIdentifier"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction;Utils.exists(Arguments[1])","152.00076","call.arguments[1]","AstUtils","isSameIdentifer","any","(/*Args:*/<any>param).name"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction;Utils.exists(Arguments[1])","152.00076","calls","AstUtils","isSameIdentifer","boolean","(DeferredCompletionWalker.deferredIdentifier, (/*Args:*/<any>param).name)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction;Utils.exists(Arguments[1])","152.00076","pickUpedName","/*<DeferredCompletionWalker>*/ this","deferredIdentifier","","(DeferredCompletionWalker.deferredIdentifier, (/*Args:*/<any>param).name)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction;Utils.exists(Arguments[1])","152.00076","return","","","boolean","AstUtils.isSameIdentifer(DeferredCompletionWalker.deferredIdentifier, (/*Args:*/<any>param).name)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction","152.00076","call.arguments[0]","Utils","exists","any","(/*Args:*/<any>node).parameters"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction","152.00076","call.arguments[1]","Utils","exists","(param: any) => boolean","/**(param: any) => boolean**/"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction","152.00076","calls","Utils","exists","boolean","((/*Args:*/<any>node).parameters, /**(param: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction","152.00076","Assign","isDeferredShadowed","","boolean","Utils.exists((/*Args:*/<any>node).parameters, /**(param: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction","153.00012","Conditional","isDeferredShadowed","","/*IfStatement*/ boolean/* no Else Clause*/","Utils.exists((/*Args:*/<any>node).parameters, /**(param: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction","155.00031","Assign","/*<DeferredCompletionWalker>*/ this","hasBranches","= /*boolean*/","{|this.hasBranches |,| true|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction","155.00031","pickUpedName","/*<DeferredCompletionWalker>*/ this","hasBranches","","{|this.hasBranches |,| true|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction","156.00040","Assign","/*<DeferredCompletionWalker>*/ this","allBranchesCompleted","= /*boolean*/","{|this.allBranchesCompleted |,| false|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction","156.00040","pickUpedName","/*<DeferredCompletionWalker>*/ this","allBranchesCompleted","","{|this.allBranchesCompleted |,| false|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction","156.00047","return","","","void",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction","159.00034","call.arguments[0]","super","visitArrowFunction","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitArrowFunction","159.00034","calls","super","visitArrowFunction","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".","162.00014","TS.MethodDefined","DeferredCompletionWalker","visitFunctionExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression","162.00048","define.Parameter","visitFunctionExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression","163.00012","TS.VariableDeclaration","","isDeferredShadowed","boolean",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression;Utils.exists(Arguments[1])","163.00073","call.func","Utils","exists","(param: any) => boolean",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression;Utils.exists(Arguments[1])","163.00086","define.Parameter","param","","any","/*Args:*/<any>param"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression;Utils.exists(Arguments[1])","164.00076","call.arguments[0]","AstUtils","isSameIdentifer","any","DeferredCompletionWalker.deferredIdentifier"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression;Utils.exists(Arguments[1])","164.00076","call.arguments[1]","AstUtils","isSameIdentifer","any","(/*Args:*/<any>param).name"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression;Utils.exists(Arguments[1])","164.00076","calls","AstUtils","isSameIdentifer","boolean","(DeferredCompletionWalker.deferredIdentifier, (/*Args:*/<any>param).name)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression;Utils.exists(Arguments[1])","164.00076","pickUpedName","/*<DeferredCompletionWalker>*/ this","deferredIdentifier","","(DeferredCompletionWalker.deferredIdentifier, (/*Args:*/<any>param).name)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression;Utils.exists(Arguments[1])","164.00076","return","","","boolean","AstUtils.isSameIdentifer(DeferredCompletionWalker.deferredIdentifier, (/*Args:*/<any>param).name)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression","164.00076","call.arguments[0]","Utils","exists","any","(/*Args:*/<any>node).parameters"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression","164.00076","call.arguments[1]","Utils","exists","(param: any) => boolean","/**(param: any) => boolean**/"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression","164.00076","calls","Utils","exists","boolean","((/*Args:*/<any>node).parameters, /**(param: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression","164.00076","Assign","isDeferredShadowed","","boolean","Utils.exists((/*Args:*/<any>node).parameters, /**(param: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression","165.00012","Conditional","isDeferredShadowed","","/*IfStatement*/ boolean/* no Else Clause*/","Utils.exists((/*Args:*/<any>node).parameters, /**(param: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression","167.00031","Assign","/*<DeferredCompletionWalker>*/ this","hasBranches","= /*boolean*/","{|this.hasBranches |,| true|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression","167.00031","pickUpedName","/*<DeferredCompletionWalker>*/ this","hasBranches","","{|this.hasBranches |,| true|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression","168.00040","Assign","/*<DeferredCompletionWalker>*/ this","allBranchesCompleted","= /*boolean*/","{|this.allBranchesCompleted |,| false|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression","168.00040","pickUpedName","/*<DeferredCompletionWalker>*/ this","allBranchesCompleted","","{|this.allBranchesCompleted |,| false|} "
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression","168.00047","return","","","void",""
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression","171.00039","call.arguments[0]","super","visitFunctionExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/jqueryDeferredMustCompleteRule.ts","DeferredCompletionWalker",".visitFunctionExpression","171.00039","calls","super","visitFunctionExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","Rule","","9.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","Rule","","10.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","Rule","","10.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","Rule","","10.00035","Assign","Rule","FAILURE_STRING","string","'File missing JSDoc comment at the top-level: '"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","Rule",".","12.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","Rule",".apply","12.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","Rule",".apply","13.00077","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","Rule",".apply","13.00077","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","Rule",".apply","13.00077","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new MissingJSDocWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","Rule",".apply","13.00077","calls","/*<Rule>*/ this","applyWithWalker","any","((new MissingJSDocWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","Rule",".apply","13.00077","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new MissingJSDocWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","Rule",".apply","13.00077","pickUpedName","/*<Rule>*/ this","getOptions","","((new MissingJSDocWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","Rule",".apply","13.00077","return","","","any","this.applyWithWalker((new MissingJSDocWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","Rule","","17.00006","defined","MissingJSDocWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker","","17.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".","20.00014","TS.MethodDefined","MissingJSDocWalker","visitSourceFile","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","20.00040","define.Parameter","visitSourceFile","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","20.00059","Conditional","! /^\/\*\*\s*$/gm.test(node.getFullText())","","/*IfStatement*/ boolean/* no Else Clause*/","! /^\/\*\*\s*$/gm.test((/*Args:*/<any>node).getFullText())"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","21.00040","calls","(/*Args:*/<any>node)","getFullText","any","()"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","21.00040","call.arguments[0]","/^\/\*\*\s*$/gm","test","any","(/*Args:*/<any>node).getFullText()"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","21.00040","calls","/^\/\*\*\s*$/gm","test","boolean","((/*Args:*/<any>node).getFullText())"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","22.00016","TS.VariableDeclaration","","failureString","string",""
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","22.00060","calls","/*<MissingJSDocWalker>*/ this","getSourceFile","any","()"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","22.00060","pickUpedName","/*<MissingJSDocWalker>*/ this","getSourceFile","","()"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","22.00076","ref.varName","/*<MissingJSDocWalker>*/ this.getSourceFile()","fileName","any",""
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","22.00076","BinaryExpression","Rule","FAILURE_STRING","+ /*any*/","this.getSourceFile().fileName"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","22.00076","pickUpedName","/*<MissingJSDocWalker>*/ this","getSourceFile","","this.getSourceFile().fileName"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","22.00076","Assign","failureString","","string","'File missing JSDoc comment at the top-level: ' + this.getSourceFile().fileName"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","22.00076","pickUpedName","/*<MissingJSDocWalker>*/ this","getSourceFile","","'File missing JSDoc comment at the top-level: ' + this.getSourceFile().fileName"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","22.00076","pickUpedName","Rule","FAILURE_STRING","","'File missing JSDoc comment at the top-level: ' + this.getSourceFile().fileName"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","23.00016","TS.VariableDeclaration","","failure","any",""
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","23.00051","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","23.00068","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","23.00079","call.arguments[0]","/*<MissingJSDocWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","23.00079","call.arguments[1]","/*<MissingJSDocWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","23.00079","call.arguments[2]","/*<MissingJSDocWalker>*/ this","createFailure","string","'File missing JSDoc comment at the top-level: ' + this.getSourceFile().fileName"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","23.00079","calls","/*<MissingJSDocWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'File missing JSDoc comment at the top-level: ' + this.getSourceFile().fileName)"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","23.00079","pickUpedName","/*<MissingJSDocWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'File missing JSDoc comment at the top-level: ' + this.getSourceFile().fileName)"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","23.00079","Assign","failure","","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'File missing JSDoc comment at the top-level: ' + this.getSourceFile().fileName)"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","23.00079","pickUpedName","/*<MissingJSDocWalker>*/ this","createFailure","","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'File missing JSDoc comment at the top-level: ' + this.getSourceFile().fileName)"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","24.00029","call.arguments[0]","/*<MissingJSDocWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'File missing JSDoc comment at the top-level: ' + this.getSourceFile().fileName)"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","24.00029","calls","/*<MissingJSDocWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'File missing JSDoc comment at the top-level: ' + this.getSourceFile().fileName))"
"../tslint-microsoft-contrib-master/src/missingJsdocRule.ts","MissingJSDocWalker",".visitSourceFile","24.00029","pickUpedName","/*<MissingJSDocWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'File missing JSDoc comment at the top-level: ' + this.getSourceFile().fileName))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","Rule","","11.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","Rule","","11.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","Rule","","11.00035","Assign","Rule","FAILURE_STRING","string","'Argument following optional argument missing optional annotation: '"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","Rule",".","13.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","Rule",".apply","13.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","Rule",".apply","14.00090","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","Rule",".apply","14.00090","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","Rule",".apply","14.00090","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new MissingOptionalAnnotationWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","Rule",".apply","14.00090","calls","/*<Rule>*/ this","applyWithWalker","any","((new MissingOptionalAnnotationWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","Rule",".apply","14.00090","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new MissingOptionalAnnotationWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","Rule",".apply","14.00090","pickUpedName","/*<Rule>*/ this","getOptions","","((new MissingOptionalAnnotationWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","Rule",".apply","14.00090","return","","","any","this.applyWithWalker((new MissingOptionalAnnotationWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","Rule","","18.00006","defined","MissingOptionalAnnotationWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker","","18.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".","21.00014","TS.MethodDefined","MissingOptionalAnnotationWalker","visitMethodDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitMethodDeclaration","21.00047","define.Parameter","visitMethodDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitMethodDeclaration","22.00033","call.arguments[0]","/*<MissingOptionalAnnotationWalker>*/ this","validateParameters","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitMethodDeclaration","22.00033","calls","/*<MissingOptionalAnnotationWalker>*/ this","validateParameters","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitMethodDeclaration","22.00033","pickUpedName","/*<MissingOptionalAnnotationWalker>*/ this","validateParameters","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitMethodDeclaration","23.00038","call.arguments[0]","super","visitMethodDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitMethodDeclaration","23.00038","calls","super","visitMethodDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".","26.00014","TS.MethodDefined","MissingOptionalAnnotationWalker","visitConstructorDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitConstructorDeclaration","26.00052","define.Parameter","visitConstructorDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitConstructorDeclaration","27.00033","call.arguments[0]","/*<MissingOptionalAnnotationWalker>*/ this","validateParameters","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitConstructorDeclaration","27.00033","calls","/*<MissingOptionalAnnotationWalker>*/ this","validateParameters","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitConstructorDeclaration","27.00033","pickUpedName","/*<MissingOptionalAnnotationWalker>*/ this","validateParameters","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitConstructorDeclaration","28.00043","call.arguments[0]","super","visitConstructorDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitConstructorDeclaration","28.00043","calls","super","visitConstructorDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".","31.00014","TS.MethodDefined","MissingOptionalAnnotationWalker","visitArrowFunction","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitArrowFunction","31.00043","define.Parameter","visitArrowFunction","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitArrowFunction","32.00033","call.arguments[0]","/*<MissingOptionalAnnotationWalker>*/ this","validateParameters","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitArrowFunction","32.00033","calls","/*<MissingOptionalAnnotationWalker>*/ this","validateParameters","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitArrowFunction","32.00033","pickUpedName","/*<MissingOptionalAnnotationWalker>*/ this","validateParameters","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitArrowFunction","33.00034","call.arguments[0]","super","visitArrowFunction","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitArrowFunction","33.00034","calls","super","visitArrowFunction","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".","36.00014","TS.MethodDefined","MissingOptionalAnnotationWalker","visitFunctionDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitFunctionDeclaration","36.00049","define.Parameter","visitFunctionDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitFunctionDeclaration","37.00033","call.arguments[0]","/*<MissingOptionalAnnotationWalker>*/ this","validateParameters","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitFunctionDeclaration","37.00033","calls","/*<MissingOptionalAnnotationWalker>*/ this","validateParameters","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitFunctionDeclaration","37.00033","pickUpedName","/*<MissingOptionalAnnotationWalker>*/ this","validateParameters","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitFunctionDeclaration","38.00040","call.arguments[0]","super","visitFunctionDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitFunctionDeclaration","38.00040","calls","super","visitFunctionDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".","41.00014","TS.MethodDefined","MissingOptionalAnnotationWalker","visitFunctionExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitFunctionExpression","41.00048","define.Parameter","visitFunctionExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitFunctionExpression","42.00033","call.arguments[0]","/*<MissingOptionalAnnotationWalker>*/ this","validateParameters","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitFunctionExpression","42.00033","calls","/*<MissingOptionalAnnotationWalker>*/ this","validateParameters","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitFunctionExpression","42.00033","pickUpedName","/*<MissingOptionalAnnotationWalker>*/ this","validateParameters","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitFunctionExpression","43.00039","call.arguments[0]","super","visitFunctionExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".visitFunctionExpression","43.00039","calls","super","visitFunctionExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".","46.00012","TS.MethodDefined","MissingOptionalAnnotationWalker","validateParameters","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters","46.00042","define.Parameter","validateParameters","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters","47.00012","TS.VariableDeclaration","","optionalParameterFound","boolean",""
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters","47.00037","Assign","optionalParameterFound","","boolean","false"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters","47.00044","Conditional","node.parameters == null","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).parameters == null"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters","48.00031","Compare","node","parameters","== /*null*/","null"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters","48.00031","CompareR","null","","/*Reverse*/== /*any*/","(/*Args:*/<any>node).parameters"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters","48.00039","return","","","void",""
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00033","call.func","(/*Args:*/<any>node).parameters","forEach","(parameter: any) => void",""
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00033","pickUpedName","node.parameters","forEach","","(/*Args:*/<any>node).parameters.forEach"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00049","define.Parameter","parameter","","any","/*Args:*/<any>parameter"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00082","Conditional","parameter.questionToken != null || parameter.initializer != null","","/*IfStatement*/ boolean","(/*Args:*/<any>parameter).questionToken != null || (/*Args:*/<any>parameter).initializer != null"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","52.00043","Compare","parameter","questionToken","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","52.00043","CompareR","null","","/*Reverse*/!= /*any*/","(/*Args:*/<any>parameter).questionToken"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","52.00076","Compare","parameter","initializer","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","52.00076","CompareR","null","","/*Reverse*/!= /*any*/","(/*Args:*/<any>parameter).initializer"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","52.00076","BinaryExpression","parameter.questionToken != null","","|| /*boolean*/","(/*Args:*/<any>parameter).initializer != null"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","53.00041","Assign","optionalParameterFound","","= /*boolean*/","true"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","53.00041","pickUpedName","optionalParameterFound","","","true"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","54.00019","Conditional","optionalParameterFound && parameter.initializer == null","","/*IfStatement*/ boolean/* no Else Clause*/","true && (/*Args:*/<any>parameter).initializer == null"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","54.00074","Compare","parameter","initializer","== /*null*/","null"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","54.00074","CompareR","null","","/*Reverse*/== /*any*/","(/*Args:*/<any>parameter).initializer"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","54.00074","BinaryExpression","optionalParameterFound","","&& /*boolean*/","(/*Args:*/<any>parameter).initializer == null"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","56.00020","TS.VariableDeclaration","","msg","string",""
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","56.00059","calls","(/*Args:*/<any>parameter)","getFullText","any","()"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","56.00059","BinaryExpression","Rule","FAILURE_STRING","+ /*any*/","(/*Args:*/<any>parameter).getFullText()"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","56.00059","Assign","msg","","string","'Argument following optional argument missing optional annotation: ' + (/*Args:*/<any>parameter).getFullText()"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","56.00059","pickUpedName","Rule","FAILURE_STRING","","'Argument following optional argument missing optional annotation: ' + (/*Args:*/<any>parameter).getFullText()"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","57.00067","calls","(/*Args:*/<any>parameter).name","getStart","any","()"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","57.00094","calls","(/*Args:*/<any>parameter).name","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","57.00105","call.arguments[0]","/*<MissingOptionalAnnotationWalker>*/ this","createFailure","any","(/*Args:*/<any>parameter).name.getStart()"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","57.00105","call.arguments[1]","/*<MissingOptionalAnnotationWalker>*/ this","createFailure","any","(/*Args:*/<any>parameter).name.getWidth()"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","57.00105","call.arguments[2]","/*<MissingOptionalAnnotationWalker>*/ this","createFailure","string","'Argument following optional argument missing optional annotation: ' + (/*Args:*/<any>parameter).getFullText()"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","57.00105","calls","/*<MissingOptionalAnnotationWalker>*/ this","createFailure","any","((/*Args:*/<any>parameter).name.getStart(), (/*Args:*/<any>parameter).name.getWidth(), 'Argument following optional argument missing optional annotation: ' + (/*Args:*/<any>parameter).getFullText())"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","57.00105","pickUpedName","/*<MissingOptionalAnnotationWalker>*/ this","createFailure","","((/*Args:*/<any>parameter).name.getStart(), (/*Args:*/<any>parameter).name.getWidth(), 'Argument following optional argument missing optional annotation: ' + (/*Args:*/<any>parameter).getFullText())"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","57.00105","call.arguments[0]","/*<MissingOptionalAnnotationWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>parameter).name.getStart(), (/*Args:*/<any>parameter).name.getWidth(), 'Argument following optional argument missing optional annotation: ' + (/*Args:*/<any>parameter).getFullText())"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","57.00105","calls","/*<MissingOptionalAnnotationWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>parameter).name.getStart(), (/*Args:*/<any>parameter).name.getWidth(), 'Argument following optional argument missing optional annotation: ' + (/*Args:*/<any>parameter).getFullText()))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","57.00105","pickUpedName","/*<MissingOptionalAnnotationWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>parameter).name.getStart(), (/*Args:*/<any>parameter).name.getWidth(), 'Argument following optional argument missing optional annotation: ' + (/*Args:*/<any>parameter).getFullText()))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","57.00105","pickUpedName","/*<MissingOptionalAnnotationWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>parameter).name.getStart(), (/*Args:*/<any>parameter).name.getWidth(), 'Argument following optional argument missing optional annotation: ' + (/*Args:*/<any>parameter).getFullText()))"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters","57.00105","call.arguments[0]","(/*Args:*/<any>node).parameters","forEach","(parameter: any) => void","/**(parameter: any) => void**/"
"../tslint-microsoft-contrib-master/src/missingOptionalAnnotationRule.ts","MissingOptionalAnnotationWalker",".validateParameters","57.00105","calls","(/*Args:*/<any>node).parameters","forEach","any","(/**(parameter: any) => void**/)"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","Rule","","11.00018","TS.PropertyDefined","Rule","FAILURE_STRING_IT","string",""
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","Rule","","11.00038","TS.PropertyDefined","Rule","FAILURE_STRING_IT","string",""
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","Rule","","11.00038","Assign","Rule","FAILURE_STRING_IT","string","'Do not commit Mocha it.only function call'"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","Rule","","12.00018","TS.PropertyDefined","Rule","FAILURE_STRING_DESCRIBE","string",""
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","Rule","","12.00044","TS.PropertyDefined","Rule","FAILURE_STRING_DESCRIBE","string",""
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","Rule","","12.00044","Assign","Rule","FAILURE_STRING_DESCRIBE","string","'Do not commit Mocha describe.only function call'"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","Rule",".","14.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","Rule",".apply","14.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","Rule",".apply","15.00083","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","Rule",".apply","15.00083","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","Rule",".apply","15.00083","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new MochaAvoidOnlyRuleWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","Rule",".apply","15.00083","calls","/*<Rule>*/ this","applyWithWalker","any","((new MochaAvoidOnlyRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","Rule",".apply","15.00083","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new MochaAvoidOnlyRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","Rule",".apply","15.00083","pickUpedName","/*<Rule>*/ this","getOptions","","((new MochaAvoidOnlyRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","Rule",".apply","15.00083","return","","","any","this.applyWithWalker((new MochaAvoidOnlyRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","Rule","","20.00006","defined","MochaAvoidOnlyRuleWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker","","20.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".","22.00014","TS.MethodDefined","MochaAvoidOnlyRuleWalker","visitCallExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","22.00044","define.Parameter","visitCallExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","22.00067","Conditional","node.expression.kind === SyntaxKind.current().PropertyAccessExpression","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).expression.kind === SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","23.00049","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","23.00059","ref.varName","SyntaxKind.current()","PropertyAccessExpression","number",""
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","23.00059","Compare","node.expression","kind","=== /*number*/","SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","23.00059","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.kind"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","23.00086","Conditional","node.arguments.length === 2","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).arguments.length === 2"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","24.00042","Compare","node.arguments","length","=== /*number*/","2"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","24.00042","CompareR","2","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).arguments.length"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","24.00047","Conditional","node.arguments[0].kind === SyntaxKind.current().StringLiteral","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).arguments[0].kind === SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","25.00059","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","25.00069","ref.varName","SyntaxKind.current()","StringLiteral","number",""
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","25.00069","Compare","node.arguments[0]","kind","=== /*number*/","SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","25.00069","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).arguments[0].kind"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","25.00085","Conditional","node.arguments[1].kind === SyntaxKind.current().FunctionExpression || node.arguments[1].kind === SyntaxKind.current().ArrowFunction","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).arguments[1].kind === SyntaxKind.current().FunctionExpression || (/*Args:*/<any>node).arguments[1].kind === SyntaxKind.current().ArrowFunction"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","26.00063","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","26.00073","ref.varName","SyntaxKind.current()","FunctionExpression","number",""
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","26.00073","Compare","node.arguments[1]","kind","=== /*number*/","SyntaxKind.current().FunctionExpression"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","26.00073","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).arguments[1].kind"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","27.00066","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","27.00076","ref.varName","SyntaxKind.current()","ArrowFunction","number",""
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","27.00076","Compare","node.arguments[1]","kind","=== /*number*/","SyntaxKind.current().ArrowFunction"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","27.00076","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).arguments[1].kind"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","27.00076","BinaryExpression","node.arguments[1].kind === SyntaxKind.current().FunctionExpression","","|| /*boolean*/","(/*Args:*/<any>node).arguments[1].kind === SyntaxKind.current().ArrowFunction"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","27.00092","Conditional","node.expression.getText() === 'it.only'","","/*IfStatement*/ boolean","(/*Args:*/<any>node).expression.getText() === 'it.only'"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","28.00045","calls","(/*Args:*/<any>node).expression","getText","any","()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","28.00058","Compare","node.expression.getText()","","=== /*string*/","'it.only'"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","28.00058","CompareR","'it.only'","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.getText()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","29.00069","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","29.00086","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","29.00103","call.arguments[0]","/*<MochaAvoidOnlyRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","29.00103","call.arguments[1]","/*<MochaAvoidOnlyRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","29.00103","call.arguments[2]","/*<MochaAvoidOnlyRuleWalker>*/ this","createFailure","string","'Do not commit Mocha it.only function call'"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","29.00103","calls","/*<MochaAvoidOnlyRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not commit Mocha it.only function call')"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","29.00103","pickUpedName","/*<MochaAvoidOnlyRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not commit Mocha it.only function call')"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","29.00103","pickUpedName","Rule","FAILURE_STRING_IT","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not commit Mocha it.only function call')"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","29.00103","call.arguments[0]","/*<MochaAvoidOnlyRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not commit Mocha it.only function call')"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","29.00103","calls","/*<MochaAvoidOnlyRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not commit Mocha it.only function call'))"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","29.00103","pickUpedName","/*<MochaAvoidOnlyRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not commit Mocha it.only function call'))"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","29.00103","pickUpedName","/*<MochaAvoidOnlyRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not commit Mocha it.only function call'))"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","29.00103","pickUpedName","Rule","FAILURE_STRING_IT","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not commit Mocha it.only function call'))"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","30.00031","Conditional","node.expression.getText() === 'describe.only'","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).expression.getText() === 'describe.only'"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","30.00052","calls","(/*Args:*/<any>node).expression","getText","any","()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","30.00065","Compare","node.expression.getText()","","=== /*string*/","'describe.only'"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","30.00065","CompareR","'describe.only'","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.getText()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","31.00069","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","31.00086","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","31.00103","call.arguments[0]","/*<MochaAvoidOnlyRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","31.00103","call.arguments[1]","/*<MochaAvoidOnlyRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","31.00103","call.arguments[2]","/*<MochaAvoidOnlyRuleWalker>*/ this","createFailure","string","'Do not commit Mocha describe.only function call'"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","31.00103","calls","/*<MochaAvoidOnlyRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not commit Mocha describe.only function call')"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","31.00103","pickUpedName","/*<MochaAvoidOnlyRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not commit Mocha describe.only function call')"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","31.00103","pickUpedName","Rule","FAILURE_STRING_DESCRIBE","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not commit Mocha describe.only function call')"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","31.00103","call.arguments[0]","/*<MochaAvoidOnlyRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not commit Mocha describe.only function call')"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","31.00103","calls","/*<MochaAvoidOnlyRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not commit Mocha describe.only function call'))"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","31.00103","pickUpedName","/*<MochaAvoidOnlyRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not commit Mocha describe.only function call'))"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","31.00103","pickUpedName","/*<MochaAvoidOnlyRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not commit Mocha describe.only function call'))"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","31.00103","pickUpedName","Rule","FAILURE_STRING_DESCRIBE","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not commit Mocha describe.only function call'))"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","37.00035","call.arguments[0]","super","visitCallExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/mochaAvoidOnlyRule.ts","MochaAvoidOnlyRuleWalker",".visitCallExpression","37.00035","calls","super","visitCallExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","Rule","","14.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","Rule","","15.00018","TS.PropertyDefined","Rule","GET_FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","Rule","","15.00039","TS.PropertyDefined","Rule","GET_FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","Rule","","15.00039","Assign","Rule","GET_FAILURE_STRING","string","'Backbone get() called outside of owning model: '"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","Rule","","16.00018","TS.PropertyDefined","Rule","SET_FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","Rule","","16.00039","TS.PropertyDefined","Rule","SET_FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","Rule","","16.00039","Assign","Rule","SET_FAILURE_STRING","string","'Backbone set() called outside of owning model: '"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","Rule",".","18.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","Rule",".apply","18.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","Rule",".apply","19.00097","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","Rule",".apply","19.00097","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","Rule",".apply","19.00097","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoBackboneGetSetOutsideModelRuleWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","Rule",".apply","19.00097","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoBackboneGetSetOutsideModelRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","Rule",".apply","19.00097","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoBackboneGetSetOutsideModelRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","Rule",".apply","19.00097","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoBackboneGetSetOutsideModelRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","Rule",".apply","19.00097","return","","","any","this.applyWithWalker((new NoBackboneGetSetOutsideModelRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","Rule","","23.00006","defined","NoBackboneGetSetOutsideModelRuleWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker","","23.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".","25.00014","TS.MethodDefined","NoBackboneGetSetOutsideModelRuleWalker","visitCallExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","25.00044","define.Parameter","visitCallExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","25.00067","Conditional","AstUtils.getFunctionTarget(node) !== 'this'","","/*IfStatement*/ boolean/* no Else Clause*/","AstUtils.getFunctionTarget((/*Args:*/<any>node)) !== 'this'"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","26.00040","call.arguments[0]","AstUtils","getFunctionTarget","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","26.00040","calls","AstUtils","getFunctionTarget","string","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","26.00049","Compare","AstUtils.getFunctionTarget(node)","","!== /*string*/","'this'"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","26.00049","CompareR","'this'","","/*Reverse*/!== /*string*/","AstUtils.getFunctionTarget((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","27.00016","TS.VariableDeclaration","","functionName","string",""
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","27.00065","call.arguments[0]","AstUtils","getFunctionName","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","27.00065","calls","AstUtils","getFunctionName","string","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","27.00065","Assign","functionName","","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","27.00071","Conditional","functionName === 'get' && node.arguments.length === 1 && node.arguments[0].kind === SyntaxKind.current().StringLiteral","","/*IfStatement*/ boolean/* no Else Clause*/","AstUtils.getFunctionName((/*Args:*/<any>node)) === 'get' && (/*Args:*/<any>node).arguments.length === 1 && (/*Args:*/<any>node).arguments[0].kind === SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","28.00033","Compare","functionName","","=== /*string*/","'get'"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","28.00033","CompareR","'get'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","28.00068","Compare","node.arguments","length","=== /*number*/","1"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","28.00068","CompareR","1","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).arguments.length"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","28.00068","BinaryExpression","functionName === 'get'","","&& /*boolean*/","(/*Args:*/<any>node).arguments.length === 1"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","28.00112","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","28.00122","ref.varName","SyntaxKind.current()","StringLiteral","number",""
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","28.00122","Compare","node.arguments[0]","kind","=== /*number*/","SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","28.00122","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).arguments[0].kind"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","28.00122","BinaryExpression","functionName === 'get' && node.arguments.length === 1","","&& /*boolean*/","(/*Args:*/<any>node).arguments[0].kind === SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","29.00020","TS.VariableDeclaration","","msg","string",""
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","29.00066","calls","(/*Args:*/<any>node)","getText","any","()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","29.00066","BinaryExpression","Rule","GET_FAILURE_STRING","+ /*any*/","(/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","29.00066","Assign","msg","","string","'Backbone get() called outside of owning model: ' + (/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","29.00066","pickUpedName","Rule","GET_FAILURE_STRING","","'Backbone get() called outside of owning model: ' + (/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","30.00057","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","30.00074","calls","(/*Args:*/<any>node)","getEnd","any","()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","30.00083","call.arguments[0]","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","30.00083","call.arguments[1]","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getEnd()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","30.00083","call.arguments[2]","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","createFailure","string","'Backbone get() called outside of owning model: ' + (/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","30.00083","calls","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getEnd(), 'Backbone get() called outside of owning model: ' + (/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","30.00083","pickUpedName","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getEnd(), 'Backbone get() called outside of owning model: ' + (/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","30.00083","call.arguments[0]","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getEnd(), 'Backbone get() called outside of owning model: ' + (/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","30.00083","calls","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getEnd(), 'Backbone get() called outside of owning model: ' + (/*Args:*/<any>node).getText()))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","30.00083","pickUpedName","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getEnd(), 'Backbone get() called outside of owning model: ' + (/*Args:*/<any>node).getText()))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","30.00083","pickUpedName","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getEnd(), 'Backbone get() called outside of owning model: ' + (/*Args:*/<any>node).getText()))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","31.00014","Conditional","functionName === 'set' && node.arguments.length === 2 && node.arguments[0].kind === SyntaxKind.current().StringLiteral","","/*IfStatement*/ boolean/* no Else Clause*/","AstUtils.getFunctionName((/*Args:*/<any>node)) === 'set' && (/*Args:*/<any>node).arguments.length === 2 && (/*Args:*/<any>node).arguments[0].kind === SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","32.00033","Compare","functionName","","=== /*string*/","'set'"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","32.00033","CompareR","'set'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","32.00068","Compare","node.arguments","length","=== /*number*/","2"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","32.00068","CompareR","2","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).arguments.length"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","32.00068","BinaryExpression","functionName === 'set'","","&& /*boolean*/","(/*Args:*/<any>node).arguments.length === 2"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","32.00112","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","32.00122","ref.varName","SyntaxKind.current()","StringLiteral","number",""
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","32.00122","Compare","node.arguments[0]","kind","=== /*number*/","SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","32.00122","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).arguments[0].kind"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","32.00122","BinaryExpression","functionName === 'set' && node.arguments.length === 2","","&& /*boolean*/","(/*Args:*/<any>node).arguments[0].kind === SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","33.00020","TS.VariableDeclaration","","msg","string",""
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","33.00066","calls","(/*Args:*/<any>node)","getText","any","()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","33.00066","BinaryExpression","Rule","SET_FAILURE_STRING","+ /*any*/","(/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","33.00066","Assign","msg","","string","'Backbone set() called outside of owning model: ' + (/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","33.00066","pickUpedName","Rule","SET_FAILURE_STRING","","'Backbone set() called outside of owning model: ' + (/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","34.00057","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","34.00074","calls","(/*Args:*/<any>node)","getEnd","any","()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","34.00083","call.arguments[0]","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","34.00083","call.arguments[1]","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getEnd()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","34.00083","call.arguments[2]","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","createFailure","string","'Backbone set() called outside of owning model: ' + (/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","34.00083","calls","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getEnd(), 'Backbone set() called outside of owning model: ' + (/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","34.00083","pickUpedName","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getEnd(), 'Backbone set() called outside of owning model: ' + (/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","34.00083","call.arguments[0]","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getEnd(), 'Backbone set() called outside of owning model: ' + (/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","34.00083","calls","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getEnd(), 'Backbone set() called outside of owning model: ' + (/*Args:*/<any>node).getText()))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","34.00083","pickUpedName","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getEnd(), 'Backbone set() called outside of owning model: ' + (/*Args:*/<any>node).getText()))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","34.00083","pickUpedName","/*<NoBackboneGetSetOutsideModelRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getEnd(), 'Backbone set() called outside of owning model: ' + (/*Args:*/<any>node).getText()))"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","37.00035","call.arguments[0]","super","visitCallExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noBackboneGetSetOutsideModelRule.ts","NoBackboneGetSetOutsideModelRuleWalker",".visitCallExpression","37.00035","calls","super","visitCallExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule","","11.00019","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule","","11.00036","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule","","11.00036","Assign","Rule","FAILURE_STRING","string","'Forbidden reference to banned term: '"
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule","","12.00019","TS.PropertyDefined","Rule","BANNED_TERMS","string[]",""
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule","","12.00080","TS.PropertyDefined","Rule","BANNED_TERMS","string[]",""
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule","","12.00080","Assign","Rule","BANNED_TERMS","string[]","['caller', 'callee', 'arguments', 'eval']"
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule",".","14.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule",".apply","14.00034","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule",".apply","15.00012","TS.VariableDeclaration","","walker","any",""
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule",".apply","17.00018","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule",".apply","17.00018","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule",".apply","19.00018","Assign","walker","","BannedTermWalker","(new BannedTermWalker((/*Args:*/<any>sourceFile), this.getOptions(), 'Forbidden reference to banned term: ', ['caller', 'callee', 'arguments', 'eval']))"
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule",".apply","19.00018","ref.type","BannedTermWalker","","",""
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule",".apply","19.00018","pickUpedName","/*<Rule>*/ this","getOptions","","(new BannedTermWalker((/*Args:*/<any>sourceFile), this.getOptions(), 'Forbidden reference to banned term: ', ['caller', 'callee', 'arguments', 'eval']))"
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule",".apply","19.00018","pickUpedName","Rule","FAILURE_STRING","","(new BannedTermWalker((/*Args:*/<any>sourceFile), this.getOptions(), 'Forbidden reference to banned term: ', ['caller', 'callee', 'arguments', 'eval']))"
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule",".apply","19.00018","pickUpedName","Rule","BANNED_TERMS","","(new BannedTermWalker((/*Args:*/<any>sourceFile), this.getOptions(), 'Forbidden reference to banned term: ', ['caller', 'callee', 'arguments', 'eval']))"
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule",".apply","21.00037","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new BannedTermWalker((/*Args:*/<any>sourceFile), this.getOptions(), 'Forbidden reference to banned term: ', ['caller', 'callee', 'arguments', 'eval']))"
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule",".apply","21.00037","calls","/*<Rule>*/ this","applyWithWalker","any","((new BannedTermWalker((/*Args:*/<any>sourceFile), this.getOptions(), 'Forbidden reference to banned term: ', ['caller', 'callee', 'arguments', 'eval'])))"
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule",".apply","21.00037","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new BannedTermWalker((/*Args:*/<any>sourceFile), this.getOptions(), 'Forbidden reference to banned term: ', ['caller', 'callee', 'arguments', 'eval'])))"
"../tslint-microsoft-contrib-master/src/noBannedTermsRule.ts","Rule",".apply","21.00037","return","","","any","this.applyWithWalker((new BannedTermWalker((/*Args:*/<any>sourceFile), this.getOptions(), 'Forbidden reference to banned term: ', ['caller', 'callee', 'arguments', 'eval'])))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","Rule","","11.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","Rule","","11.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","Rule","","11.00035","Assign","Rule","FAILURE_STRING","string","'Found constant conditional: '"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","Rule",".","13.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","Rule",".apply","13.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","Rule",".apply","14.00088","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","Rule",".apply","14.00088","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","Rule",".apply","14.00088","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoConstantConditionRuleWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","Rule",".apply","14.00088","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoConstantConditionRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","Rule",".apply","14.00088","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoConstantConditionRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","Rule",".apply","14.00088","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoConstantConditionRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","Rule",".apply","14.00088","return","","","any","this.applyWithWalker((new NoConstantConditionRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","Rule","","18.00006","defined","NoConstantConditionRuleWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker","","18.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".","20.00012","TS.MethodDefined","NoConstantConditionRuleWalker","isConstant","(node: any) => boolean","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".isConstant","20.00033","define.Parameter","isConstant","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".isConstant","21.00041","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".isConstant","21.00051","ref.varName","SyntaxKind.current()","FalseKeyword","number",""
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".isConstant","21.00051","Compare","node","kind","=== /*number*/","SyntaxKind.current().FalseKeyword"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".isConstant","21.00051","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).kind"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".isConstant","22.00041","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".isConstant","22.00051","ref.varName","SyntaxKind.current()","TrueKeyword","number",""
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".isConstant","22.00051","Compare","node","kind","=== /*number*/","SyntaxKind.current().TrueKeyword"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".isConstant","22.00051","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).kind"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".isConstant","22.00051","BinaryExpression","node.kind === SyntaxKind.current().FalseKeyword","","|| /*boolean*/","(/*Args:*/<any>node).kind === SyntaxKind.current().TrueKeyword"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".isConstant","23.00041","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".isConstant","23.00051","ref.varName","SyntaxKind.current()","NumericLiteral","number",""
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".isConstant","23.00051","Compare","node","kind","=== /*number*/","SyntaxKind.current().NumericLiteral"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".isConstant","23.00051","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).kind"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".isConstant","23.00051","BinaryExpression","node.kind === SyntaxKind.current().FalseKeyword || node.kind === SyntaxKind.current().TrueKeyword","","|| /*boolean*/","(/*Args:*/<any>node).kind === SyntaxKind.current().NumericLiteral"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".isConstant","23.00051","return","","","boolean","(/*Args:*/<any>node).kind === SyntaxKind.current().FalseKeyword || (/*Args:*/<any>node).kind === SyntaxKind.current().TrueKeyword || (/*Args:*/<any>node).kind === SyntaxKind.current().NumericLiteral"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".","26.00014","TS.MethodDefined","NoConstantConditionRuleWalker","visitIfStatement","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","26.00041","define.Parameter","visitIfStatement","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","26.00061","Conditional","/*<NoConstantConditionRuleWalker>*/ this.isConstant(node.expression)","","/*IfStatement*/ boolean/* no Else Clause*/","this.isConstant((/*Args:*/<any>node).expression)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","27.00034","call.arguments[0]","/*<NoConstantConditionRuleWalker>*/ this","isConstant","any","(/*Args:*/<any>node).expression"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","27.00034","calls","/*<NoConstantConditionRuleWalker>*/ this","isConstant","boolean","((/*Args:*/<any>node).expression)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","27.00034","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","isConstant","","((/*Args:*/<any>node).expression)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","28.00016","TS.VariableDeclaration","","message","string",""
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","28.00056","BinaryExpression","Rule","FAILURE_STRING","+ /*string*/","'if ('"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","28.00082","calls","(/*Args:*/<any>node).expression","getText","any","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","28.00082","BinaryExpression","Rule.FAILURE_STRING + 'if ('","","+ /*any*/","(/*Args:*/<any>node).expression.getText()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","28.00093","BinaryExpression","Rule.FAILURE_STRING + 'if (' + node.expression.getText()","","+ /*string*/","')'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","28.00093","Assign","message","","string","'Found constant conditional: if (' + (/*Args:*/<any>node).expression.getText() + ')'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","28.00093","pickUpedName","Rule","FAILURE_STRING","","'Found constant conditional: if (' + (/*Args:*/<any>node).expression.getText() + ')'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","29.00053","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","29.00070","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","29.00081","call.arguments[0]","/*<NoConstantConditionRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","29.00081","call.arguments[1]","/*<NoConstantConditionRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","29.00081","call.arguments[2]","/*<NoConstantConditionRuleWalker>*/ this","createFailure","string","'Found constant conditional: if (' + (/*Args:*/<any>node).expression.getText() + ')'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","29.00081","calls","/*<NoConstantConditionRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: if (' + (/*Args:*/<any>node).expression.getText() + ')')"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","29.00081","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: if (' + (/*Args:*/<any>node).expression.getText() + ')')"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","29.00081","call.arguments[0]","/*<NoConstantConditionRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: if (' + (/*Args:*/<any>node).expression.getText() + ')')"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","29.00081","calls","/*<NoConstantConditionRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: if (' + (/*Args:*/<any>node).expression.getText() + ')'))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","29.00081","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: if (' + (/*Args:*/<any>node).expression.getText() + ')'))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","29.00081","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: if (' + (/*Args:*/<any>node).expression.getText() + ')'))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","31.00032","call.arguments[0]","super","visitIfStatement","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitIfStatement","31.00032","calls","super","visitIfStatement","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".","35.00014","TS.MethodDefined","NoConstantConditionRuleWalker","visitConditionalExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","35.00051","define.Parameter","visitConditionalExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","35.00081","Conditional","/*<NoConstantConditionRuleWalker>*/ this.isConstant(node.condition)","","/*IfStatement*/ boolean/* no Else Clause*/","this.isConstant((/*Args:*/<any>node).condition)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","36.00034","call.arguments[0]","/*<NoConstantConditionRuleWalker>*/ this","isConstant","any","(/*Args:*/<any>node).condition"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","36.00034","calls","/*<NoConstantConditionRuleWalker>*/ this","isConstant","boolean","((/*Args:*/<any>node).condition)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","36.00034","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","isConstant","","((/*Args:*/<any>node).condition)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","37.00016","TS.VariableDeclaration","","message","string",""
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","37.00072","calls","(/*Args:*/<any>node).condition","getText","any","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","37.00072","BinaryExpression","Rule","FAILURE_STRING","+ /*any*/","(/*Args:*/<any>node).condition.getText()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","37.00083","BinaryExpression","Rule.FAILURE_STRING + node.condition.getText()","","+ /*string*/","' ?'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","37.00083","Assign","message","","string","'Found constant conditional: ' + (/*Args:*/<any>node).condition.getText() + ' ?'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","37.00083","pickUpedName","Rule","FAILURE_STRING","","'Found constant conditional: ' + (/*Args:*/<any>node).condition.getText() + ' ?'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","38.00053","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","38.00070","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","38.00081","call.arguments[0]","/*<NoConstantConditionRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","38.00081","call.arguments[1]","/*<NoConstantConditionRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","38.00081","call.arguments[2]","/*<NoConstantConditionRuleWalker>*/ this","createFailure","string","'Found constant conditional: ' + (/*Args:*/<any>node).condition.getText() + ' ?'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","38.00081","calls","/*<NoConstantConditionRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: ' + (/*Args:*/<any>node).condition.getText() + ' ?')"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","38.00081","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: ' + (/*Args:*/<any>node).condition.getText() + ' ?')"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","38.00081","call.arguments[0]","/*<NoConstantConditionRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: ' + (/*Args:*/<any>node).condition.getText() + ' ?')"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","38.00081","calls","/*<NoConstantConditionRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: ' + (/*Args:*/<any>node).condition.getText() + ' ?'))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","38.00081","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: ' + (/*Args:*/<any>node).condition.getText() + ' ?'))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","38.00081","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: ' + (/*Args:*/<any>node).condition.getText() + ' ?'))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","40.00042","call.arguments[0]","super","visitConditionalExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitConditionalExpression","40.00042","calls","super","visitConditionalExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".","44.00014","TS.MethodDefined","NoConstantConditionRuleWalker","visitWhileStatement","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","44.00044","define.Parameter","visitWhileStatement","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","44.00067","Conditional","/*<NoConstantConditionRuleWalker>*/ this.isConstant(node.expression)","","/*IfStatement*/ boolean/* no Else Clause*/","this.isConstant((/*Args:*/<any>node).expression)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","45.00034","call.arguments[0]","/*<NoConstantConditionRuleWalker>*/ this","isConstant","any","(/*Args:*/<any>node).expression"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","45.00034","calls","/*<NoConstantConditionRuleWalker>*/ this","isConstant","boolean","((/*Args:*/<any>node).expression)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","45.00034","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","isConstant","","((/*Args:*/<any>node).expression)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","46.00016","TS.VariableDeclaration","","message","string",""
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","46.00056","BinaryExpression","Rule","FAILURE_STRING","+ /*string*/","'while ('"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","46.00085","calls","(/*Args:*/<any>node).expression","getText","any","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","46.00085","BinaryExpression","Rule.FAILURE_STRING + 'while ('","","+ /*any*/","(/*Args:*/<any>node).expression.getText()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","46.00096","BinaryExpression","Rule.FAILURE_STRING + 'while (' + node.expression.getText()","","+ /*string*/","')'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","46.00096","Assign","message","","string","'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","46.00096","pickUpedName","Rule","FAILURE_STRING","","'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","47.00053","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","47.00070","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","47.00081","call.arguments[0]","/*<NoConstantConditionRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","47.00081","call.arguments[1]","/*<NoConstantConditionRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","47.00081","call.arguments[2]","/*<NoConstantConditionRuleWalker>*/ this","createFailure","string","'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","47.00081","calls","/*<NoConstantConditionRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')')"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","47.00081","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')')"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","47.00081","call.arguments[0]","/*<NoConstantConditionRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')')"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","47.00081","calls","/*<NoConstantConditionRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')'))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","47.00081","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')'))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","47.00081","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')'))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","49.00035","call.arguments[0]","super","visitWhileStatement","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitWhileStatement","49.00035","calls","super","visitWhileStatement","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".","53.00014","TS.MethodDefined","NoConstantConditionRuleWalker","visitDoStatement","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","53.00041","define.Parameter","visitDoStatement","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","53.00061","Conditional","/*<NoConstantConditionRuleWalker>*/ this.isConstant(node.expression)","","/*IfStatement*/ boolean/* no Else Clause*/","this.isConstant((/*Args:*/<any>node).expression)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","54.00034","call.arguments[0]","/*<NoConstantConditionRuleWalker>*/ this","isConstant","any","(/*Args:*/<any>node).expression"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","54.00034","calls","/*<NoConstantConditionRuleWalker>*/ this","isConstant","boolean","((/*Args:*/<any>node).expression)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","54.00034","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","isConstant","","((/*Args:*/<any>node).expression)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","55.00016","TS.VariableDeclaration","","message","string",""
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","55.00056","BinaryExpression","Rule","FAILURE_STRING","+ /*string*/","'while ('"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","55.00085","calls","(/*Args:*/<any>node).expression","getText","any","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","55.00085","BinaryExpression","Rule.FAILURE_STRING + 'while ('","","+ /*any*/","(/*Args:*/<any>node).expression.getText()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","55.00096","BinaryExpression","Rule.FAILURE_STRING + 'while (' + node.expression.getText()","","+ /*string*/","')'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","55.00096","Assign","message","","string","'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","55.00096","pickUpedName","Rule","FAILURE_STRING","","'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","56.00053","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","56.00070","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","56.00081","call.arguments[0]","/*<NoConstantConditionRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","56.00081","call.arguments[1]","/*<NoConstantConditionRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","56.00081","call.arguments[2]","/*<NoConstantConditionRuleWalker>*/ this","createFailure","string","'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","56.00081","calls","/*<NoConstantConditionRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')')"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","56.00081","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')')"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","56.00081","call.arguments[0]","/*<NoConstantConditionRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')')"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","56.00081","calls","/*<NoConstantConditionRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')'))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","56.00081","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')'))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","56.00081","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: while (' + (/*Args:*/<any>node).expression.getText() + ')'))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","58.00032","call.arguments[0]","super","visitDoStatement","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitDoStatement","58.00032","calls","super","visitDoStatement","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".","62.00014","TS.MethodDefined","NoConstantConditionRuleWalker","visitForStatement","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","62.00042","define.Parameter","visitForStatement","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","62.00063","Conditional","node.condition != null","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).condition != null"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","63.00030","Compare","node","condition","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","63.00030","CompareR","null","","/*Reverse*/!= /*any*/","(/*Args:*/<any>node).condition"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","63.00038","Conditional","/*<NoConstantConditionRuleWalker>*/ this.isConstant(node.condition)","","/*IfStatement*/ boolean/* no Else Clause*/","this.isConstant((/*Args:*/<any>node).condition)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","64.00038","call.arguments[0]","/*<NoConstantConditionRuleWalker>*/ this","isConstant","any","(/*Args:*/<any>node).condition"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","64.00038","calls","/*<NoConstantConditionRuleWalker>*/ this","isConstant","boolean","((/*Args:*/<any>node).condition)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","64.00038","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","isConstant","","((/*Args:*/<any>node).condition)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","65.00020","TS.VariableDeclaration","","message","string",""
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","65.00060","BinaryExpression","Rule","FAILURE_STRING","+ /*string*/","';'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","65.00082","calls","(/*Args:*/<any>node).condition","getText","any","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","65.00082","BinaryExpression","Rule.FAILURE_STRING + ';'","","+ /*any*/","(/*Args:*/<any>node).condition.getText()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","65.00093","BinaryExpression","Rule.FAILURE_STRING + ';' + node.condition.getText()","","+ /*string*/","';'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","65.00093","Assign","message","","string","'Found constant conditional: ;' + (/*Args:*/<any>node).condition.getText() + ';'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","65.00093","pickUpedName","Rule","FAILURE_STRING","","'Found constant conditional: ;' + (/*Args:*/<any>node).condition.getText() + ';'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","66.00057","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","66.00074","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","66.00085","call.arguments[0]","/*<NoConstantConditionRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","66.00085","call.arguments[1]","/*<NoConstantConditionRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","66.00085","call.arguments[2]","/*<NoConstantConditionRuleWalker>*/ this","createFailure","string","'Found constant conditional: ;' + (/*Args:*/<any>node).condition.getText() + ';'"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","66.00085","calls","/*<NoConstantConditionRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: ;' + (/*Args:*/<any>node).condition.getText() + ';')"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","66.00085","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: ;' + (/*Args:*/<any>node).condition.getText() + ';')"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","66.00085","call.arguments[0]","/*<NoConstantConditionRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: ;' + (/*Args:*/<any>node).condition.getText() + ';')"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","66.00085","calls","/*<NoConstantConditionRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: ;' + (/*Args:*/<any>node).condition.getText() + ';'))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","66.00085","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: ;' + (/*Args:*/<any>node).condition.getText() + ';'))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","66.00085","pickUpedName","/*<NoConstantConditionRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found constant conditional: ;' + (/*Args:*/<any>node).condition.getText() + ';'))"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","69.00033","call.arguments[0]","super","visitForStatement","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noConstantConditionRule.ts","NoConstantConditionRuleWalker",".visitForStatement","69.00033","calls","super","visitForStatement","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","Rule","","11.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","Rule","","11.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","Rule","","11.00035","Assign","Rule","FAILURE_STRING","string","'Unexpected control character in regular expression'"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","Rule",".","13.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","Rule",".apply","13.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","Rule",".apply","14.00083","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","Rule",".apply","14.00083","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","Rule",".apply","14.00083","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoControlRegexRuleWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","Rule",".apply","14.00083","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoControlRegexRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","Rule",".apply","14.00083","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoControlRegexRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","Rule",".apply","14.00083","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoControlRegexRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","Rule",".apply","14.00083","return","","","any","this.applyWithWalker((new NoControlRegexRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","Rule","","19.00006","defined","NoControlRegexRuleWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker","","19.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".","22.00014","TS.MethodDefined","NoControlRegexRuleWalker","visitNewExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitNewExpression","22.00043","define.Parameter","visitNewExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitNewExpression","23.00027","call.arguments[0]","/*<NoControlRegexRuleWalker>*/ this","validateCall","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitNewExpression","23.00027","calls","/*<NoControlRegexRuleWalker>*/ this","validateCall","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitNewExpression","23.00027","pickUpedName","/*<NoControlRegexRuleWalker>*/ this","validateCall","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitNewExpression","24.00034","call.arguments[0]","super","visitNewExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitNewExpression","24.00034","calls","super","visitNewExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".","27.00014","TS.MethodDefined","NoControlRegexRuleWalker","visitCallExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitCallExpression","27.00044","define.Parameter","visitCallExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitCallExpression","28.00027","call.arguments[0]","/*<NoControlRegexRuleWalker>*/ this","validateCall","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitCallExpression","28.00027","calls","/*<NoControlRegexRuleWalker>*/ this","validateCall","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitCallExpression","28.00027","pickUpedName","/*<NoControlRegexRuleWalker>*/ this","validateCall","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitCallExpression","29.00035","call.arguments[0]","super","visitCallExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitCallExpression","29.00035","calls","super","visitCallExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".","33.00014","TS.MethodDefined","NoControlRegexRuleWalker","visitRegularExpressionLiteral","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","33.00054","define.Parameter","visitRegularExpressionLiteral","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","33.00067","Conditional","/(\\x[0-1][0-9a-f])/.test(node.getText())","","/*IfStatement*/ boolean/* no Else Clause*/","/(\\x[0-1][0-9a-f])/.test((/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","34.00044","calls","(/*Args:*/<any>node)","getText","any","()"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","34.00044","call.arguments[0]","/(\\x[0-1][0-9a-f])/","test","any","(/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","34.00044","calls","/(\\x[0-1][0-9a-f])/","test","boolean","((/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","35.00053","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","35.00070","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","35.00087","call.arguments[0]","/*<NoControlRegexRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","35.00087","call.arguments[1]","/*<NoControlRegexRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","35.00087","call.arguments[2]","/*<NoControlRegexRuleWalker>*/ this","createFailure","string","'Unexpected control character in regular expression'"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","35.00087","calls","/*<NoControlRegexRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Unexpected control character in regular expression')"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","35.00087","pickUpedName","/*<NoControlRegexRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Unexpected control character in regular expression')"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","35.00087","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Unexpected control character in regular expression')"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","35.00087","call.arguments[0]","/*<NoControlRegexRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Unexpected control character in regular expression')"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","35.00087","calls","/*<NoControlRegexRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Unexpected control character in regular expression'))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","35.00087","pickUpedName","/*<NoControlRegexRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Unexpected control character in regular expression'))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","35.00087","pickUpedName","/*<NoControlRegexRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Unexpected control character in regular expression'))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","35.00087","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Unexpected control character in regular expression'))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","37.00045","call.arguments[0]","super","visitRegularExpressionLiteral","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".visitRegularExpressionLiteral","37.00045","calls","super","visitRegularExpressionLiteral","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".","41.00012","TS.MethodDefined","NoControlRegexRuleWalker","validateCall","(expression: any) => void","/**
tslint:disable:no-control-regex */

(@param)?\W+expression *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","41.00041","define.Parameter","validateCall","expression","any","/*Args:*/<any>expression"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","41.00064","Conditional","expression.expression.getText() === 'RegExp'","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>expression).expression.getText() === 'RegExp'"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","42.00035","calls","(/*Args:*/<any>expression).expression","getText","any","()"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","42.00048","Compare","expression.expression.getText()","","=== /*string*/","'RegExp'"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","42.00048","CompareR","'RegExp'","","/*Reverse*/=== /*any*/","(/*Args:*/<any>expression).expression.getText()"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","42.00060","Conditional","expression.arguments.length > 0","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>expression).arguments.length > 0"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","43.00046","Compare","expression.arguments","length","> /*number*/","0"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","43.00046","CompareR","0","","/*Reverse*/> /*any*/","(/*Args:*/<any>expression).arguments.length"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","44.00020","TS.VariableDeclaration","","arg1","any",""
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","44.00064","Assign","arg1","","any","(/*Args:*/<any>expression).arguments[0]"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","44.00067","Conditional","arg1.kind === SyntaxKind.current().StringLiteral","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>expression).arguments[0].kind === SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","45.00046","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","45.00056","ref.varName","SyntaxKind.current()","StringLiteral","number",""
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","45.00056","Compare","arg1","kind","=== /*number*/","SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","45.00056","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>expression).arguments[0].kind"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","46.00024","TS.VariableDeclaration","","regexpText","string",""
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","46.00071","Assign","regexpText","","any","((/*Args:*/<any>expression).arguments[0]).text"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","46.00076","Conditional","/[\x00-\x1f]/.test(regexpText)","","/*IfStatement*/ boolean/* no Else Clause*/","/[\x00-\x1f]/.test(((/*Args:*/<any>expression).arguments[0]).text)"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","47.00044","call.arguments[0]","/[\x00-\x1f]/","test","string","((/*Args:*/<any>expression).arguments[0]).text"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","47.00044","calls","/[\x00-\x1f]/","test","boolean","(((/*Args:*/<any>expression).arguments[0]).text)"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","48.00065","calls","(/*Args:*/<any>expression).arguments[0]","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","48.00082","calls","(/*Args:*/<any>expression).arguments[0]","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","48.00099","call.arguments[0]","/*<NoControlRegexRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>expression).arguments[0].getStart()"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","48.00099","call.arguments[1]","/*<NoControlRegexRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>expression).arguments[0].getWidth()"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","48.00099","call.arguments[2]","/*<NoControlRegexRuleWalker>*/ this","createFailure","string","'Unexpected control character in regular expression'"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","48.00099","calls","/*<NoControlRegexRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>expression).arguments[0].getStart(), (/*Args:*/<any>expression).arguments[0].getWidth(), 'Unexpected control character in regular expression')"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","48.00099","pickUpedName","/*<NoControlRegexRuleWalker>*/ this","createFailure","","((/*Args:*/<any>expression).arguments[0].getStart(), (/*Args:*/<any>expression).arguments[0].getWidth(), 'Unexpected control character in regular expression')"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","48.00099","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>expression).arguments[0].getStart(), (/*Args:*/<any>expression).arguments[0].getWidth(), 'Unexpected control character in regular expression')"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","48.00099","call.arguments[0]","/*<NoControlRegexRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>expression).arguments[0].getStart(), (/*Args:*/<any>expression).arguments[0].getWidth(), 'Unexpected control character in regular expression')"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","48.00099","calls","/*<NoControlRegexRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>expression).arguments[0].getStart(), (/*Args:*/<any>expression).arguments[0].getWidth(), 'Unexpected control character in regular expression'))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","48.00099","pickUpedName","/*<NoControlRegexRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>expression).arguments[0].getStart(), (/*Args:*/<any>expression).arguments[0].getWidth(), 'Unexpected control character in regular expression'))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","48.00099","pickUpedName","/*<NoControlRegexRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>expression).arguments[0].getStart(), (/*Args:*/<any>expression).arguments[0].getWidth(), 'Unexpected control character in regular expression'))"
"../tslint-microsoft-contrib-master/src/noControlRegexRule.ts","NoControlRegexRuleWalker",".validateCall","48.00099","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>expression).arguments[0].getStart(), (/*Args:*/<any>expression).arguments[0].getWidth(), 'Unexpected control character in regular expression'))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule","","11.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule","","12.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule","","12.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule","","12.00035","Assign","Rule","FAILURE_STRING","string","'Forbidden call to document.cookie'"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".","14.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","14.00034","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","15.00012","TS.VariableDeclaration","","compilerOptions","any",""
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","19.00120","Assign","compilerOptions","","= /*any*/","<any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false}"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","19.00120","pickUpedName","compilerOptions","","","<any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false}"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","20.00012","TS.VariableDeclaration","","curProgram","any",""
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","20.00077","call.arguments[0]","ts","createProgram","any[]","[sourceFile.fileName]"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","20.00077","call.arguments[1]","ts","createProgram","any","<any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false}"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","20.00077","calls","ts","createProgram","any","([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false})"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","20.00077","pickUpedName","compilerOptions","","","([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false})"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","20.00077","Assign","curProgram","","any","ts.createProgram([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false})"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","20.00077","pickUpedName","compilerOptions","","","ts.createProgram([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false})"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","21.00012","TS.VariableDeclaration","","curTypeChecker","any",""
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","21.00057","calls","ts.createProgram([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false})","getTypeChecker","any","()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","21.00057","Assign","curTypeChecker","","any","ts.createProgram([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false}).getTypeChecker()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","23.00012","TS.VariableDeclaration","","documentRegistry","any",""
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","23.00035","calls","ts","createDocumentRegistry","any","()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","23.00035","Assign","documentRegistry","","any","ts.createDocumentRegistry()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","24.00012","TS.VariableDeclaration","","languageServiceHost","any",""
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","24.00113","calls","(/*Args:*/<any>sourceFile)","getFullText","any","()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","24.00113","call.arguments[0]","Lint","createLanguageServiceHost","string","'file.ts'"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","24.00113","call.arguments[1]","Lint","createLanguageServiceHost","any","(/*Args:*/<any>sourceFile).getFullText()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","24.00113","calls","Lint","createLanguageServiceHost","any","('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","24.00113","Assign","languageServiceHost","","any","Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","25.00012","TS.VariableDeclaration","","languageService","any",""
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","25.00097","call.arguments[0]","ts","createLanguageService","any","Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","25.00097","call.arguments[1]","ts","createLanguageService","any","ts.createDocumentRegistry()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","25.00097","calls","ts","createLanguageService","any","(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","25.00097","Assign","languageService","","any","ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","28.00093","call.arguments[0]","ts.createProgram([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false})","getSourceFile","any","(/*Args:*/<any>sourceFile).fileName"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","28.00093","calls","ts.createProgram([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false})","getSourceFile","any","((/*Args:*/<any>sourceFile).fileName)"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","28.00109","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","28.00109","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","28.00139","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","NoCookiesWalker","(new NoCookiesWalker(ts.createProgram([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false}).getSourceFile((/*Args:*/<any>sourceFile).fileName), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()), ts.createProgram([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false}).getTypeChecker()))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","28.00139","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoCookiesWalker(ts.createProgram([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false}).getSourceFile((/*Args:*/<any>sourceFile).fileName), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()), ts.createProgram([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false}).getTypeChecker())))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","28.00139","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoCookiesWalker(ts.createProgram([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false}).getSourceFile((/*Args:*/<any>sourceFile).fileName), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()), ts.createProgram([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false}).getTypeChecker())))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","28.00139","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoCookiesWalker(ts.createProgram([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false}).getSourceFile((/*Args:*/<any>sourceFile).fileName), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()), ts.createProgram([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false}).getTypeChecker())))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule",".apply","28.00139","return","","","any","this.applyWithWalker((new NoCookiesWalker(ts.createProgram([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false}).getSourceFile((/*Args:*/<any>sourceFile).fileName), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()), ts.createProgram([sourceFile.fileName], <any>{target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS, noResolve: false}).getTypeChecker())))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","Rule","","32.00006","defined","NoCookiesWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker","","32.00006","ref.type","ScopedSymbolTrackingWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","32.00100","TS.MethodDefined","NoCookiesWalker","Constructor","any",""
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","37.00032","define.Parameter","/*<NoCookiesWalker>*/ this.","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","37.00058","define.Parameter","/*<NoCookiesWalker>*/ this.","options","any","/*Args:*/<any>options"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","37.00089","define.Parameter","/*<NoCookiesWalker>*/ this.","languageService","any","/*Args:*/<any>languageService"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","37.00139","define.Parameter","/*<NoCookiesWalker>*/ this.","typeChecker","any","/*Args:*/<any>typeChecker"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","39.00036","call.arguments[0]","super","","any","NoCookiesWalker.sourceFile"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","39.00036","call.arguments[1]","super","","any","NoCookiesWalker.options"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","39.00036","call.arguments[2]","super","","any","NoCookiesWalker.languageService"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","39.00036","calls","super","","void","(NoCookiesWalker.sourceFile, NoCookiesWalker.options, NoCookiesWalker.languageService)"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","39.00036","pickUpedName","sourceFile","","","(NoCookiesWalker.sourceFile, NoCookiesWalker.options, NoCookiesWalker.languageService)"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","39.00036","pickUpedName","options","","","(NoCookiesWalker.sourceFile, NoCookiesWalker.options, NoCookiesWalker.languageService)"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","39.00036","pickUpedName","languageService","","","(NoCookiesWalker.sourceFile, NoCookiesWalker.options, NoCookiesWalker.languageService)"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","40.00032","Assign","/*<NoCookiesWalker>*/ this","languageServices","= /*any*/","NoCookiesWalker.languageService"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","40.00032","pickUpedName","/*<NoCookiesWalker>*/ this","languageServices","","NoCookiesWalker.languageService"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","40.00032","pickUpedName","languageService","","","NoCookiesWalker.languageService"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","42.00027","Assign","/*<NoCookiesWalker>*/ this","typeChecker","= /*any*/","NoCookiesWalker.typeChecker"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","42.00027","pickUpedName","/*<NoCookiesWalker>*/ this","typeChecker","","NoCookiesWalker.typeChecker"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".constructor","42.00027","pickUpedName","typeChecker","","","NoCookiesWalker.typeChecker"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".","46.00014","TS.MethodDefined","NoCookiesWalker","visitPropertyAccessExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","46.00054","define.Parameter","visitPropertyAccessExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","47.00012","TS.VariableDeclaration","","propertyName","any",""
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","47.00038","Assign","propertyName","","any","(/*Args:*/<any>node).name.text"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","47.00043","Conditional","propertyName === 'cookie'","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).name.text === 'cookie'"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","48.00029","Compare","propertyName","","=== /*string*/","'cookie'"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","48.00029","CompareR","'cookie'","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).name.text"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","50.00016","TS.VariableDeclaration","","leftSide","any",""
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","50.00049","Assign","leftSide","","any","(/*Args:*/<any>node).expression"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","52.00020","TS.VariableDeclaration","","leftSideType","any",""
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","52.00080","call.arguments[0]","NoCookiesWalker.typeChecker","getTypeAtLocation","any","(/*Args:*/<any>node).expression"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","52.00080","calls","NoCookiesWalker.typeChecker","getTypeAtLocation","any","((/*Args:*/<any>node).expression)"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","52.00080","pickUpedName","/*<NoCookiesWalker>*/ this.typeChecker","getTypeAtLocation","","((/*Args:*/<any>node).expression)"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","52.00080","Assign","leftSideType","","any","NoCookiesWalker.typeChecker.getTypeAtLocation((/*Args:*/<any>node).expression)"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","52.00080","pickUpedName","/*<NoCookiesWalker>*/ this.typeChecker","getTypeAtLocation","","NoCookiesWalker.typeChecker.getTypeAtLocation((/*Args:*/<any>node).expression)"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","53.00020","TS.VariableDeclaration","","typeAsString","string",""
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","53.00074","call.arguments[0]","NoCookiesWalker.typeChecker","typeToString","any","NoCookiesWalker.typeChecker.getTypeAtLocation((/*Args:*/<any>node).expression)"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","53.00074","calls","NoCookiesWalker.typeChecker","typeToString","any","(NoCookiesWalker.typeChecker.getTypeAtLocation((/*Args:*/<any>node).expression))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","53.00074","pickUpedName","/*<NoCookiesWalker>*/ this.typeChecker","typeToString","","(NoCookiesWalker.typeChecker.getTypeAtLocation((/*Args:*/<any>node).expression))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","53.00074","Assign","typeAsString","","any","NoCookiesWalker.typeChecker.typeToString(NoCookiesWalker.typeChecker.getTypeAtLocation((/*Args:*/<any>node).expression))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","53.00074","pickUpedName","/*<NoCookiesWalker>*/ this.typeChecker","typeToString","","NoCookiesWalker.typeChecker.typeToString(NoCookiesWalker.typeChecker.getTypeAtLocation((/*Args:*/<any>node).expression))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","53.00088","Conditional","leftSideType.flags === ts.TypeFlags.Any || typeAsString === 'Document'","","/*IfStatement*/ boolean/* no Else Clause*/","NoCookiesWalker.typeChecker.getTypeAtLocation((/*Args:*/<any>node).expression).flags === ts.TypeFlags.Any || NoCookiesWalker.typeChecker.typeToString(NoCookiesWalker.typeChecker.getTypeAtLocation((/*Args:*/<any>node).expression)) === 'Document'"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","54.00057","ref.varName","ts.TypeFlags","Any","any",""
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","54.00057","Compare","leftSideType","flags","=== /*any*/","ts.TypeFlags.Any"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","54.00057","CompareR","ts.TypeFlags","","/*Reverse*/=== /*any*/","NoCookiesWalker.typeChecker.getTypeAtLocation((/*Args:*/<any>node).expression).flags"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","54.00080","Compare","typeAsString","","=== /*string*/","'Document'"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","54.00080","CompareR","'Document'","","/*Reverse*/=== /*string*/","NoCookiesWalker.typeChecker.typeToString(NoCookiesWalker.typeChecker.getTypeAtLocation((/*Args:*/<any>node).expression))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","54.00080","BinaryExpression","leftSideType.flags === ts.TypeFlags.Any","","|| /*boolean*/","NoCookiesWalker.typeChecker.typeToString(NoCookiesWalker.typeChecker.getTypeAtLocation((/*Args:*/<any>node).expression)) === 'Document'"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","55.00065","calls","(/*Args:*/<any>node).expression","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","55.00086","calls","(/*Args:*/<any>node).expression","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","55.00103","call.arguments[0]","/*<NoCookiesWalker>*/ this","createFailure","any","(/*Args:*/<any>node).expression.getStart()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","55.00103","call.arguments[1]","/*<NoCookiesWalker>*/ this","createFailure","any","(/*Args:*/<any>node).expression.getWidth()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","55.00103","call.arguments[2]","/*<NoCookiesWalker>*/ this","createFailure","string","'Forbidden call to document.cookie'"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","55.00103","calls","/*<NoCookiesWalker>*/ this","createFailure","any","((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'Forbidden call to document.cookie')"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","55.00103","pickUpedName","/*<NoCookiesWalker>*/ this","createFailure","","((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'Forbidden call to document.cookie')"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","55.00103","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'Forbidden call to document.cookie')"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","55.00103","call.arguments[0]","/*<NoCookiesWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'Forbidden call to document.cookie')"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","55.00103","calls","/*<NoCookiesWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'Forbidden call to document.cookie'))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","55.00103","pickUpedName","/*<NoCookiesWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'Forbidden call to document.cookie'))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","55.00103","pickUpedName","/*<NoCookiesWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'Forbidden call to document.cookie'))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","55.00103","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'Forbidden call to document.cookie'))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","57.00022","TS.VariableDeclaration","","e","any",""
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","57.00026","Conditional","leftSide.getFullText().trim() === 'document'","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).expression.getFullText().trim() === 'document'"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","59.00030","calls","(/*Args:*/<any>node).expression","getFullText","any","()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","59.00044","calls","(/*Args:*/<any>node).expression.getFullText()","trim","any","()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","59.00054","Compare","leftSide.getFullText().trim()","","=== /*string*/","'document'"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","59.00054","CompareR","'document'","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.getFullText().trim()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","60.00065","calls","(/*Args:*/<any>node).expression","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","60.00086","calls","(/*Args:*/<any>node).expression","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","60.00103","call.arguments[0]","/*<NoCookiesWalker>*/ this","createFailure","any","(/*Args:*/<any>node).expression.getStart()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","60.00103","call.arguments[1]","/*<NoCookiesWalker>*/ this","createFailure","any","(/*Args:*/<any>node).expression.getWidth()"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","60.00103","call.arguments[2]","/*<NoCookiesWalker>*/ this","createFailure","string","'Forbidden call to document.cookie'"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","60.00103","calls","/*<NoCookiesWalker>*/ this","createFailure","any","((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'Forbidden call to document.cookie')"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","60.00103","pickUpedName","/*<NoCookiesWalker>*/ this","createFailure","","((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'Forbidden call to document.cookie')"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","60.00103","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'Forbidden call to document.cookie')"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","60.00103","call.arguments[0]","/*<NoCookiesWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'Forbidden call to document.cookie')"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","60.00103","calls","/*<NoCookiesWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'Forbidden call to document.cookie'))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","60.00103","pickUpedName","/*<NoCookiesWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'Forbidden call to document.cookie'))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","60.00103","pickUpedName","/*<NoCookiesWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'Forbidden call to document.cookie'))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","60.00103","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'Forbidden call to document.cookie'))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","65.00045","call.arguments[0]","super","visitPropertyAccessExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitPropertyAccessExpression","65.00045","calls","super","visitPropertyAccessExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".","67.00014","TS.MethodDefined","NoCookiesWalker","visitIdentifier","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitIdentifier","67.00040","define.Parameter","visitIdentifier","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitIdentifier","68.00031","call.arguments[0]","super","visitIdentifier","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitIdentifier","68.00031","calls","super","visitIdentifier","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitIdentifier","69.00065","call.arguments[0]","AstUtils","dumpTypeInfo","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitIdentifier","69.00065","call.arguments[1]","AstUtils","dumpTypeInfo","any","NoCookiesWalker.languageService"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitIdentifier","69.00065","call.arguments[2]","AstUtils","dumpTypeInfo","any","NoCookiesWalker.typeChecker"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitIdentifier","69.00065","calls","AstUtils","dumpTypeInfo","void","((/*Args:*/<any>node), NoCookiesWalker.languageService, NoCookiesWalker.typeChecker)"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitIdentifier","69.00065","pickUpedName","/*<NoCookiesWalker>*/ this","languageServices","","((/*Args:*/<any>node), NoCookiesWalker.languageService, NoCookiesWalker.typeChecker)"
"../tslint-microsoft-contrib-master/src/noCookiesRule.ts","NoCookiesWalker",".visitIdentifier","69.00065","pickUpedName","/*<NoCookiesWalker>*/ this","typeChecker","","((/*Args:*/<any>node), NoCookiesWalker.languageService, NoCookiesWalker.typeChecker)"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","Rule","","11.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","Rule","","11.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","Rule","","11.00035","Assign","Rule","FAILURE_STRING","string","'Variables should not be deleted: '"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","Rule",".","13.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","Rule",".apply","13.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","Rule",".apply","14.00014","TS.VariableDeclaration","","noDeleteExpression","any",""
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","Rule",".apply","14.00076","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","Rule",".apply","14.00076","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","Rule",".apply","14.00076","Assign","noDeleteExpression","","any","(new NoDeleteExpression((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","Rule",".apply","14.00076","pickUpedName","/*<Rule>*/ this","getOptions","","(new NoDeleteExpression((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","Rule",".apply","15.00037","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoDeleteExpression((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","Rule",".apply","15.00037","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoDeleteExpression((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","Rule",".apply","15.00037","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoDeleteExpression((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","Rule",".apply","15.00037","return","","","any","this.applyWithWalker((new NoDeleteExpression((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","Rule","","19.00006","defined","NoDeleteExpression","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression","","19.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".","21.00011","TS.MethodDefined","NoDeleteExpression","visitExpressionStatement","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","21.00046","define.Parameter","visitExpressionStatement","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","22.00040","call.arguments[0]","super","visitExpressionStatement","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","22.00040","calls","super","visitExpressionStatement","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","22.00046","Conditional","node.expression.kind === SyntaxKind.current().DeleteExpression","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).expression.kind === SyntaxKind.current().DeleteExpression"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","23.00049","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","23.00059","ref.varName","SyntaxKind.current()","DeleteExpression","number",""
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","23.00059","Compare","node.expression","kind","=== /*number*/","SyntaxKind.current().DeleteExpression"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","23.00059","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.kind"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","25.00016","TS.VariableDeclaration","","deletedObject","any",""
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","25.00058","calls","(/*Args:*/<any>node).expression","getChildren","any","()"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","25.00072","Assign","deletedObject","","any","(/*Args:*/<any>node).expression.getChildren()[1]"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","25.00075","Conditional","deletedObject.kind === SyntaxKind.current().ElementAccessExpression","","/*IfStatement*/ boolean","(/*Args:*/<any>node).expression.getChildren()[1].kind === SyntaxKind.current().ElementAccessExpression"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","27.00051","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","27.00061","ref.varName","SyntaxKind.current()","ElementAccessExpression","number",""
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","27.00061","Compare","deletedObject","kind","=== /*number*/","SyntaxKind.current().ElementAccessExpression"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","27.00061","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.getChildren()[1].kind"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","28.00022","TS.VariableDeclaration","","deletedExpression","any",""
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","28.00079","Assign","deletedExpression","","any","((/*Args:*/<any>node).expression.getChildren()[1]).expression"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","28.00090","Conditional","deletedExpression.kind !== SyntaxKind.current().PropertyAccessExpression","","/*IfStatement*/ boolean/* no Else Clause*/","((/*Args:*/<any>node).expression.getChildren()[1]).expression.kind !== SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","29.00059","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","29.00069","ref.varName","SyntaxKind.current()","PropertyAccessExpression","number",""
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","29.00069","Compare","deletedExpression","kind","!== /*number*/","SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","29.00069","CompareR","SyntaxKind.current()","","/*Reverse*/!== /*any*/","((/*Args:*/<any>node).expression.getChildren()[1]).expression.kind"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","30.00045","call.arguments[0]","/*<NoDeleteExpression>*/ this","addNoDeleteFailure","any","(/*Args:*/<any>node).expression.getChildren()[1]"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","30.00045","calls","/*<NoDeleteExpression>*/ this","addNoDeleteFailure","void","((/*Args:*/<any>node).expression.getChildren()[1])"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","30.00045","pickUpedName","/*<NoDeleteExpression>*/ this","addNoDeleteFailure","","((/*Args:*/<any>node).expression.getChildren()[1])"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","32.00019","Conditional","deletedObject.kind !== SyntaxKind.current().PropertyAccessExpression","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).expression.getChildren()[1].kind !== SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","32.00058","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","32.00068","ref.varName","SyntaxKind.current()","PropertyAccessExpression","number",""
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","32.00068","Compare","deletedObject","kind","!== /*number*/","SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","32.00068","CompareR","SyntaxKind.current()","","/*Reverse*/!== /*any*/","(/*Args:*/<any>node).expression.getChildren()[1].kind"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","33.00041","call.arguments[0]","/*<NoDeleteExpression>*/ this","addNoDeleteFailure","any","(/*Args:*/<any>node).expression.getChildren()[1]"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","33.00041","calls","/*<NoDeleteExpression>*/ this","addNoDeleteFailure","void","((/*Args:*/<any>node).expression.getChildren()[1])"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".visitExpressionStatement","33.00041","pickUpedName","/*<NoDeleteExpression>*/ this","addNoDeleteFailure","","((/*Args:*/<any>node).expression.getChildren()[1])"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".","38.00011","TS.MethodDefined","NoDeleteExpression","addNoDeleteFailure","(deletedObject: any) => void","(@param)?\W+deletedObject *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","38.00049","define.Parameter","addNoDeleteFailure","deletedObject","any","/*Args:*/<any>deletedObject"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","39.00012","TS.VariableDeclaration","","msg","string",""
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","39.00063","calls","(/*Args:*/<any>deletedObject)","getFullText","any","()"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","39.00077","calls","(/*Args:*/<any>deletedObject).getFullText()","trim","any","()"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","39.00077","BinaryExpression","Rule","FAILURE_STRING","+ /*any*/","(/*Args:*/<any>deletedObject).getFullText().trim()"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","39.00077","Assign","msg","","string","'Variables should not be deleted: ' + (/*Args:*/<any>deletedObject).getFullText().trim()"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","39.00077","pickUpedName","Rule","FAILURE_STRING","","'Variables should not be deleted: ' + (/*Args:*/<any>deletedObject).getFullText().trim()"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","40.00058","calls","(/*Args:*/<any>deletedObject)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","40.00084","calls","(/*Args:*/<any>deletedObject)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","40.00095","call.arguments[0]","/*<NoDeleteExpression>*/ this","createFailure","any","(/*Args:*/<any>deletedObject).getStart()"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","40.00095","call.arguments[1]","/*<NoDeleteExpression>*/ this","createFailure","any","(/*Args:*/<any>deletedObject).getWidth()"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","40.00095","call.arguments[2]","/*<NoDeleteExpression>*/ this","createFailure","string","'Variables should not be deleted: ' + (/*Args:*/<any>deletedObject).getFullText().trim()"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","40.00095","calls","/*<NoDeleteExpression>*/ this","createFailure","any","((/*Args:*/<any>deletedObject).getStart(), (/*Args:*/<any>deletedObject).getWidth(), 'Variables should not be deleted: ' + (/*Args:*/<any>deletedObject).getFullText().trim())"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","40.00095","pickUpedName","/*<NoDeleteExpression>*/ this","createFailure","","((/*Args:*/<any>deletedObject).getStart(), (/*Args:*/<any>deletedObject).getWidth(), 'Variables should not be deleted: ' + (/*Args:*/<any>deletedObject).getFullText().trim())"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","40.00095","call.arguments[0]","/*<NoDeleteExpression>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>deletedObject).getStart(), (/*Args:*/<any>deletedObject).getWidth(), 'Variables should not be deleted: ' + (/*Args:*/<any>deletedObject).getFullText().trim())"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","40.00095","calls","/*<NoDeleteExpression>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>deletedObject).getStart(), (/*Args:*/<any>deletedObject).getWidth(), 'Variables should not be deleted: ' + (/*Args:*/<any>deletedObject).getFullText().trim()))"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","40.00095","pickUpedName","/*<NoDeleteExpression>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>deletedObject).getStart(), (/*Args:*/<any>deletedObject).getWidth(), 'Variables should not be deleted: ' + (/*Args:*/<any>deletedObject).getFullText().trim()))"
"../tslint-microsoft-contrib-master/src/noDeleteExpressionRule.ts","NoDeleteExpression",".addNoDeleteFailure","40.00095","pickUpedName","/*<NoDeleteExpression>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>deletedObject).getStart(), (/*Args:*/<any>deletedObject).getWidth(), 'Variables should not be deleted: ' + (/*Args:*/<any>deletedObject).getFullText().trim()))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","Rule","","11.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","Rule","","11.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","Rule","","11.00035","Assign","Rule","FAILURE_STRING","string","'Forbidden call to '"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","Rule",".","13.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","Rule",".apply","13.00034","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","Rule",".apply","14.00090","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","Rule",".apply","14.00090","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","Rule",".apply","14.00090","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoDisableAutoSanitizationWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","Rule",".apply","14.00090","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoDisableAutoSanitizationWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","Rule",".apply","14.00090","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoDisableAutoSanitizationWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","Rule",".apply","14.00090","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoDisableAutoSanitizationWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","Rule",".apply","14.00090","return","","","any","this.applyWithWalker((new NoDisableAutoSanitizationWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","Rule","","18.00006","defined","NoDisableAutoSanitizationWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker","","18.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".","20.00014","TS.MethodDefined","NoDisableAutoSanitizationWalker","visitCallExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","20.00044","define.Parameter","visitCallExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","21.00012","TS.VariableDeclaration","","functionName","string",""
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","21.00062","call.arguments[0]","AstUtils","getFunctionName","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","21.00062","calls","AstUtils","getFunctionName","string","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","21.00062","Assign","functionName","","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","21.00068","Conditional","functionName === 'execUnsafeLocalFunction' || functionName === 'setInnerHTMLUnsafe'","","/*IfStatement*/ boolean/* no Else Clause*/","AstUtils.getFunctionName((/*Args:*/<any>node)) === 'execUnsafeLocalFunction' || AstUtils.getFunctionName((/*Args:*/<any>node)) === 'setInnerHTMLUnsafe'"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","22.00029","Compare","functionName","","=== /*string*/","'execUnsafeLocalFunction'"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","22.00029","CompareR","'execUnsafeLocalFunction'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","22.00075","Compare","functionName","","=== /*string*/","'setInnerHTMLUnsafe'"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","22.00075","CompareR","'setInnerHTMLUnsafe'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","22.00075","BinaryExpression","functionName === 'execUnsafeLocalFunction'","","|| /*boolean*/","AstUtils.getFunctionName((/*Args:*/<any>node)) === 'setInnerHTMLUnsafe'"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","23.00053","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","23.00070","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","23.00103","BinaryExpression","Rule","FAILURE_STRING","+ /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","23.00103","call.arguments[0]","/*<NoDisableAutoSanitizationWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","23.00103","call.arguments[1]","/*<NoDisableAutoSanitizationWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","23.00103","call.arguments[2]","/*<NoDisableAutoSanitizationWalker>*/ this","createFailure","string","'Forbidden call to ' + AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","23.00103","calls","/*<NoDisableAutoSanitizationWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden call to ' + AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","23.00103","pickUpedName","/*<NoDisableAutoSanitizationWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden call to ' + AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","23.00103","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden call to ' + AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","23.00103","call.arguments[0]","/*<NoDisableAutoSanitizationWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden call to ' + AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","23.00103","calls","/*<NoDisableAutoSanitizationWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden call to ' + AstUtils.getFunctionName((/*Args:*/<any>node))))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","23.00103","pickUpedName","/*<NoDisableAutoSanitizationWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden call to ' + AstUtils.getFunctionName((/*Args:*/<any>node))))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","23.00103","pickUpedName","/*<NoDisableAutoSanitizationWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden call to ' + AstUtils.getFunctionName((/*Args:*/<any>node))))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","23.00103","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden call to ' + AstUtils.getFunctionName((/*Args:*/<any>node))))"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","25.00035","call.arguments[0]","super","visitCallExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noDisableAutoSanitizationRule.ts","NoDisableAutoSanitizationWalker",".visitCallExpression","25.00035","calls","super","visitCallExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule","","11.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule","","12.00018","TS.PropertyDefined","Rule","WRITE_FAILURE","string",""
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule","","12.00034","TS.PropertyDefined","Rule","WRITE_FAILURE","string",""
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule","","12.00034","Assign","Rule","WRITE_FAILURE","string","'Forbidden call to document.write'"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule","","13.00018","TS.PropertyDefined","Rule","WRITELN_FAILURE","string",""
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule","","13.00036","TS.PropertyDefined","Rule","WRITELN_FAILURE","string",""
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule","","13.00036","Assign","Rule","WRITELN_FAILURE","string","'Forbidden call to document.writeln'"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".","15.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","15.00034","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","16.00012","TS.VariableDeclaration","","documentRegistry","any",""
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","16.00035","calls","ts","createDocumentRegistry","any","()"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","16.00035","Assign","documentRegistry","","any","ts.createDocumentRegistry()"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","17.00012","TS.VariableDeclaration","","languageServiceHost","any",""
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","17.00088","calls","(/*Args:*/<any>sourceFile)","getFullText","any","()"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","17.00088","call.arguments[0]","Lint","createLanguageServiceHost","string","'file.ts'"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","17.00088","call.arguments[1]","Lint","createLanguageServiceHost","any","(/*Args:*/<any>sourceFile).getFullText()"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","17.00088","calls","Lint","createLanguageServiceHost","any","('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","17.00088","Assign","languageServiceHost","","any","Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","18.00012","TS.VariableDeclaration","","languageService","any",""
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","18.00097","call.arguments[0]","ts","createLanguageService","any","Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","18.00097","call.arguments[1]","ts","createLanguageService","any","ts.createDocumentRegistry()"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","18.00097","calls","ts","createLanguageService","any","(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","18.00097","Assign","languageService","","any","ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","19.00080","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","19.00080","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","19.00093","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","NoDocumentWriteWalker","(new NoDocumentWriteWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","19.00093","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoDocumentWriteWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","19.00093","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoDocumentWriteWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","19.00093","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoDocumentWriteWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule",".apply","19.00093","return","","","any","this.applyWithWalker((new NoDocumentWriteWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","Rule","","23.00006","defined","NoDocumentWriteWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker","","23.00006","ref.type","ScopedSymbolTrackingWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".constructor","23.00089","TS.MethodDefined","NoDocumentWriteWalker","Constructor","any",""
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".constructor","28.00032","define.Parameter","/*<NoDocumentWriteWalker>*/ this.","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".constructor","28.00058","define.Parameter","/*<NoDocumentWriteWalker>*/ this.","options","any","/*Args:*/<any>options"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".constructor","28.00089","define.Parameter","/*<NoDocumentWriteWalker>*/ this.","languageService","any","/*Args:*/<any>languageService"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".constructor","29.00035","call.arguments[0]","super","","any","NoDocumentWriteWalker.sourceFile"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".constructor","29.00035","call.arguments[1]","super","","any","NoDocumentWriteWalker.options"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".constructor","29.00035","call.arguments[2]","super","","any","NoDocumentWriteWalker.languageService"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".constructor","29.00035","calls","super","","void","(NoDocumentWriteWalker.sourceFile, NoDocumentWriteWalker.options, NoDocumentWriteWalker.languageService)"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".constructor","29.00035","pickUpedName","sourceFile","","","(NoDocumentWriteWalker.sourceFile, NoDocumentWriteWalker.options, NoDocumentWriteWalker.languageService)"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".constructor","29.00035","pickUpedName","options","","","(NoDocumentWriteWalker.sourceFile, NoDocumentWriteWalker.options, NoDocumentWriteWalker.languageService)"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".constructor","29.00035","pickUpedName","languageService","","","(NoDocumentWriteWalker.sourceFile, NoDocumentWriteWalker.options, NoDocumentWriteWalker.languageService)"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".","34.00014","TS.MethodDefined","NoDocumentWriteWalker","visitCallExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","34.00044","define.Parameter","visitCallExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","35.00012","TS.VariableDeclaration","","functionName","string",""
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","35.00053","call.arguments[0]","AstUtils","getFunctionName","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","35.00053","calls","AstUtils","getFunctionName","string","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","35.00053","Assign","functionName","","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","35.00059","Conditional","functionName === 'write' || functionName === 'writeln'","","/*IfStatement*/ boolean/* no Else Clause*/","AstUtils.getFunctionName((/*Args:*/<any>node)) === 'write' || AstUtils.getFunctionName((/*Args:*/<any>node)) === 'writeln'"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","36.00029","Compare","functionName","","=== /*string*/","'write'"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","36.00029","CompareR","'write'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","36.00057","Compare","functionName","","=== /*string*/","'writeln'"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","36.00057","CompareR","'writeln'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","36.00057","BinaryExpression","functionName === 'write'","","|| /*boolean*/","AstUtils.getFunctionName((/*Args:*/<any>node)) === 'writeln'"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","38.00016","TS.VariableDeclaration","","leftSide","any",""
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","38.00067","Assign","leftSide","","any","((/*Args:*/<any>node).expression).expression"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","38.00078","Conditional","leftSide","","/*IfStatement*/ any/* no Else Clause*/","((/*Args:*/<any>node).expression).expression"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","40.00020","TS.VariableDeclaration","","leftSideType","any",""
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","40.00081","call.arguments[0]","/*<NoDocumentWriteWalker>*/ this.typeChecker","getTypeAtLocation","any","((/*Args:*/<any>node).expression).expression"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","40.00081","calls","/*<NoDocumentWriteWalker>*/ this.typeChecker","getTypeAtLocation","any","(((/*Args:*/<any>node).expression).expression)"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","40.00081","pickUpedName","/*<NoDocumentWriteWalker>*/ this.typeChecker","getTypeAtLocation","","(((/*Args:*/<any>node).expression).expression)"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","40.00081","Assign","leftSideType","","any","this.typeChecker.getTypeAtLocation(((/*Args:*/<any>node).expression).expression)"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","40.00081","pickUpedName","/*<NoDocumentWriteWalker>*/ this.typeChecker","getTypeAtLocation","","this.typeChecker.getTypeAtLocation(((/*Args:*/<any>node).expression).expression)"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","41.00020","TS.VariableDeclaration","","typeAsString","string",""
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","41.00075","call.arguments[0]","/*<NoDocumentWriteWalker>*/ this.typeChecker","typeToString","any","this.typeChecker.getTypeAtLocation(((/*Args:*/<any>node).expression).expression)"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","41.00075","calls","/*<NoDocumentWriteWalker>*/ this.typeChecker","typeToString","any","(this.typeChecker.getTypeAtLocation(((/*Args:*/<any>node).expression).expression))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","41.00075","pickUpedName","/*<NoDocumentWriteWalker>*/ this.typeChecker","typeToString","","(this.typeChecker.getTypeAtLocation(((/*Args:*/<any>node).expression).expression))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","41.00075","Assign","typeAsString","","any","this.typeChecker.typeToString(this.typeChecker.getTypeAtLocation(((/*Args:*/<any>node).expression).expression))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","41.00075","pickUpedName","/*<NoDocumentWriteWalker>*/ this.typeChecker","typeToString","","this.typeChecker.typeToString(this.typeChecker.getTypeAtLocation(((/*Args:*/<any>node).expression).expression))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","41.00089","Conditional","leftSideType.flags === ts.TypeFlags.Any || typeAsString === 'Document'","","/*IfStatement*/ boolean/* no Else Clause*/","this.typeChecker.getTypeAtLocation(((/*Args:*/<any>node).expression).expression).flags === ts.TypeFlags.Any || this.typeChecker.typeToString(this.typeChecker.getTypeAtLocation(((/*Args:*/<any>node).expression).expression)) === 'Document'"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","42.00057","ref.varName","ts.TypeFlags","Any","any",""
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","42.00057","Compare","leftSideType","flags","=== /*any*/","ts.TypeFlags.Any"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","42.00057","CompareR","ts.TypeFlags","","/*Reverse*/=== /*any*/","this.typeChecker.getTypeAtLocation(((/*Args:*/<any>node).expression).expression).flags"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","42.00080","Compare","typeAsString","","=== /*string*/","'Document'"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","42.00080","CompareR","'Document'","","/*Reverse*/=== /*string*/","this.typeChecker.typeToString(this.typeChecker.getTypeAtLocation(((/*Args:*/<any>node).expression).expression))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","42.00080","BinaryExpression","leftSideType.flags === ts.TypeFlags.Any","","|| /*boolean*/","this.typeChecker.typeToString(this.typeChecker.getTypeAtLocation(((/*Args:*/<any>node).expression).expression)) === 'Document'"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","42.00094","Conditional","functionName === 'write'","","/*IfStatement*/ boolean","AstUtils.getFunctionName((/*Args:*/<any>node)) === 'write'"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","43.00041","Compare","functionName","","=== /*string*/","'write'"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","43.00041","CompareR","'write'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","44.00069","calls","((/*Args:*/<any>node).expression).expression","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","44.00090","calls","((/*Args:*/<any>node).expression).expression","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","44.00107","call.arguments[0]","/*<NoDocumentWriteWalker>*/ this","createFailure","any","((/*Args:*/<any>node).expression).expression.getStart()"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","44.00107","call.arguments[1]","/*<NoDocumentWriteWalker>*/ this","createFailure","any","((/*Args:*/<any>node).expression).expression.getWidth()"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","44.00107","call.arguments[2]","/*<NoDocumentWriteWalker>*/ this","createFailure","string","'Forbidden call to document.write'"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","44.00107","calls","/*<NoDocumentWriteWalker>*/ this","createFailure","any","(((/*Args:*/<any>node).expression).expression.getStart(), ((/*Args:*/<any>node).expression).expression.getWidth(), 'Forbidden call to document.write')"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","44.00107","pickUpedName","/*<NoDocumentWriteWalker>*/ this","createFailure","","(((/*Args:*/<any>node).expression).expression.getStart(), ((/*Args:*/<any>node).expression).expression.getWidth(), 'Forbidden call to document.write')"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","44.00107","pickUpedName","Rule","WRITE_FAILURE","","(((/*Args:*/<any>node).expression).expression.getStart(), ((/*Args:*/<any>node).expression).expression.getWidth(), 'Forbidden call to document.write')"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","44.00107","call.arguments[0]","/*<NoDocumentWriteWalker>*/ this","addFailure","any","this.createFailure(((/*Args:*/<any>node).expression).expression.getStart(), ((/*Args:*/<any>node).expression).expression.getWidth(), 'Forbidden call to document.write')"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","44.00107","calls","/*<NoDocumentWriteWalker>*/ this","addFailure","any","(this.createFailure(((/*Args:*/<any>node).expression).expression.getStart(), ((/*Args:*/<any>node).expression).expression.getWidth(), 'Forbidden call to document.write'))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","44.00107","pickUpedName","/*<NoDocumentWriteWalker>*/ this","addFailure","","(this.createFailure(((/*Args:*/<any>node).expression).expression.getStart(), ((/*Args:*/<any>node).expression).expression.getWidth(), 'Forbidden call to document.write'))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","44.00107","pickUpedName","/*<NoDocumentWriteWalker>*/ this","createFailure","","(this.createFailure(((/*Args:*/<any>node).expression).expression.getStart(), ((/*Args:*/<any>node).expression).expression.getWidth(), 'Forbidden call to document.write'))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","44.00107","pickUpedName","Rule","WRITE_FAILURE","","(this.createFailure(((/*Args:*/<any>node).expression).expression.getStart(), ((/*Args:*/<any>node).expression).expression.getWidth(), 'Forbidden call to document.write'))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","46.00069","calls","((/*Args:*/<any>node).expression).expression","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","46.00090","calls","((/*Args:*/<any>node).expression).expression","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","46.00107","call.arguments[0]","/*<NoDocumentWriteWalker>*/ this","createFailure","any","((/*Args:*/<any>node).expression).expression.getStart()"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","46.00107","call.arguments[1]","/*<NoDocumentWriteWalker>*/ this","createFailure","any","((/*Args:*/<any>node).expression).expression.getWidth()"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","46.00107","call.arguments[2]","/*<NoDocumentWriteWalker>*/ this","createFailure","string","'Forbidden call to document.writeln'"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","46.00107","calls","/*<NoDocumentWriteWalker>*/ this","createFailure","any","(((/*Args:*/<any>node).expression).expression.getStart(), ((/*Args:*/<any>node).expression).expression.getWidth(), 'Forbidden call to document.writeln')"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","46.00107","pickUpedName","/*<NoDocumentWriteWalker>*/ this","createFailure","","(((/*Args:*/<any>node).expression).expression.getStart(), ((/*Args:*/<any>node).expression).expression.getWidth(), 'Forbidden call to document.writeln')"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","46.00107","pickUpedName","Rule","WRITELN_FAILURE","","(((/*Args:*/<any>node).expression).expression.getStart(), ((/*Args:*/<any>node).expression).expression.getWidth(), 'Forbidden call to document.writeln')"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","46.00107","call.arguments[0]","/*<NoDocumentWriteWalker>*/ this","addFailure","any","this.createFailure(((/*Args:*/<any>node).expression).expression.getStart(), ((/*Args:*/<any>node).expression).expression.getWidth(), 'Forbidden call to document.writeln')"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","46.00107","calls","/*<NoDocumentWriteWalker>*/ this","addFailure","any","(this.createFailure(((/*Args:*/<any>node).expression).expression.getStart(), ((/*Args:*/<any>node).expression).expression.getWidth(), 'Forbidden call to document.writeln'))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","46.00107","pickUpedName","/*<NoDocumentWriteWalker>*/ this","addFailure","","(this.createFailure(((/*Args:*/<any>node).expression).expression.getStart(), ((/*Args:*/<any>node).expression).expression.getWidth(), 'Forbidden call to document.writeln'))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","46.00107","pickUpedName","/*<NoDocumentWriteWalker>*/ this","createFailure","","(this.createFailure(((/*Args:*/<any>node).expression).expression.getStart(), ((/*Args:*/<any>node).expression).expression.getWidth(), 'Forbidden call to document.writeln'))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","46.00107","pickUpedName","Rule","WRITELN_FAILURE","","(this.createFailure(((/*Args:*/<any>node).expression).expression.getStart(), ((/*Args:*/<any>node).expression).expression.getWidth(), 'Forbidden call to document.writeln'))"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","51.00035","call.arguments[0]","super","visitCallExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noDocumentWriteRule.ts","NoDocumentWriteWalker",".visitCallExpression","51.00035","calls","super","visitCallExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","Rule","","11.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","Rule","","11.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","Rule","","11.00035","Assign","Rule","FAILURE_STRING","string","'Duplicate case found in switch statement: '"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","Rule",".","13.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","Rule",".apply","13.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","Rule",".apply","14.00084","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","Rule",".apply","14.00084","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","Rule",".apply","14.00084","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoDuplicateCaseRuleWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","Rule",".apply","14.00084","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoDuplicateCaseRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","Rule",".apply","14.00084","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoDuplicateCaseRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","Rule",".apply","14.00084","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoDuplicateCaseRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","Rule",".apply","14.00084","return","","","any","this.applyWithWalker((new NoDuplicateCaseRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","Rule","","19.00006","defined","NoDuplicateCaseRuleWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker","","19.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".","22.00014","TS.MethodDefined","NoDuplicateCaseRuleWalker","visitSwitchStatement","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement","22.00045","define.Parameter","visitSwitchStatement","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement","23.00012","TS.VariableDeclaration","","seenLabels","string[]",""
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement","23.00035","Assign","seenLabels","","undefined[]","[]"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","24.00040","call.func","(/*Args:*/<any>node).caseBlock.clauses","forEach","(clauseOrDefault: any) => void",""
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","24.00040","pickUpedName","node.caseBlock.clauses","forEach","","(/*Args:*/<any>node).caseBlock.clauses.forEach"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","24.00061","define.Parameter","clauseOrDefault","","any","/*Args:*/<any>clauseOrDefault"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","24.00092","Conditional","clauseOrDefault.kind === SyntaxKind.current().CaseClause","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>clauseOrDefault).kind === SyntaxKind.current().CaseClause"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","25.00053","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","25.00063","ref.varName","SyntaxKind.current()","CaseClause","number",""
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","25.00063","Compare","clauseOrDefault","kind","=== /*number*/","SyntaxKind.current().CaseClause"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","25.00063","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>clauseOrDefault).kind"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","26.00020","TS.VariableDeclaration","","clause","any",""
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","26.00060","Assign","clause","","any","(/*Args:*/<any>clauseOrDefault)"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","26.00076","Conditional","clause.expression != null","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>clauseOrDefault).expression != null"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","27.00041","Compare","clause","expression","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","27.00041","CompareR","null","","/*Reverse*/!= /*any*/","(/*Args:*/<any>clauseOrDefault).expression"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","28.00024","TS.VariableDeclaration","","caseText","any",""
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","28.00054","calls","(/*Args:*/<any>clauseOrDefault).expression","getText","any","()"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","28.00054","Assign","caseText","","any","(/*Args:*/<any>clauseOrDefault).expression.getText()"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","28.00064","Conditional","seenLabels.indexOf(caseText) > - 1","","/*IfStatement*/ boolean","seenLabels.indexOf((/*Args:*/<any>clauseOrDefault).expression.getText()) > - 1"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","29.00044","call.arguments[0]","seenLabels","indexOf","any","(/*Args:*/<any>clauseOrDefault).expression.getText()"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","29.00044","calls","seenLabels","indexOf","number","((/*Args:*/<any>clauseOrDefault).expression.getText())"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","29.00044","pickUpedName","seenLabels","indexOf","","((/*Args:*/<any>clauseOrDefault).expression.getText())"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","29.00057","Compare","seenLabels.indexOf(caseText)","","> /*number*/","- 1"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","29.00057","CompareR","- 1","","/*Reverse*/> /*number*/","seenLabels.indexOf((/*Args:*/<any>clauseOrDefault).expression.getText())"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","29.00057","pickUpedName","seenLabels","indexOf","","seenLabels.indexOf((/*Args:*/<any>clauseOrDefault).expression.getText())"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","30.00067","calls","(/*Args:*/<any>clauseOrDefault)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","30.00086","calls","(/*Args:*/<any>clauseOrDefault)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","30.00119","BinaryExpression","Rule","FAILURE_STRING","+ /*any*/","(/*Args:*/<any>clauseOrDefault).expression.getText()"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","30.00119","call.arguments[0]","/*<NoDuplicateCaseRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>clauseOrDefault).getStart()"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","30.00119","call.arguments[1]","/*<NoDuplicateCaseRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>clauseOrDefault).getWidth()"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","30.00119","call.arguments[2]","/*<NoDuplicateCaseRuleWalker>*/ this","createFailure","string","'Duplicate case found in switch statement: ' + (/*Args:*/<any>clauseOrDefault).expression.getText()"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","30.00119","calls","/*<NoDuplicateCaseRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>clauseOrDefault).getStart(), (/*Args:*/<any>clauseOrDefault).getWidth(), 'Duplicate case found in switch statement: ' + (/*Args:*/<any>clauseOrDefault).expression.getText())"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","30.00119","pickUpedName","/*<NoDuplicateCaseRuleWalker>*/ this","createFailure","","((/*Args:*/<any>clauseOrDefault).getStart(), (/*Args:*/<any>clauseOrDefault).getWidth(), 'Duplicate case found in switch statement: ' + (/*Args:*/<any>clauseOrDefault).expression.getText())"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","30.00119","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>clauseOrDefault).getStart(), (/*Args:*/<any>clauseOrDefault).getWidth(), 'Duplicate case found in switch statement: ' + (/*Args:*/<any>clauseOrDefault).expression.getText())"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","30.00119","call.arguments[0]","/*<NoDuplicateCaseRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>clauseOrDefault).getStart(), (/*Args:*/<any>clauseOrDefault).getWidth(), 'Duplicate case found in switch statement: ' + (/*Args:*/<any>clauseOrDefault).expression.getText())"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","30.00119","calls","/*<NoDuplicateCaseRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>clauseOrDefault).getStart(), (/*Args:*/<any>clauseOrDefault).getWidth(), 'Duplicate case found in switch statement: ' + (/*Args:*/<any>clauseOrDefault).expression.getText()))"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","30.00119","pickUpedName","/*<NoDuplicateCaseRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>clauseOrDefault).getStart(), (/*Args:*/<any>clauseOrDefault).getWidth(), 'Duplicate case found in switch statement: ' + (/*Args:*/<any>clauseOrDefault).expression.getText()))"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","30.00119","pickUpedName","/*<NoDuplicateCaseRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>clauseOrDefault).getStart(), (/*Args:*/<any>clauseOrDefault).getWidth(), 'Duplicate case found in switch statement: ' + (/*Args:*/<any>clauseOrDefault).expression.getText()))"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","30.00119","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>clauseOrDefault).getStart(), (/*Args:*/<any>clauseOrDefault).getWidth(), 'Duplicate case found in switch statement: ' + (/*Args:*/<any>clauseOrDefault).expression.getText()))"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","32.00041","call.arguments[0]","seenLabels","push","any","(/*Args:*/<any>clauseOrDefault).expression.getText()"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","32.00041","calls","seenLabels","push","number","((/*Args:*/<any>clauseOrDefault).expression.getText())"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement;(/*Args:*/<any>node).caseBlock.clauses.forEach(Arguments[0])","32.00041","pickUpedName","seenLabels","push","","((/*Args:*/<any>clauseOrDefault).expression.getText())"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement","32.00041","call.arguments[0]","(/*Args:*/<any>node).caseBlock.clauses","forEach","(clauseOrDefault: any) => void","/**(clauseOrDefault: any) => void**/"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement","32.00041","calls","(/*Args:*/<any>node).caseBlock.clauses","forEach","any","(/**(clauseOrDefault: any) => void**/)"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement","37.00036","call.arguments[0]","super","visitSwitchStatement","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noDuplicateCaseRule.ts","NoDuplicateCaseRuleWalker",".visitSwitchStatement","37.00036","calls","super","visitSwitchStatement","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","Rule","","9.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","Rule","","10.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","Rule","","10.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","Rule","","10.00035","Assign","Rule","FAILURE_STRING","string","'Duplicate parameter name: '"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","Rule",".","12.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","Rule",".apply","12.00034","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","Rule",".apply","13.00090","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","Rule",".apply","13.00090","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","Rule",".apply","13.00090","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoDuplicateParameterNamesWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","Rule",".apply","13.00090","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoDuplicateParameterNamesWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","Rule",".apply","13.00090","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoDuplicateParameterNamesWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","Rule",".apply","13.00090","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoDuplicateParameterNamesWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","Rule",".apply","13.00090","return","","","any","this.applyWithWalker((new NoDuplicateParameterNamesWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","Rule","","17.00006","defined","NoDuplicateParameterNamesWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker","","17.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".","19.00014","TS.MethodDefined","NoDuplicateParameterNamesWalker","visitMethodDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitMethodDeclaration","19.00047","define.Parameter","visitMethodDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitMethodDeclaration","20.00037","call.arguments[0]","/*<NoDuplicateParameterNamesWalker>*/ this","validateParameterNames","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitMethodDeclaration","20.00037","calls","/*<NoDuplicateParameterNamesWalker>*/ this","validateParameterNames","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitMethodDeclaration","20.00037","pickUpedName","/*<NoDuplicateParameterNamesWalker>*/ this","validateParameterNames","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitMethodDeclaration","21.00038","call.arguments[0]","super","visitMethodDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitMethodDeclaration","21.00038","calls","super","visitMethodDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".","24.00014","TS.MethodDefined","NoDuplicateParameterNamesWalker","visitConstructorDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitConstructorDeclaration","24.00052","define.Parameter","visitConstructorDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitConstructorDeclaration","25.00037","call.arguments[0]","/*<NoDuplicateParameterNamesWalker>*/ this","validateParameterNames","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitConstructorDeclaration","25.00037","calls","/*<NoDuplicateParameterNamesWalker>*/ this","validateParameterNames","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitConstructorDeclaration","25.00037","pickUpedName","/*<NoDuplicateParameterNamesWalker>*/ this","validateParameterNames","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitConstructorDeclaration","26.00043","call.arguments[0]","super","visitConstructorDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitConstructorDeclaration","26.00043","calls","super","visitConstructorDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".","29.00014","TS.MethodDefined","NoDuplicateParameterNamesWalker","visitArrowFunction","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitArrowFunction","29.00043","define.Parameter","visitArrowFunction","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitArrowFunction","30.00037","call.arguments[0]","/*<NoDuplicateParameterNamesWalker>*/ this","validateParameterNames","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitArrowFunction","30.00037","calls","/*<NoDuplicateParameterNamesWalker>*/ this","validateParameterNames","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitArrowFunction","30.00037","pickUpedName","/*<NoDuplicateParameterNamesWalker>*/ this","validateParameterNames","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitArrowFunction","31.00034","call.arguments[0]","super","visitArrowFunction","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitArrowFunction","31.00034","calls","super","visitArrowFunction","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".","34.00014","TS.MethodDefined","NoDuplicateParameterNamesWalker","visitFunctionDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitFunctionDeclaration","34.00049","define.Parameter","visitFunctionDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitFunctionDeclaration","35.00037","call.arguments[0]","/*<NoDuplicateParameterNamesWalker>*/ this","validateParameterNames","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitFunctionDeclaration","35.00037","calls","/*<NoDuplicateParameterNamesWalker>*/ this","validateParameterNames","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitFunctionDeclaration","35.00037","pickUpedName","/*<NoDuplicateParameterNamesWalker>*/ this","validateParameterNames","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitFunctionDeclaration","36.00040","call.arguments[0]","super","visitFunctionDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitFunctionDeclaration","36.00040","calls","super","visitFunctionDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".","39.00014","TS.MethodDefined","NoDuplicateParameterNamesWalker","visitFunctionExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitFunctionExpression","39.00048","define.Parameter","visitFunctionExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitFunctionExpression","40.00037","call.arguments[0]","/*<NoDuplicateParameterNamesWalker>*/ this","validateParameterNames","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitFunctionExpression","40.00037","calls","/*<NoDuplicateParameterNamesWalker>*/ this","validateParameterNames","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitFunctionExpression","40.00037","pickUpedName","/*<NoDuplicateParameterNamesWalker>*/ this","validateParameterNames","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitFunctionExpression","41.00039","call.arguments[0]","super","visitFunctionExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".visitFunctionExpression","41.00039","calls","super","visitFunctionExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".","44.00012","TS.MethodDefined","NoDuplicateParameterNamesWalker","validateParameterNames","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames","44.00046","define.Parameter","validateParameterNames","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames","45.00012","TS.VariableDeclaration","","seenNames","{ [index: string]: boolean; }",""
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames","45.00033","define.Parameter","index","","string","/*Args:*/<string>index"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames","45.00053","Assign","seenNames","","{ [x: string]: undefined; }","{}"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames","45.00053","ref.type","{ [x: string]: undefined; }","","",""
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","46.00033","call.func","(/*Args:*/<any>node).parameters","forEach","(parameter: any) => void",""
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","46.00033","pickUpedName","node.parameters","forEach","","(/*Args:*/<any>node).parameters.forEach"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","46.00049","define.Parameter","parameter","","any","/*Args:*/<any>parameter"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","47.00016","TS.VariableDeclaration","","parameterName","string",""
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","47.00064","Assign","parameterName","","any","((/*Args:*/<any>parameter).name).text"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","47.00069","Conditional","parameterName != null","","/*IfStatement*/ boolean/* no Else Clause*/","((/*Args:*/<any>parameter).name).text != null"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","48.00033","Compare","parameterName","","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","48.00033","CompareR","null","","/*Reverse*/!= /*string*/","((/*Args:*/<any>parameter).name).text"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","48.00041","Conditional","seenNames[((/*Args:*/<any>parameter).name).text]","","/*IfStatement*/ boolean","{}"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00040","calls","(/*Args:*/<any>parameter).name","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00095","BinaryExpression","Rule","FAILURE_STRING","+ /*string*/","'''"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00102","BinaryExpression","Rule.FAILURE_STRING + '''","","+ /*string*/","((/*Args:*/<any>parameter).name).text"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00118","BinaryExpression","Rule.FAILURE_STRING + ''' + parameterName","","+ /*string*/","'''"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00118","call.arguments[0]","/*<NoDuplicateParameterNamesWalker>*/ this","createFailure","any","(/*Args:*/<any>parameter).name.getStart()"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00118","call.arguments[1]","/*<NoDuplicateParameterNamesWalker>*/ this","createFailure","number","((/*Args:*/<any>parameter).name).text.length"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00118","call.arguments[2]","/*<NoDuplicateParameterNamesWalker>*/ this","createFailure","string","'Duplicate parameter name: '' + ((/*Args:*/<any>parameter).name).text + '''"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00118","calls","/*<NoDuplicateParameterNamesWalker>*/ this","createFailure","any","((/*Args:*/<any>parameter).name.getStart(), ((/*Args:*/<any>parameter).name).text.length, 'Duplicate parameter name: '' + ((/*Args:*/<any>parameter).name).text + ''')"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00118","pickUpedName","/*<NoDuplicateParameterNamesWalker>*/ this","createFailure","","((/*Args:*/<any>parameter).name.getStart(), ((/*Args:*/<any>parameter).name).text.length, 'Duplicate parameter name: '' + ((/*Args:*/<any>parameter).name).text + ''')"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00118","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>parameter).name.getStart(), ((/*Args:*/<any>parameter).name).text.length, 'Duplicate parameter name: '' + ((/*Args:*/<any>parameter).name).text + ''')"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00118","call.arguments[0]","/*<NoDuplicateParameterNamesWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>parameter).name.getStart(), ((/*Args:*/<any>parameter).name).text.length, 'Duplicate parameter name: '' + ((/*Args:*/<any>parameter).name).text + ''')"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00118","calls","/*<NoDuplicateParameterNamesWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>parameter).name.getStart(), ((/*Args:*/<any>parameter).name).text.length, 'Duplicate parameter name: '' + ((/*Args:*/<any>parameter).name).text + '''))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00118","pickUpedName","/*<NoDuplicateParameterNamesWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>parameter).name.getStart(), ((/*Args:*/<any>parameter).name).text.length, 'Duplicate parameter name: '' + ((/*Args:*/<any>parameter).name).text + '''))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00118","pickUpedName","/*<NoDuplicateParameterNamesWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>parameter).name.getStart(), ((/*Args:*/<any>parameter).name).text.length, 'Duplicate parameter name: '' + ((/*Args:*/<any>parameter).name).text + '''))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","51.00118","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>parameter).name.getStart(), ((/*Args:*/<any>parameter).name).text.length, 'Duplicate parameter name: '' + ((/*Args:*/<any>parameter).name).text + '''))"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","53.00047","Assign","seenNames[((/*Args:*/<any>parameter).name).text]","","= /*boolean*/","true"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames;(/*Args:*/<any>node).parameters.forEach(Arguments[0])","53.00047","pickUpedName","seenNames","","","true"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames","53.00047","call.arguments[0]","(/*Args:*/<any>node).parameters","forEach","(parameter: any) => void","/**(parameter: any) => void**/"
"../tslint-microsoft-contrib-master/src/noDuplicateParameterNamesRule.ts","NoDuplicateParameterNamesWalker",".validateParameterNames","53.00047","calls","(/*Args:*/<any>node).parameters","forEach","any","(/**(parameter: any) => void**/)"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","Rule","","9.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","Rule","","10.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","Rule","","10.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","Rule","","10.00035","Assign","Rule","FAILURE_STRING","string","'Do not declare empty interfaces: '"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","Rule",".","12.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","Rule",".apply","12.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","Rule",".apply","13.00086","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","Rule",".apply","13.00086","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","Rule",".apply","13.00086","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoEmptyInterfacesRuleWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","Rule",".apply","13.00086","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoEmptyInterfacesRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","Rule",".apply","13.00086","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoEmptyInterfacesRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","Rule",".apply","13.00086","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoEmptyInterfacesRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","Rule",".apply","13.00086","return","","","any","this.applyWithWalker((new NoEmptyInterfacesRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","Rule","","18.00006","defined","NoEmptyInterfacesRuleWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker","","18.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".","20.00014","TS.MethodDefined","NoEmptyInterfacesRuleWalker","visitInterfaceDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","20.00050","define.Parameter","visitInterfaceDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","20.00079","Conditional","node.members == null || node.members.length === 0","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).members == null || (/*Args:*/<any>node).members.length === 0"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","22.00028","Compare","node","members","== /*null*/","null"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","22.00028","CompareR","null","","/*Reverse*/== /*any*/","(/*Args:*/<any>node).members"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","22.00060","Compare","node.members","length","=== /*number*/","0"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","22.00060","CompareR","0","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).members.length"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","22.00060","BinaryExpression","node.members == null","","|| /*boolean*/","(/*Args:*/<any>node).members.length === 0"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","25.00026","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","25.00043","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","25.00076","BinaryExpression","Rule","FAILURE_STRING","+ /*string*/","'''"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","25.00094","calls","(/*Args:*/<any>node).name","getText","any","()"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","25.00094","BinaryExpression","Rule.FAILURE_STRING + '''","","+ /*any*/","(/*Args:*/<any>node).name.getText()"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","25.00105","BinaryExpression","Rule.FAILURE_STRING + ''' + node.name.getText()","","+ /*string*/","'''"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","25.00105","call.arguments[0]","/*<NoEmptyInterfacesRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","25.00105","call.arguments[1]","/*<NoEmptyInterfacesRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","25.00105","call.arguments[2]","/*<NoEmptyInterfacesRuleWalker>*/ this","createFailure","string","'Do not declare empty interfaces: '' + (/*Args:*/<any>node).name.getText() + '''"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","25.00105","calls","/*<NoEmptyInterfacesRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not declare empty interfaces: '' + (/*Args:*/<any>node).name.getText() + ''')"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","25.00105","pickUpedName","/*<NoEmptyInterfacesRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not declare empty interfaces: '' + (/*Args:*/<any>node).name.getText() + ''')"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","25.00105","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not declare empty interfaces: '' + (/*Args:*/<any>node).name.getText() + ''')"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","25.00105","call.arguments[0]","/*<NoEmptyInterfacesRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not declare empty interfaces: '' + (/*Args:*/<any>node).name.getText() + ''')"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","25.00105","calls","/*<NoEmptyInterfacesRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not declare empty interfaces: '' + (/*Args:*/<any>node).name.getText() + '''))"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","25.00105","pickUpedName","/*<NoEmptyInterfacesRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not declare empty interfaces: '' + (/*Args:*/<any>node).name.getText() + '''))"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","25.00105","pickUpedName","/*<NoEmptyInterfacesRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not declare empty interfaces: '' + (/*Args:*/<any>node).name.getText() + '''))"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","25.00105","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not declare empty interfaces: '' + (/*Args:*/<any>node).name.getText() + '''))"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","29.00041","call.arguments[0]","super","visitInterfaceDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noEmptyInterfacesRule.ts","NoEmptyInterfacesRuleWalker",".visitInterfaceDeclaration","29.00041","calls","super","visitInterfaceDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","Rule","","11.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","Rule","","12.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","Rule","","12.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","Rule","","12.00035","Assign","Rule","FAILURE_STRING","string","'forbidden execScript: '"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","Rule",".","14.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","Rule",".apply","14.00034","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","Rule",".apply","15.00077","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","Rule",".apply","15.00077","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","Rule",".apply","15.00077","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoEvalScriptWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","Rule",".apply","15.00077","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoEvalScriptWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","Rule",".apply","15.00077","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoEvalScriptWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","Rule",".apply","15.00077","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoEvalScriptWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","Rule",".apply","15.00077","return","","","any","this.applyWithWalker((new NoEvalScriptWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","Rule","","19.00006","defined","NoEvalScriptWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker","","19.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".","21.00014","TS.MethodDefined","NoEvalScriptWalker","visitCallExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".visitCallExpression","21.00044","define.Parameter","visitCallExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".visitCallExpression","22.00033","call.arguments[0]","/*<NoEvalScriptWalker>*/ this","validateExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".visitCallExpression","22.00033","calls","/*<NoEvalScriptWalker>*/ this","validateExpression","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".visitCallExpression","22.00033","pickUpedName","/*<NoEvalScriptWalker>*/ this","validateExpression","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".visitCallExpression","23.00035","call.arguments[0]","super","visitCallExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".visitCallExpression","23.00035","calls","super","visitCallExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".","26.00012","TS.MethodDefined","NoEvalScriptWalker","validateExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","26.00042","define.Parameter","validateExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","27.00012","TS.VariableDeclaration","","expression","any",""
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","27.00046","Assign","expression","","any","(/*Args:*/<any>node).expression"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","28.00012","TS.VariableDeclaration","","functionName","string",""
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","28.00062","call.arguments[0]","AstUtils","getFunctionName","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","28.00062","calls","AstUtils","getFunctionName","string","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","28.00062","Assign","functionName","","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","28.00068","Conditional","functionName === 'execScript'","","/*IfStatement*/ boolean/* no Else Clause*/","AstUtils.getFunctionName((/*Args:*/<any>node)) === 'execScript'"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","29.00029","Compare","functionName","","=== /*string*/","'execScript'"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","29.00029","CompareR","'execScript'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","30.00016","TS.VariableDeclaration","","msg","string",""
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","30.00065","calls","(/*Args:*/<any>node).expression","getFullText","any","()"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","30.00079","calls","(/*Args:*/<any>node).expression.getFullText()","trim","any","()"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","30.00079","BinaryExpression","Rule","FAILURE_STRING","+ /*any*/","(/*Args:*/<any>node).expression.getFullText().trim()"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","30.00079","Assign","msg","","string","'forbidden execScript: ' + (/*Args:*/<any>node).expression.getFullText().trim()"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","30.00079","pickUpedName","Rule","FAILURE_STRING","","'forbidden execScript: ' + (/*Args:*/<any>node).expression.getFullText().trim()"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","31.00059","calls","(/*Args:*/<any>node).expression","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","31.00082","calls","(/*Args:*/<any>node).expression","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","31.00093","call.arguments[0]","/*<NoEvalScriptWalker>*/ this","createFailure","any","(/*Args:*/<any>node).expression.getStart()"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","31.00093","call.arguments[1]","/*<NoEvalScriptWalker>*/ this","createFailure","any","(/*Args:*/<any>node).expression.getWidth()"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","31.00093","call.arguments[2]","/*<NoEvalScriptWalker>*/ this","createFailure","string","'forbidden execScript: ' + (/*Args:*/<any>node).expression.getFullText().trim()"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","31.00093","calls","/*<NoEvalScriptWalker>*/ this","createFailure","any","((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'forbidden execScript: ' + (/*Args:*/<any>node).expression.getFullText().trim())"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","31.00093","pickUpedName","/*<NoEvalScriptWalker>*/ this","createFailure","","((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'forbidden execScript: ' + (/*Args:*/<any>node).expression.getFullText().trim())"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","31.00093","call.arguments[0]","/*<NoEvalScriptWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'forbidden execScript: ' + (/*Args:*/<any>node).expression.getFullText().trim())"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","31.00093","calls","/*<NoEvalScriptWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'forbidden execScript: ' + (/*Args:*/<any>node).expression.getFullText().trim()))"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","31.00093","pickUpedName","/*<NoEvalScriptWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'forbidden execScript: ' + (/*Args:*/<any>node).expression.getFullText().trim()))"
"../tslint-microsoft-contrib-master/src/noExecScriptRule.ts","NoEvalScriptWalker",".validateExpression","31.00093","pickUpedName","/*<NoEvalScriptWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).expression.getStart(), (/*Args:*/<any>node).expression.getWidth(), 'forbidden execScript: ' + (/*Args:*/<any>node).expression.getFullText().trim()))"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","Rule","","9.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noForInRule.ts","Rule","","10.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noForInRule.ts","Rule","","10.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noForInRule.ts","Rule","","10.00035","Assign","Rule","FAILURE_STRING","string","'Do not use for in statements, use Object.keys instead: '"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","Rule",".","12.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","Rule",".apply","12.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","Rule",".apply","13.00076","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","Rule",".apply","13.00076","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","Rule",".apply","13.00076","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoForInRuleWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","Rule",".apply","13.00076","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoForInRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","Rule",".apply","13.00076","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoForInRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","Rule",".apply","13.00076","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoForInRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","Rule",".apply","13.00076","return","","","any","this.applyWithWalker((new NoForInRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","Rule","","17.00006","defined","NoForInRuleWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker","","17.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".","19.00014","TS.MethodDefined","NoForInRuleWalker","visitForInStatement","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","19.00044","define.Parameter","visitForInStatement","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","20.00012","TS.VariableDeclaration","","initializer","string",""
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","20.00052","calls","(/*Args:*/<any>node).initializer","getText","any","()"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","20.00052","Assign","initializer","","any","(/*Args:*/<any>node).initializer.getText()"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","21.00012","TS.VariableDeclaration","","expression","string",""
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","21.00050","calls","(/*Args:*/<any>node).expression","getText","any","()"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","21.00050","Assign","expression","","any","(/*Args:*/<any>node).expression.getText()"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","23.00012","TS.VariableDeclaration","","msg","string",""
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","23.00048","BinaryExpression","Rule","FAILURE_STRING","+ /*string*/","'for ('"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","23.00058","BinaryExpression","Rule.FAILURE_STRING + 'for ('","","+ /*string*/","(/*Args:*/<any>node).initializer.getText()"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","23.00072","BinaryExpression","Rule.FAILURE_STRING + 'for (' + initializer","","+ /*string*/","' in '"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","23.00081","BinaryExpression","Rule.FAILURE_STRING + 'for (' + initializer + ' in '","","+ /*string*/","(/*Args:*/<any>node).expression.getText()"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","23.00094","BinaryExpression","Rule.FAILURE_STRING + 'for (' + initializer + ' in ' + expression","","+ /*string*/","')'"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","23.00094","Assign","msg","","string","'Do not use for in statements, use Object.keys instead: for (' + (/*Args:*/<any>node).initializer.getText() + ' in ' + (/*Args:*/<any>node).expression.getText() + ')'"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","23.00094","pickUpedName","Rule","FAILURE_STRING","","'Do not use for in statements, use Object.keys instead: for (' + (/*Args:*/<any>node).initializer.getText() + ' in ' + (/*Args:*/<any>node).expression.getText() + ')'"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","24.00049","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","24.00066","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","24.00077","call.arguments[0]","/*<NoForInRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","24.00077","call.arguments[1]","/*<NoForInRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","24.00077","call.arguments[2]","/*<NoForInRuleWalker>*/ this","createFailure","string","'Do not use for in statements, use Object.keys instead: for (' + (/*Args:*/<any>node).initializer.getText() + ' in ' + (/*Args:*/<any>node).expression.getText() + ')'"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","24.00077","calls","/*<NoForInRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not use for in statements, use Object.keys instead: for (' + (/*Args:*/<any>node).initializer.getText() + ' in ' + (/*Args:*/<any>node).expression.getText() + ')')"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","24.00077","pickUpedName","/*<NoForInRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not use for in statements, use Object.keys instead: for (' + (/*Args:*/<any>node).initializer.getText() + ' in ' + (/*Args:*/<any>node).expression.getText() + ')')"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","24.00077","call.arguments[0]","/*<NoForInRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not use for in statements, use Object.keys instead: for (' + (/*Args:*/<any>node).initializer.getText() + ' in ' + (/*Args:*/<any>node).expression.getText() + ')')"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","24.00077","calls","/*<NoForInRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not use for in statements, use Object.keys instead: for (' + (/*Args:*/<any>node).initializer.getText() + ' in ' + (/*Args:*/<any>node).expression.getText() + ')'))"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","24.00077","pickUpedName","/*<NoForInRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not use for in statements, use Object.keys instead: for (' + (/*Args:*/<any>node).initializer.getText() + ' in ' + (/*Args:*/<any>node).expression.getText() + ')'))"
"../tslint-microsoft-contrib-master/src/noForInRule.ts","NoForInRuleWalker",".visitForInStatement","24.00077","pickUpedName","/*<NoForInRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not use for in statements, use Object.keys instead: for (' + (/*Args:*/<any>node).initializer.getText() + ' in ' + (/*Args:*/<any>node).expression.getText() + ')'))"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule","","11.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule","","11.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule","","11.00035","Assign","Rule","FAILURE_STRING","string","'forbidden: Function constructor with string arguments '"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".","13.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","13.00034","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","14.00012","TS.VariableDeclaration","","documentRegistry","any",""
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","14.00035","calls","ts","createDocumentRegistry","any","()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","14.00035","Assign","documentRegistry","","any","ts.createDocumentRegistry()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","15.00012","TS.VariableDeclaration","","languageServiceHost","any",""
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","15.00088","calls","(/*Args:*/<any>sourceFile)","getFullText","any","()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","15.00088","call.arguments[0]","Lint","createLanguageServiceHost","string","'file.ts'"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","15.00088","call.arguments[1]","Lint","createLanguageServiceHost","any","(/*Args:*/<any>sourceFile).getFullText()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","15.00088","calls","Lint","createLanguageServiceHost","any","('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","15.00088","Assign","languageServiceHost","","any","Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","16.00012","TS.VariableDeclaration","","languageService","any",""
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","16.00076","call.arguments[0]","ts","createLanguageService","any","Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","16.00076","call.arguments[1]","ts","createLanguageService","any","ts.createDocumentRegistry()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","16.00076","calls","ts","createLanguageService","any","(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","16.00076","Assign","languageService","","any","ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","17.00100","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","17.00100","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","17.00113","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","NoFunctionConstructorWithStringArgsWalker","(new NoFunctionConstructorWithStringArgsWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())))"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","17.00113","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoFunctionConstructorWithStringArgsWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","17.00113","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoFunctionConstructorWithStringArgsWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","17.00113","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoFunctionConstructorWithStringArgsWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule",".apply","17.00113","return","","","any","this.applyWithWalker((new NoFunctionConstructorWithStringArgsWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","Rule","","21.00006","defined","NoFunctionConstructorWithStringArgsWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker","","21.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker","","23.00012","TS.PropertyDefined","NoFunctionConstructorWithStringArgsWalker","languageService","any",""
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker","","23.00033","TS.PropertyDefined","NoFunctionConstructorWithStringArgsWalker","languageService","any",""
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker","","24.00012","TS.PropertyDefined","NoFunctionConstructorWithStringArgsWalker","typeChecker","any",""
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker","","24.00030","TS.PropertyDefined","NoFunctionConstructorWithStringArgsWalker","typeChecker","any",""
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","24.00042","TS.MethodDefined","NoFunctionConstructorWithStringArgsWalker","Constructor","any",""
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","26.00040","define.Parameter","/*<NoFunctionConstructorWithStringArgsWalker>*/ this.","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","26.00067","define.Parameter","/*<NoFunctionConstructorWithStringArgsWalker>*/ this.","options","any","/*Args:*/<any>options"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","26.00099","define.Parameter","/*<NoFunctionConstructorWithStringArgsWalker>*/ this.","languageServices","any","/*Args:*/<any>languageServices"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","27.00026","call.arguments[0]","super","","any","NoFunctionConstructorWithStringArgsWalker.sourceFile"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","27.00026","call.arguments[1]","super","","any","NoFunctionConstructorWithStringArgsWalker.options"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","27.00026","calls","super","","void","(NoFunctionConstructorWithStringArgsWalker.sourceFile, NoFunctionConstructorWithStringArgsWalker.options)"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","27.00026","pickUpedName","sourceFile","","","(NoFunctionConstructorWithStringArgsWalker.sourceFile, NoFunctionConstructorWithStringArgsWalker.options)"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","27.00026","pickUpedName","options","","","(NoFunctionConstructorWithStringArgsWalker.sourceFile, NoFunctionConstructorWithStringArgsWalker.options)"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","28.00031","Assign","/*<NoFunctionConstructorWithStringArgsWalker>*/ this","languageService","= /*any*/","NoFunctionConstructorWithStringArgsWalker.languageServices"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","28.00031","pickUpedName","/*<NoFunctionConstructorWithStringArgsWalker>*/ this","languageService","","NoFunctionConstructorWithStringArgsWalker.languageServices"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","28.00031","pickUpedName","languageServices","","","NoFunctionConstructorWithStringArgsWalker.languageServices"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","29.00049","calls","NoFunctionConstructorWithStringArgsWalker.languageServices","getProgram","any","()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","29.00049","pickUpedName","/*<NoFunctionConstructorWithStringArgsWalker>*/ this.languageService","getProgram","","()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","29.00062","calls","NoFunctionConstructorWithStringArgsWalker.languageServices.getProgram()","getTypeChecker","any","()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","29.00062","pickUpedName","/*<NoFunctionConstructorWithStringArgsWalker>*/ this.languageService","getProgram","","()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","29.00062","Assign","/*<NoFunctionConstructorWithStringArgsWalker>*/ this","typeChecker","= /*any*/","NoFunctionConstructorWithStringArgsWalker.languageServices.getProgram().getTypeChecker()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","29.00062","pickUpedName","/*<NoFunctionConstructorWithStringArgsWalker>*/ this","typeChecker","","NoFunctionConstructorWithStringArgsWalker.languageServices.getProgram().getTypeChecker()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".constructor","29.00062","pickUpedName","/*<NoFunctionConstructorWithStringArgsWalker>*/ this.languageService","getProgram","","NoFunctionConstructorWithStringArgsWalker.languageServices.getProgram().getTypeChecker()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".","33.00014","TS.MethodDefined","NoFunctionConstructorWithStringArgsWalker","visitNewExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","33.00043","define.Parameter","visitNewExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","34.00012","TS.VariableDeclaration","","functionName","string",""
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","34.00054","call.arguments[0]","AstUtils","getFunctionName","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","34.00054","calls","AstUtils","getFunctionName","string","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","34.00054","Assign","functionName","","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","34.00060","Conditional","functionName === 'Function'","","/*IfStatement*/ boolean/* no Else Clause*/","AstUtils.getFunctionName((/*Args:*/<any>node)) === 'Function'"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","35.00029","Compare","functionName","","=== /*string*/","'Function'"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","35.00029","CompareR","'Function'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","35.00043","Conditional","node.arguments.length > 0","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).arguments.length > 0"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","36.00040","Compare","node.arguments","length","> /*number*/","0"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","36.00040","CompareR","0","","/*Reverse*/> /*any*/","(/*Args:*/<any>node).arguments.length"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","37.00055","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","37.00072","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","37.00089","call.arguments[0]","/*<NoFunctionConstructorWithStringArgsWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","37.00089","call.arguments[1]","/*<NoFunctionConstructorWithStringArgsWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","37.00089","call.arguments[2]","/*<NoFunctionConstructorWithStringArgsWalker>*/ this","createFailure","string","'forbidden: Function constructor with string arguments '"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","37.00089","calls","/*<NoFunctionConstructorWithStringArgsWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'forbidden: Function constructor with string arguments ')"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","37.00089","pickUpedName","/*<NoFunctionConstructorWithStringArgsWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'forbidden: Function constructor with string arguments ')"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","37.00089","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'forbidden: Function constructor with string arguments ')"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","37.00089","call.arguments[0]","/*<NoFunctionConstructorWithStringArgsWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'forbidden: Function constructor with string arguments ')"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","37.00089","calls","/*<NoFunctionConstructorWithStringArgsWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'forbidden: Function constructor with string arguments '))"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","37.00089","pickUpedName","/*<NoFunctionConstructorWithStringArgsWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'forbidden: Function constructor with string arguments '))"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","37.00089","pickUpedName","/*<NoFunctionConstructorWithStringArgsWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'forbidden: Function constructor with string arguments '))"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","37.00089","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'forbidden: Function constructor with string arguments '))"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","40.00034","call.arguments[0]","super","visitNewExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noFunctionConstructorWithStringArgsRule.ts","NoFunctionConstructorWithStringArgsWalker",".visitNewExpression","40.00034","calls","super","visitNewExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","Rule","","9.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","Rule","","10.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","Rule","","10.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","Rule","","10.00035","Assign","Rule","FAILURE_STRING","string","'Use arrow function instead of function expression'"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","Rule",".","12.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","Rule",".apply","12.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","Rule",".apply","13.00089","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","Rule",".apply","13.00089","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","Rule",".apply","13.00089","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoFunctionExpressionRuleWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","Rule",".apply","13.00089","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoFunctionExpressionRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","Rule",".apply","13.00089","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoFunctionExpressionRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","Rule",".apply","13.00089","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoFunctionExpressionRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","Rule",".apply","13.00089","return","","","any","this.applyWithWalker((new NoFunctionExpressionRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","Rule","","18.00006","defined","NoFunctionExpressionRuleWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker","","18.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".","20.00014","TS.MethodDefined","NoFunctionExpressionRuleWalker","visitFunctionExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","20.00048","define.Parameter","visitFunctionExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","21.00012","TS.VariableDeclaration","","walker","any",""
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","21.00052","calls","/*<NoFunctionExpressionRuleWalker>*/ this","getSourceFile","any","()"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","21.00052","pickUpedName","/*<NoFunctionExpressionRuleWalker>*/ this","getSourceFile","","()"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","21.00074","calls","/*<NoFunctionExpressionRuleWalker>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","21.00074","pickUpedName","/*<NoFunctionExpressionRuleWalker>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","21.00074","Assign","walker","","any","(new SingleFunctionWalker(this.getSourceFile(), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","21.00074","pickUpedName","/*<NoFunctionExpressionRuleWalker>*/ this","","","(new SingleFunctionWalker(this.getSourceFile(), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","21.00074","pickUpedName","/*<NoFunctionExpressionRuleWalker>*/ this","getOptions","","(new SingleFunctionWalker(this.getSourceFile(), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","22.00014","calls","(/*Args:*/<any>node)","getChildren","any","()"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression;(/*Args:*/<any>node).getChildren().forEach(Arguments[0])","22.00036","call.func","(/*Args:*/<any>node).getChildren()","forEach","(node: any) => void",""
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression;(/*Args:*/<any>node).getChildren().forEach(Arguments[0])","22.00036","pickUpedName","node","getChildren","","(/*Args:*/<any>node).getChildren().forEach"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression;(/*Args:*/<any>node).getChildren().forEach(Arguments[0])","22.00046","define.Parameter","node","","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression;(/*Args:*/<any>node).getChildren().forEach(Arguments[0])","23.00025","call.arguments[0]","(new SingleFunctionWalker(this.getSourceFile(), this.getOptions()))","walk","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression;(/*Args:*/<any>node).getChildren().forEach(Arguments[0])","23.00025","calls","(new SingleFunctionWalker(this.getSourceFile(), this.getOptions()))","walk","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression;(/*Args:*/<any>node).getChildren().forEach(Arguments[0])","23.00025","pickUpedName","walker","walk","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","23.00025","call.arguments[0]","(/*Args:*/<any>node).getChildren()","forEach","(node: any) => void","/**(node: any) => void**/"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","23.00025","calls","(/*Args:*/<any>node).getChildren()","forEach","any","(/**(node: any) => void**/)"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","24.00012","Conditional","! walker.isAccessingThis","","/*IfStatement*/ boolean/* no Else Clause*/","! (new SingleFunctionWalker(this.getSourceFile(), this.getOptions())).isAccessingThis"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","27.00053","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","27.00070","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","27.00087","call.arguments[0]","/*<NoFunctionExpressionRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","27.00087","call.arguments[1]","/*<NoFunctionExpressionRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","27.00087","call.arguments[2]","/*<NoFunctionExpressionRuleWalker>*/ this","createFailure","string","'Use arrow function instead of function expression'"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","27.00087","calls","/*<NoFunctionExpressionRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Use arrow function instead of function expression')"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","27.00087","pickUpedName","/*<NoFunctionExpressionRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Use arrow function instead of function expression')"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","27.00087","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Use arrow function instead of function expression')"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","27.00087","call.arguments[0]","/*<NoFunctionExpressionRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Use arrow function instead of function expression')"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","27.00087","calls","/*<NoFunctionExpressionRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Use arrow function instead of function expression'))"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","27.00087","pickUpedName","/*<NoFunctionExpressionRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Use arrow function instead of function expression'))"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","27.00087","pickUpedName","/*<NoFunctionExpressionRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Use arrow function instead of function expression'))"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","27.00087","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Use arrow function instead of function expression'))"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","29.00039","call.arguments[0]","super","visitFunctionExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker",".visitFunctionExpression","29.00039","calls","super","visitFunctionExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","NoFunctionExpressionRuleWalker","","33.00006","defined","SingleFunctionWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker","","33.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker","","34.00011","TS.PropertyDefined","SingleFunctionWalker","isAccessingThis","boolean",""
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker","","34.00038","TS.PropertyDefined","SingleFunctionWalker","isAccessingThis","boolean",""
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker","","34.00038","Assign","SingleFunctionWalker","isAccessingThis","boolean","false"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker",".","35.00014","TS.MethodDefined","SingleFunctionWalker","visitNode","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker",".visitNode","35.00034","define.Parameter","visitNode","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker",".visitNode","35.00047","Conditional","node.getText() === 'this'","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).getText() === 'this'"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker",".visitNode","36.00018","calls","(/*Args:*/<any>node)","getText","any","()"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker",".visitNode","36.00031","Compare","node.getText()","","=== /*string*/","'this'"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker",".visitNode","36.00031","CompareR","'this'","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker",".visitNode","37.00035","Assign","/*<SingleFunctionWalker>*/ this","isAccessingThis","= /*boolean*/","{|this.isAccessingThis |,| true|} "
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker",".visitNode","37.00035","pickUpedName","/*<SingleFunctionWalker>*/ this","isAccessingThis","","{|this.isAccessingThis |,| true|} "
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker",".visitNode","39.00025","call.arguments[0]","super","visitNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker",".visitNode","39.00025","calls","super","visitNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker",".","42.00014","TS.MethodDefined","SingleFunctionWalker","visitFunctionExpression","(node: any) => void","/**
tslint:disable:no-empty */

(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker",".visitFunctionExpression","42.00048","define.Parameter","visitFunctionExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker",".","45.00014","TS.MethodDefined","SingleFunctionWalker","visitArrowFunction","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noFunctionExpressionRule.ts","SingleFunctionWalker",".visitArrowFunction","45.00043","define.Parameter","visitArrowFunction","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","Rule","","11.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","Rule","","12.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","Rule","","12.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","Rule","","12.00035","Assign","Rule","FAILURE_STRING","string","'Forbidden http url in string: '"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","Rule",".","14.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","Rule",".apply","14.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","Rule",".apply","15.00077","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","Rule",".apply","15.00077","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","Rule",".apply","15.00077","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoHttpStringWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","Rule",".apply","15.00077","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoHttpStringWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","Rule",".apply","15.00077","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoHttpStringWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","Rule",".apply","15.00077","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoHttpStringWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","Rule",".apply","15.00077","return","","","any","this.applyWithWalker((new NoHttpStringWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","Rule","","20.00006","defined","NoHttpStringWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker","","20.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".","22.00014","TS.MethodDefined","NoHttpStringWalker","visitNode","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","22.00034","define.Parameter","visitNode","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","22.00047","Conditional","node.kind === SyntaxKind.current().StringLiteral","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).kind === SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","23.00038","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","23.00048","ref.varName","SyntaxKind.current()","StringLiteral","number",""
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","23.00048","Compare","node","kind","=== /*number*/","SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","23.00048","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).kind"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","24.00016","TS.VariableDeclaration","","stringText","string",""
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","24.00068","Assign","stringText","","any","((/*Args:*/<any>node)).text"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","24.00073","Conditional","/.*http:.*/.test(stringText)","","/*IfStatement*/ boolean/* no Else Clause*/","/.*http:.*/.test(((/*Args:*/<any>node)).text)"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","25.00034","call.arguments[0]","/.*http:.*/","test","string","((/*Args:*/<any>node)).text"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","25.00034","calls","/.*http:.*/","test","boolean","(((/*Args:*/<any>node)).text)"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","25.00048","Conditional","! this.isSuppressed(stringText)","","/*IfStatement*/ boolean/* no Else Clause*/","! this.isSuppressed(((/*Args:*/<any>node)).text)"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","26.00040","call.arguments[0]","/*<NoHttpStringWalker>*/ this","isSuppressed","string","((/*Args:*/<any>node)).text"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","26.00040","calls","/*<NoHttpStringWalker>*/ this","isSuppressed","boolean","(((/*Args:*/<any>node)).text)"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","26.00040","pickUpedName","/*<NoHttpStringWalker>*/ this","isSuppressed","","(((/*Args:*/<any>node)).text)"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","27.00024","TS.VariableDeclaration","","failureString","string",""
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","27.00062","BinaryExpression","Rule","FAILURE_STRING","+ /*string*/","'''"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","27.00069","BinaryExpression","Rule.FAILURE_STRING + '''","","+ /*string*/","((/*Args:*/<any>node)).text"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","27.00082","BinaryExpression","Rule.FAILURE_STRING + ''' + stringText","","+ /*string*/","'''"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","27.00082","Assign","failureString","","string","'Forbidden http url in string: '' + ((/*Args:*/<any>node)).text + '''"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","27.00082","pickUpedName","Rule","FAILURE_STRING","","'Forbidden http url in string: '' + ((/*Args:*/<any>node)).text + '''"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","28.00024","TS.VariableDeclaration","","failure","any",""
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","28.00059","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","28.00076","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","28.00087","call.arguments[0]","/*<NoHttpStringWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","28.00087","call.arguments[1]","/*<NoHttpStringWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","28.00087","call.arguments[2]","/*<NoHttpStringWalker>*/ this","createFailure","string","'Forbidden http url in string: '' + ((/*Args:*/<any>node)).text + '''"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","28.00087","calls","/*<NoHttpStringWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden http url in string: '' + ((/*Args:*/<any>node)).text + ''')"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","28.00087","pickUpedName","/*<NoHttpStringWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden http url in string: '' + ((/*Args:*/<any>node)).text + ''')"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","28.00087","Assign","failure","","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden http url in string: '' + ((/*Args:*/<any>node)).text + ''')"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","28.00087","pickUpedName","/*<NoHttpStringWalker>*/ this","createFailure","","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden http url in string: '' + ((/*Args:*/<any>node)).text + ''')"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","29.00037","call.arguments[0]","/*<NoHttpStringWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden http url in string: '' + ((/*Args:*/<any>node)).text + ''')"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","29.00037","calls","/*<NoHttpStringWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden http url in string: '' + ((/*Args:*/<any>node)).text + '''))"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","29.00037","pickUpedName","/*<NoHttpStringWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden http url in string: '' + ((/*Args:*/<any>node)).text + '''))"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","33.00025","call.arguments[0]","super","visitNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".visitNode","33.00025","calls","super","visitNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".","36.00012","TS.MethodDefined","NoHttpStringWalker","isSuppressed","(stringText: string) => boolean","(@param)?\W+stringText *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed","36.00037","define.Parameter","isSuppressed","stringText","string","/*Args:*/<string>stringText"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed","37.00012","TS.VariableDeclaration","","allExceptions","string[]",""
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed","37.00078","calls","/*<NoHttpStringWalker>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed","37.00078","pickUpedName","/*<NoHttpStringWalker>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed","37.00078","call.arguments[0]","NoHttpStringWalker","getExceptions","any","this.getOptions()"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed","37.00078","calls","NoHttpStringWalker","getExceptions","string[]","(this.getOptions())"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed","37.00078","pickUpedName","NoHttpStringWalker","getExceptions","","(this.getOptions())"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed","37.00078","pickUpedName","/*<NoHttpStringWalker>*/ this","getOptions","","(this.getOptions())"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed","37.00078","Assign","allExceptions","","string[]","NoHttpStringWalker.getExceptions(this.getOptions())"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed","37.00078","pickUpedName","NoHttpStringWalker","getExceptions","","NoHttpStringWalker.getExceptions(this.getOptions())"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed","37.00078","pickUpedName","/*<NoHttpStringWalker>*/ this","getOptions","","NoHttpStringWalker.getExceptions(this.getOptions())"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed;Utils.exists(Arguments[1])","38.00043","call.func","Utils","exists","(exception: string) => boolean",""
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed;Utils.exists(Arguments[1])","38.00055","define.Parameter","exception","","string","/*Args:*/<string>exception"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed;Utils.exists(Arguments[1])","39.00047","call.arguments[0]","(new RegExp((/*Args:*/<string>exception)))","test","string","(/*Args:*/<string>stringText)"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed;Utils.exists(Arguments[1])","39.00047","calls","(new RegExp((/*Args:*/<string>exception)))","test","boolean","((/*Args:*/<string>stringText))"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed;Utils.exists(Arguments[1])","39.00047","pickUpedName","stringText","","","((/*Args:*/<string>stringText))"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed;Utils.exists(Arguments[1])","39.00047","return","","","boolean","(new RegExp((/*Args:*/<string>exception))).test((/*Args:*/<string>stringText))"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed","39.00047","call.arguments[0]","Utils","exists","string[]","NoHttpStringWalker.getExceptions(this.getOptions())"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed","39.00047","call.arguments[1]","Utils","exists","(exception: string) => boolean","/**(exception: string) => boolean**/"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed","39.00047","calls","Utils","exists","boolean","(NoHttpStringWalker.getExceptions(this.getOptions()), /**(exception: string) => boolean**/)"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".isSuppressed","39.00047","return","","","boolean","Utils.exists(NoHttpStringWalker.getExceptions(this.getOptions()), /**(exception: string) => boolean**/)"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".","43.00019","TS.MethodDefined","NoHttpStringWalker","getExceptions","(options: any) => string[]","(@param)?\W+options *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".getExceptions","43.00049","define.Parameter","getExceptions","options","any","/*Args:*/<any>options"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".getExceptions","43.00071","Conditional","options.ruleArguments instanceof Array","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>options).ruleArguments instanceof Array"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".getExceptions","44.00045","BinaryExpression","options","ruleArguments","instanceof /*ArrayConstructor*/","Array"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".getExceptions","44.00045","ref.type","ArrayConstructor","","",""
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".getExceptions","45.00042","return","","","any","(/*Args:*/<any>options).ruleArguments[0]"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".getExceptions","46.00010","Conditional","options instanceof Array","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>options) instanceof Array"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".getExceptions","47.00031","BinaryExpression","options","","instanceof /*ArrayConstructor*/","Array"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".getExceptions","47.00031","ref.type","ArrayConstructor","","",""
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".getExceptions","48.00035","return","","","string[]","(/*Args:*/<any>options)"
"../tslint-microsoft-contrib-master/src/noHttpStringRule.ts","NoHttpStringWalker",".getExceptions","50.00015","return","","","null","null"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","Rule",".","12.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","Rule",".apply","12.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","Rule",".apply","13.00085","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","Rule",".apply","13.00085","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","Rule",".apply","13.00085","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoIncrementDecrementWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","Rule",".apply","13.00085","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoIncrementDecrementWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","Rule",".apply","13.00085","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoIncrementDecrementWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","Rule",".apply","13.00085","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoIncrementDecrementWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","Rule",".apply","13.00085","return","","","any","this.applyWithWalker((new NoIncrementDecrementWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","Rule","","17.00006","defined","NoIncrementDecrementWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker","","17.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".","19.00014","TS.MethodDefined","NoIncrementDecrementWalker","visitPostfixUnaryExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".visitPostfixUnaryExpression","19.00052","define.Parameter","visitPostfixUnaryExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".visitPostfixUnaryExpression","20.00038","call.arguments[0]","/*<NoIncrementDecrementWalker>*/ this","validateUnaryExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".visitPostfixUnaryExpression","20.00038","calls","/*<NoIncrementDecrementWalker>*/ this","validateUnaryExpression","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".visitPostfixUnaryExpression","20.00038","pickUpedName","/*<NoIncrementDecrementWalker>*/ this","validateUnaryExpression","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".visitPostfixUnaryExpression","21.00043","call.arguments[0]","super","visitPostfixUnaryExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".visitPostfixUnaryExpression","21.00043","calls","super","visitPostfixUnaryExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".","24.00014","TS.MethodDefined","NoIncrementDecrementWalker","visitPrefixUnaryExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".visitPrefixUnaryExpression","24.00051","define.Parameter","visitPrefixUnaryExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".visitPrefixUnaryExpression","25.00038","call.arguments[0]","/*<NoIncrementDecrementWalker>*/ this","validateUnaryExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".visitPrefixUnaryExpression","25.00038","calls","/*<NoIncrementDecrementWalker>*/ this","validateUnaryExpression","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".visitPrefixUnaryExpression","25.00038","pickUpedName","/*<NoIncrementDecrementWalker>*/ this","validateUnaryExpression","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".visitPrefixUnaryExpression","26.00042","call.arguments[0]","super","visitPrefixUnaryExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".visitPrefixUnaryExpression","26.00042","calls","super","visitPrefixUnaryExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".","29.00012","TS.MethodDefined","NoIncrementDecrementWalker","validateUnaryExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","29.00074","define.Parameter","validateUnaryExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","29.00098","Conditional","node.operator === SyntaxKind.current().PlusPlusToken","","/*IfStatement*/ boolean","(/*Args:*/<any>node).operator === SyntaxKind.current().PlusPlusToken"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","30.00042","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","30.00052","ref.varName","SyntaxKind.current()","PlusPlusToken","number",""
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","30.00052","Compare","node","operator","=== /*number*/","SyntaxKind.current().PlusPlusToken"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","30.00052","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).operator"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","31.00053","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","31.00070","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","31.00081","call.arguments[0]","/*<NoIncrementDecrementWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","31.00081","call.arguments[1]","/*<NoIncrementDecrementWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","31.00081","call.arguments[2]","/*<NoIncrementDecrementWalker>*/ this","createFailure","string","'Forbidden ++ operator'"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","31.00081","calls","/*<NoIncrementDecrementWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden ++ operator')"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","31.00081","pickUpedName","/*<NoIncrementDecrementWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden ++ operator')"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","31.00081","call.arguments[0]","/*<NoIncrementDecrementWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden ++ operator')"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","31.00081","calls","/*<NoIncrementDecrementWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden ++ operator'))"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","31.00081","pickUpedName","/*<NoIncrementDecrementWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden ++ operator'))"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","31.00081","pickUpedName","/*<NoIncrementDecrementWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden ++ operator'))"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","32.00015","Conditional","node.operator === SyntaxKind.current().MinusMinusToken","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).operator === SyntaxKind.current().MinusMinusToken"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","32.00049","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","32.00059","ref.varName","SyntaxKind.current()","MinusMinusToken","number",""
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","32.00059","Compare","node","operator","=== /*number*/","SyntaxKind.current().MinusMinusToken"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","32.00059","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).operator"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","33.00053","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","33.00070","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","33.00081","call.arguments[0]","/*<NoIncrementDecrementWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","33.00081","call.arguments[1]","/*<NoIncrementDecrementWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","33.00081","call.arguments[2]","/*<NoIncrementDecrementWalker>*/ this","createFailure","string","'Forbidden -- operator'"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","33.00081","calls","/*<NoIncrementDecrementWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden -- operator')"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","33.00081","pickUpedName","/*<NoIncrementDecrementWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden -- operator')"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","33.00081","call.arguments[0]","/*<NoIncrementDecrementWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden -- operator')"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","33.00081","calls","/*<NoIncrementDecrementWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden -- operator'))"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","33.00081","pickUpedName","/*<NoIncrementDecrementWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden -- operator'))"
"../tslint-microsoft-contrib-master/src/noIncrementDecrementRule.ts","NoIncrementDecrementWalker",".validateUnaryExpression","33.00081","pickUpedName","/*<NoIncrementDecrementWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden -- operator'))"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","Rule",".","12.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","Rule",".apply","12.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","Rule",".apply","13.00084","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","Rule",".apply","13.00084","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","Rule",".apply","13.00084","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoInvalidRegexpRuleWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","Rule",".apply","13.00084","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoInvalidRegexpRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","Rule",".apply","13.00084","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoInvalidRegexpRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","Rule",".apply","13.00084","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoInvalidRegexpRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","Rule",".apply","13.00084","return","","","any","this.applyWithWalker((new NoInvalidRegexpRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","Rule","","17.00006","defined","NoInvalidRegexpRuleWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker","","17.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".","19.00014","TS.MethodDefined","NoInvalidRegexpRuleWalker","visitNewExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".visitNewExpression","19.00043","define.Parameter","visitNewExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".visitNewExpression","20.00027","call.arguments[0]","/*<NoInvalidRegexpRuleWalker>*/ this","validateCall","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".visitNewExpression","20.00027","calls","/*<NoInvalidRegexpRuleWalker>*/ this","validateCall","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".visitNewExpression","20.00027","pickUpedName","/*<NoInvalidRegexpRuleWalker>*/ this","validateCall","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".visitNewExpression","21.00034","call.arguments[0]","super","visitNewExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".visitNewExpression","21.00034","calls","super","visitNewExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".","24.00014","TS.MethodDefined","NoInvalidRegexpRuleWalker","visitCallExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".visitCallExpression","24.00044","define.Parameter","visitCallExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".visitCallExpression","25.00027","call.arguments[0]","/*<NoInvalidRegexpRuleWalker>*/ this","validateCall","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".visitCallExpression","25.00027","calls","/*<NoInvalidRegexpRuleWalker>*/ this","validateCall","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".visitCallExpression","25.00027","pickUpedName","/*<NoInvalidRegexpRuleWalker>*/ this","validateCall","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".visitCallExpression","26.00035","call.arguments[0]","super","visitCallExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".visitCallExpression","26.00035","calls","super","visitCallExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".","29.00012","TS.MethodDefined","NoInvalidRegexpRuleWalker","validateCall","(expression: any) => void","(@param)?\W+expression *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","29.00041","define.Parameter","validateCall","expression","any","/*Args:*/<any>expression"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","29.00064","Conditional","expression.expression.getText() === 'RegExp'","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>expression).expression.getText() === 'RegExp'"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","30.00035","calls","(/*Args:*/<any>expression).expression","getText","any","()"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","30.00048","Compare","expression.expression.getText()","","=== /*string*/","'RegExp'"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","30.00048","CompareR","'RegExp'","","/*Reverse*/=== /*any*/","(/*Args:*/<any>expression).expression.getText()"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","30.00060","Conditional","expression.arguments.length > 0","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>expression).arguments.length > 0"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","31.00046","Compare","expression.arguments","length","> /*number*/","0"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","31.00046","CompareR","0","","/*Reverse*/> /*any*/","(/*Args:*/<any>expression).arguments.length"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","32.00020","TS.VariableDeclaration","","arg1","any",""
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","32.00064","Assign","arg1","","any","(/*Args:*/<any>expression).arguments[0]"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","32.00067","Conditional","arg1.kind === SyntaxKind.current().StringLiteral","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>expression).arguments[0].kind === SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","33.00046","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","33.00056","ref.varName","SyntaxKind.current()","StringLiteral","number",""
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","33.00056","Compare","arg1","kind","=== /*number*/","SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","33.00056","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>expression).arguments[0].kind"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","34.00024","TS.VariableDeclaration","","regexpText","string",""
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","34.00071","Assign","regexpText","","any","((/*Args:*/<any>expression).arguments[0]).text"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","36.00028","TS.VariableDeclaration","","regex","RegExp",""
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","36.00048","Assign","regex","","RegExp","(new RegExp(((/*Args:*/<any>expression).arguments[0]).text))"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","36.00048","ref.type","RegExp","","",""
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","37.00030","TS.VariableDeclaration","","e","any",""
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","38.00065","calls","(/*Args:*/<any>expression).arguments[0]","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","38.00082","calls","(/*Args:*/<any>expression).arguments[0]","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","38.00096","call.arguments[0]","/*<NoInvalidRegexpRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>expression).arguments[0].getStart()"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","38.00096","call.arguments[1]","/*<NoInvalidRegexpRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>expression).arguments[0].getWidth()"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","38.00096","call.arguments[2]","/*<NoInvalidRegexpRuleWalker>*/ this","createFailure","any","e.message"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","38.00096","calls","/*<NoInvalidRegexpRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>expression).arguments[0].getStart(), (/*Args:*/<any>expression).arguments[0].getWidth(), e.message)"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","38.00096","pickUpedName","/*<NoInvalidRegexpRuleWalker>*/ this","createFailure","","((/*Args:*/<any>expression).arguments[0].getStart(), (/*Args:*/<any>expression).arguments[0].getWidth(), e.message)"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","38.00096","call.arguments[0]","/*<NoInvalidRegexpRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>expression).arguments[0].getStart(), (/*Args:*/<any>expression).arguments[0].getWidth(), e.message)"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","38.00096","calls","/*<NoInvalidRegexpRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>expression).arguments[0].getStart(), (/*Args:*/<any>expression).arguments[0].getWidth(), e.message))"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","38.00096","pickUpedName","/*<NoInvalidRegexpRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>expression).arguments[0].getStart(), (/*Args:*/<any>expression).arguments[0].getWidth(), e.message))"
"../tslint-microsoft-contrib-master/src/noInvalidRegexpRule.ts","NoInvalidRegexpRuleWalker",".validateCall","38.00096","pickUpedName","/*<NoInvalidRegexpRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>expression).arguments[0].getStart(), (/*Args:*/<any>expression).arguments[0].getWidth(), e.message))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","Rule",".","11.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","Rule",".apply","11.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","Rule",".apply","12.00090","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","Rule",".apply","12.00090","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","Rule",".apply","12.00090","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new MissingVisibilityModifierWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","Rule",".apply","12.00090","calls","/*<Rule>*/ this","applyWithWalker","any","((new MissingVisibilityModifierWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","Rule",".apply","12.00090","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new MissingVisibilityModifierWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","Rule",".apply","12.00090","pickUpedName","/*<Rule>*/ this","getOptions","","((new MissingVisibilityModifierWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","Rule",".apply","12.00090","return","","","any","this.applyWithWalker((new MissingVisibilityModifierWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","Rule","","16.00006","defined","MissingVisibilityModifierWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker","","16.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".","19.00014","TS.MethodDefined","MissingVisibilityModifierWalker","visitPropertyDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","19.00049","define.Parameter","visitPropertyDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","19.00077","Conditional","/*<MissingVisibilityModifierWalker>*/ this.isMissingVisibilityModifier(node)","","/*IfStatement*/ boolean/* no Else Clause*/","this.isMissingVisibilityModifier((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","20.00046","call.arguments[0]","/*<MissingVisibilityModifierWalker>*/ this","isMissingVisibilityModifier","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","20.00046","calls","/*<MissingVisibilityModifierWalker>*/ this","isMissingVisibilityModifier","boolean","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","20.00046","pickUpedName","/*<MissingVisibilityModifierWalker>*/ this","isMissingVisibilityModifier","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","21.00016","TS.VariableDeclaration","","failureString","string",""
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","21.00100","call.arguments[0]","/*<MissingVisibilityModifierWalker>*/ this","getFailureCodeSnippet","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","21.00100","calls","/*<MissingVisibilityModifierWalker>*/ this","getFailureCodeSnippet","string","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","21.00100","pickUpedName","/*<MissingVisibilityModifierWalker>*/ this","getFailureCodeSnippet","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","21.00100","BinaryExpression","'Field missing visibility modifier: '","","+ /*string*/","this.getFailureCodeSnippet((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","21.00100","pickUpedName","/*<MissingVisibilityModifierWalker>*/ this","getFailureCodeSnippet","","this.getFailureCodeSnippet((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","21.00100","Assign","failureString","","string","'Field missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","21.00100","pickUpedName","/*<MissingVisibilityModifierWalker>*/ this","getFailureCodeSnippet","","'Field missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","22.00016","TS.VariableDeclaration","","failure","any",""
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","22.00051","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","22.00068","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","22.00079","call.arguments[0]","/*<MissingVisibilityModifierWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","22.00079","call.arguments[1]","/*<MissingVisibilityModifierWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","22.00079","call.arguments[2]","/*<MissingVisibilityModifierWalker>*/ this","createFailure","string","'Field missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","22.00079","calls","/*<MissingVisibilityModifierWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Field missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","22.00079","pickUpedName","/*<MissingVisibilityModifierWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Field missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","22.00079","Assign","failure","","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Field missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","22.00079","pickUpedName","/*<MissingVisibilityModifierWalker>*/ this","createFailure","","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Field missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","23.00029","call.arguments[0]","/*<MissingVisibilityModifierWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Field missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","23.00029","calls","/*<MissingVisibilityModifierWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Field missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node))))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","23.00029","pickUpedName","/*<MissingVisibilityModifierWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Field missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node))))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","25.00040","call.arguments[0]","super","visitPropertyDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitPropertyDeclaration","25.00040","calls","super","visitPropertyDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".","29.00014","TS.MethodDefined","MissingVisibilityModifierWalker","visitMethodDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","29.00047","define.Parameter","visitMethodDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","29.00073","Conditional","/*<MissingVisibilityModifierWalker>*/ this.isMissingVisibilityModifier(node)","","/*IfStatement*/ boolean/* no Else Clause*/","this.isMissingVisibilityModifier((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","30.00046","call.arguments[0]","/*<MissingVisibilityModifierWalker>*/ this","isMissingVisibilityModifier","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","30.00046","calls","/*<MissingVisibilityModifierWalker>*/ this","isMissingVisibilityModifier","boolean","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","30.00046","pickUpedName","/*<MissingVisibilityModifierWalker>*/ this","isMissingVisibilityModifier","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","31.00016","TS.VariableDeclaration","","failureString","string",""
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","31.00101","call.arguments[0]","/*<MissingVisibilityModifierWalker>*/ this","getFailureCodeSnippet","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","31.00101","calls","/*<MissingVisibilityModifierWalker>*/ this","getFailureCodeSnippet","string","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","31.00101","pickUpedName","/*<MissingVisibilityModifierWalker>*/ this","getFailureCodeSnippet","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","31.00101","BinaryExpression","'Method missing visibility modifier: '","","+ /*string*/","this.getFailureCodeSnippet((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","31.00101","pickUpedName","/*<MissingVisibilityModifierWalker>*/ this","getFailureCodeSnippet","","this.getFailureCodeSnippet((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","31.00101","Assign","failureString","","string","'Method missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","31.00101","pickUpedName","/*<MissingVisibilityModifierWalker>*/ this","getFailureCodeSnippet","","'Method missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","32.00016","TS.VariableDeclaration","","failure","any",""
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","32.00051","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","32.00068","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","32.00079","call.arguments[0]","/*<MissingVisibilityModifierWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","32.00079","call.arguments[1]","/*<MissingVisibilityModifierWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","32.00079","call.arguments[2]","/*<MissingVisibilityModifierWalker>*/ this","createFailure","string","'Method missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","32.00079","calls","/*<MissingVisibilityModifierWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Method missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","32.00079","pickUpedName","/*<MissingVisibilityModifierWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Method missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","32.00079","Assign","failure","","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Method missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","32.00079","pickUpedName","/*<MissingVisibilityModifierWalker>*/ this","createFailure","","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Method missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","33.00029","call.arguments[0]","/*<MissingVisibilityModifierWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Method missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","33.00029","calls","/*<MissingVisibilityModifierWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Method missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node))))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","33.00029","pickUpedName","/*<MissingVisibilityModifierWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Method missing visibility modifier: ' + this.getFailureCodeSnippet((/*Args:*/<any>node))))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","35.00038","call.arguments[0]","super","visitMethodDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".visitMethodDeclaration","35.00038","calls","super","visitMethodDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".","38.00012","TS.MethodDefined","MissingVisibilityModifierWalker","isMissingVisibilityModifier","(node: any) => boolean","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".isMissingVisibilityModifier","38.00050","define.Parameter","isMissingVisibilityModifier","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".isMissingVisibilityModifier","39.00037","call.arguments[0]","AstUtils","isPrivate","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".isMissingVisibilityModifier","39.00037","calls","AstUtils","isPrivate","boolean","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".isMissingVisibilityModifier","39.00067","call.arguments[0]","AstUtils","isProtected","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".isMissingVisibilityModifier","39.00067","calls","AstUtils","isProtected","boolean","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".isMissingVisibilityModifier","39.00067","BinaryExpression","AstUtils.isPrivate(node)","","|| /*boolean*/","AstUtils.isProtected((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".isMissingVisibilityModifier","39.00094","call.arguments[0]","AstUtils","isPublic","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".isMissingVisibilityModifier","39.00094","calls","AstUtils","isPublic","boolean","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".isMissingVisibilityModifier","39.00094","BinaryExpression","AstUtils.isPrivate(node) || AstUtils.isProtected(node)","","|| /*boolean*/","AstUtils.isPublic((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".isMissingVisibilityModifier","39.00094","return","","","boolean","! (AstUtils.isPrivate((/*Args:*/<any>node)) || AstUtils.isProtected((/*Args:*/<any>node)) || AstUtils.isPublic((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".","42.00012","TS.MethodDefined","MissingVisibilityModifierWalker","getFailureCodeSnippet","(node: any) => string","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".getFailureCodeSnippet","42.00044","define.Parameter","getFailureCodeSnippet","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".getFailureCodeSnippet","43.00012","TS.VariableDeclaration","","message","string",""
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".getFailureCodeSnippet","43.00036","calls","(/*Args:*/<any>node)","getText","any","()"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".getFailureCodeSnippet","43.00036","Assign","message","","any","(/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".getFailureCodeSnippet","43.00046","Conditional","message.indexOf('\n') > 0","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).getText().indexOf('\n') > 0"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".getFailureCodeSnippet","44.00029","call.arguments[0]","(/*Args:*/<any>node).getText()","indexOf","string","'\n'"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".getFailureCodeSnippet","44.00029","calls","(/*Args:*/<any>node).getText()","indexOf","number","('\n')"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".getFailureCodeSnippet","44.00036","Compare","message.indexOf('\n')","","> /*number*/","0"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".getFailureCodeSnippet","44.00036","CompareR","0","","/*Reverse*/> /*number*/","(/*Args:*/<any>node).getText().indexOf('\n')"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".getFailureCodeSnippet","45.00054","call.arguments[0]","(/*Args:*/<any>node).getText()","indexOf","string","'\n'"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".getFailureCodeSnippet","45.00054","calls","(/*Args:*/<any>node).getText()","indexOf","number","('\n')"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".getFailureCodeSnippet","45.00054","call.arguments[0]","(/*Args:*/<any>node).getText()","substr","number","0"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".getFailureCodeSnippet","45.00054","call.arguments[1]","(/*Args:*/<any>node).getText()","substr","number","(/*Args:*/<any>node).getText().indexOf('\n')"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".getFailureCodeSnippet","45.00054","calls","(/*Args:*/<any>node).getText()","substr","string","(0, (/*Args:*/<any>node).getText().indexOf('\n'))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".getFailureCodeSnippet","45.00054","return","","","string","(/*Args:*/<any>node).getText().substr(0, (/*Args:*/<any>node).getText().indexOf('\n'))"
"../tslint-microsoft-contrib-master/src/noMissingVisibilityModifiersRule.ts","MissingVisibilityModifierWalker",".getFailureCodeSnippet","47.00015","return","","","string","(/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","Rule","","11.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","Rule","","11.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","Rule","","11.00035","Assign","Rule","FAILURE_STRING","string","'Forbidden Multiline string: '"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","Rule",".","13.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","Rule",".apply","13.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","Rule",".apply","14.00082","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","Rule",".apply","14.00082","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","Rule",".apply","14.00082","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoMultilineStringWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","Rule",".apply","14.00082","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoMultilineStringWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","Rule",".apply","14.00082","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoMultilineStringWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","Rule",".apply","14.00082","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoMultilineStringWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","Rule",".apply","14.00082","return","","","any","this.applyWithWalker((new NoMultilineStringWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","Rule","","18.00006","defined","NoMultilineStringWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker","","18.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".","21.00014","TS.MethodDefined","NoMultilineStringWalker","visitNode","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","21.00034","define.Parameter","visitNode","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","21.00047","Conditional","node.kind === SyntaxKind.current().NoSubstitutionTemplateLiteral","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).kind === SyntaxKind.current().NoSubstitutionTemplateLiteral"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","22.00038","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","22.00048","ref.varName","SyntaxKind.current()","NoSubstitutionTemplateLiteral","number",""
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","22.00048","Compare","node","kind","=== /*number*/","SyntaxKind.current().NoSubstitutionTemplateLiteral"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","22.00048","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).kind"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","23.00016","TS.VariableDeclaration","","fullText","string",""
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","23.00042","calls","(/*Args:*/<any>node)","getFullText","any","()"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","23.00042","Assign","fullText","","any","(/*Args:*/<any>node).getFullText()"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","24.00016","TS.VariableDeclaration","","firstLine","string",""
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","24.00077","call.arguments[0]","(/*Args:*/<any>node).getFullText()","indexOf","string","'\n'"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","24.00077","calls","(/*Args:*/<any>node).getFullText()","indexOf","number","('\n')"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","24.00077","call.arguments[0]","(/*Args:*/<any>node).getFullText()","substring","number","0"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","24.00077","call.arguments[1]","(/*Args:*/<any>node).getFullText()","substring","number","(/*Args:*/<any>node).getFullText().indexOf('\n')"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","24.00077","calls","(/*Args:*/<any>node).getFullText()","substring","string","(0, (/*Args:*/<any>node).getFullText().indexOf('\n'))"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","24.00077","Assign","firstLine","","string","(/*Args:*/<any>node).getFullText().substring(0, (/*Args:*/<any>node).getFullText().indexOf('\n'))"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","25.00016","TS.VariableDeclaration","","trimmed","string",""
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","25.00058","call.arguments[0]","(/*Args:*/<any>node).getFullText().substring(0, (/*Args:*/<any>node).getFullText().indexOf('\n'))","substring","number","0"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","25.00058","call.arguments[1]","(/*Args:*/<any>node).getFullText().substring(0, (/*Args:*/<any>node).getFullText().indexOf('\n'))","substring","number","40"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","25.00058","calls","(/*Args:*/<any>node).getFullText().substring(0, (/*Args:*/<any>node).getFullText().indexOf('\n'))","substring","string","(0, 40)"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","25.00058","Assign","trimmed","","string","(/*Args:*/<any>node).getFullText().substring(0, (/*Args:*/<any>node).getFullText().indexOf('\n')).substring(0, 40)"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","26.00053","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","26.00070","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","26.00103","BinaryExpression","Rule","FAILURE_STRING","+ /*string*/","(/*Args:*/<any>node).getFullText().substring(0, (/*Args:*/<any>node).getFullText().indexOf('\n')).substring(0, 40)"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","26.00113","BinaryExpression","Rule.FAILURE_STRING + trimmed","","+ /*string*/","'...'"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","26.00113","call.arguments[0]","/*<NoMultilineStringWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","26.00113","call.arguments[1]","/*<NoMultilineStringWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","26.00113","call.arguments[2]","/*<NoMultilineStringWalker>*/ this","createFailure","string","'Forbidden Multiline string: ' + (/*Args:*/<any>node).getFullText().substring(0, (/*Args:*/<any>node).getFullText().indexOf('\n')).substring(0, 40) + '...'"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","26.00113","calls","/*<NoMultilineStringWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden Multiline string: ' + (/*Args:*/<any>node).getFullText().substring(0, (/*Args:*/<any>node).getFullText().indexOf('\n')).substring(0, 40) + '...')"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","26.00113","pickUpedName","/*<NoMultilineStringWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden Multiline string: ' + (/*Args:*/<any>node).getFullText().substring(0, (/*Args:*/<any>node).getFullText().indexOf('\n')).substring(0, 40) + '...')"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","26.00113","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden Multiline string: ' + (/*Args:*/<any>node).getFullText().substring(0, (/*Args:*/<any>node).getFullText().indexOf('\n')).substring(0, 40) + '...')"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","26.00113","call.arguments[0]","/*<NoMultilineStringWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden Multiline string: ' + (/*Args:*/<any>node).getFullText().substring(0, (/*Args:*/<any>node).getFullText().indexOf('\n')).substring(0, 40) + '...')"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","26.00113","calls","/*<NoMultilineStringWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden Multiline string: ' + (/*Args:*/<any>node).getFullText().substring(0, (/*Args:*/<any>node).getFullText().indexOf('\n')).substring(0, 40) + '...'))"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","26.00113","pickUpedName","/*<NoMultilineStringWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden Multiline string: ' + (/*Args:*/<any>node).getFullText().substring(0, (/*Args:*/<any>node).getFullText().indexOf('\n')).substring(0, 40) + '...'))"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","26.00113","pickUpedName","/*<NoMultilineStringWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden Multiline string: ' + (/*Args:*/<any>node).getFullText().substring(0, (/*Args:*/<any>node).getFullText().indexOf('\n')).substring(0, 40) + '...'))"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","26.00113","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden Multiline string: ' + (/*Args:*/<any>node).getFullText().substring(0, (/*Args:*/<any>node).getFullText().indexOf('\n')).substring(0, 40) + '...'))"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","28.00025","call.arguments[0]","super","visitNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noMultilineStringRule.ts","NoMultilineStringWalker",".visitNode","28.00025","calls","super","visitNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","Rule","","9.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","Rule","","10.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","Rule","","10.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","Rule","","10.00035","Assign","Rule","FAILURE_STRING","string","'Do not use comma separated variable declarations: '"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","Rule",".","12.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","Rule",".apply","12.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","Rule",".apply","13.00086","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","Rule",".apply","13.00086","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","Rule",".apply","13.00086","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoMultipleVarDeclRuleWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","Rule",".apply","13.00086","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoMultipleVarDeclRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","Rule",".apply","13.00086","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoMultipleVarDeclRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","Rule",".apply","13.00086","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoMultipleVarDeclRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","Rule",".apply","13.00086","return","","","any","this.applyWithWalker((new NoMultipleVarDeclRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","Rule","","18.00006","defined","NoMultipleVarDeclRuleWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker","","18.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".","20.00014","TS.MethodDefined","NoMultipleVarDeclRuleWalker","visitVariableStatement","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","20.00047","define.Parameter","visitVariableStatement","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","20.00073","Conditional","node.declarationList.declarations.length > 1","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).declarationList.declarations.length > 1"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","21.00055","Compare","node.declarationList.declarations","length","> /*number*/","1"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","21.00055","CompareR","1","","/*Reverse*/> /*any*/","(/*Args:*/<any>node).declarationList.declarations.length"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","22.00053","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","22.00070","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","23.00076","calls","(/*Args:*/<any>node).declarationList.declarations[0]","getText","any","()"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","23.00076","BinaryExpression","Rule","FAILURE_STRING","+ /*any*/","(/*Args:*/<any>node).declarationList.declarations[0].getText()"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","23.00087","BinaryExpression","Rule.FAILURE_STRING + node.declarationList.declarations[0].getText()","","+ /*string*/","','"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","23.00087","call.arguments[0]","/*<NoMultipleVarDeclRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","23.00087","call.arguments[1]","/*<NoMultipleVarDeclRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","23.00087","call.arguments[2]","/*<NoMultipleVarDeclRuleWalker>*/ this","createFailure","string","'Do not use comma separated variable declarations: ' + (/*Args:*/<any>node).declarationList.declarations[0].getText() + ','"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","23.00087","calls","/*<NoMultipleVarDeclRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not use comma separated variable declarations: ' + (/*Args:*/<any>node).declarationList.declarations[0].getText() + ',')"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","23.00087","pickUpedName","/*<NoMultipleVarDeclRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not use comma separated variable declarations: ' + (/*Args:*/<any>node).declarationList.declarations[0].getText() + ',')"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","23.00087","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not use comma separated variable declarations: ' + (/*Args:*/<any>node).declarationList.declarations[0].getText() + ',')"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","23.00087","call.arguments[0]","/*<NoMultipleVarDeclRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not use comma separated variable declarations: ' + (/*Args:*/<any>node).declarationList.declarations[0].getText() + ',')"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","23.00087","calls","/*<NoMultipleVarDeclRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not use comma separated variable declarations: ' + (/*Args:*/<any>node).declarationList.declarations[0].getText() + ','))"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","23.00087","pickUpedName","/*<NoMultipleVarDeclRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not use comma separated variable declarations: ' + (/*Args:*/<any>node).declarationList.declarations[0].getText() + ','))"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","23.00087","pickUpedName","/*<NoMultipleVarDeclRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not use comma separated variable declarations: ' + (/*Args:*/<any>node).declarationList.declarations[0].getText() + ','))"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","23.00087","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Do not use comma separated variable declarations: ' + (/*Args:*/<any>node).declarationList.declarations[0].getText() + ','))"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","25.00038","call.arguments[0]","super","visitVariableStatement","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noMultipleVarDeclRule.ts","NoMultipleVarDeclRuleWalker",".visitVariableStatement","25.00038","calls","super","visitVariableStatement","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","Rule","","11.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","Rule","","11.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","Rule","","11.00035","Assign","Rule","FAILURE_STRING","string","'Octal literals should not be used: '"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","Rule",".","13.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","Rule",".apply","13.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","Rule",".apply","14.00014","TS.VariableDeclaration","","noOctalLiteral","any",""
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","Rule",".apply","14.00068","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","Rule",".apply","14.00068","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","Rule",".apply","14.00068","Assign","noOctalLiteral","","any","(new NoOctalLiteral((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","Rule",".apply","14.00068","pickUpedName","/*<Rule>*/ this","getOptions","","(new NoOctalLiteral((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","Rule",".apply","15.00037","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoOctalLiteral((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","Rule",".apply","15.00037","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoOctalLiteral((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","Rule",".apply","15.00037","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoOctalLiteral((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","Rule",".apply","15.00037","return","","","any","this.applyWithWalker((new NoOctalLiteral((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","Rule","","19.00006","defined","NoOctalLiteral","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral","","19.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".","21.00011","TS.MethodDefined","NoOctalLiteral","visitNode","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".visitNode","21.00031","define.Parameter","visitNode","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".visitNode","21.00038","Conditional","node.kind === SyntaxKind.current().StringLiteral","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).kind === SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".visitNode","22.00038","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".visitNode","22.00048","ref.varName","SyntaxKind.current()","StringLiteral","number",""
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".visitNode","22.00048","Compare","node","kind","=== /*number*/","SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".visitNode","22.00048","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).kind"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".visitNode","23.00058","call.arguments[0]","/*<NoOctalLiteral>*/ this","failOnOctalString","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".visitNode","23.00058","calls","/*<NoOctalLiteral>*/ this","failOnOctalString","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".visitNode","23.00058","pickUpedName","/*<NoOctalLiteral>*/ this","failOnOctalString","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".visitNode","25.00025","call.arguments[0]","super","visitNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".visitNode","25.00025","calls","super","visitNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".","28.00012","TS.MethodDefined","NoOctalLiteral","failOnOctalString","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","28.00040","define.Parameter","failOnOctalString","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","30.00012","TS.VariableDeclaration","","match","RegExpExecArray",""
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","30.00076","calls","(/*Args:*/<any>node)","getText","any","()"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","30.00076","call.arguments[0]","/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g","exec","any","(/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","30.00076","calls","/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g","exec","RegExpExecArray","((/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","30.00076","Assign","match","","RegExpExecArray","/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","30.00076","ref.type","RegExpExecArray","","",""
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","30.00087","Conditional","match","","/*IfStatement*/ RegExpExecArray/* no Else Clause*/","/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","30.00087","ref.type","RegExpExecArray","","",""
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","33.00016","TS.VariableDeclaration","","octalValue","string",""
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","33.00045","Assign","octalValue","","string","/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3]"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","34.00016","TS.VariableDeclaration","","startOfMatch","any",""
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","34.00037","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","34.00055","calls","(/*Args:*/<any>node)","getText","any","()"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","34.00073","call.arguments[0]","(/*Args:*/<any>node).getText()","indexOf","string","/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3]"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","34.00073","calls","(/*Args:*/<any>node).getText()","indexOf","any","(/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3])"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","34.00073","BinaryExpression","node.getStart()","","+ /*any*/","(/*Args:*/<any>node).getText().indexOf(/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3])"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","34.00073","Assign","startOfMatch","","any","(/*Args:*/<any>node).getStart() + (/*Args:*/<any>node).getText().indexOf(/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3])"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","35.00016","TS.VariableDeclaration","","width","number",""
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","35.00036","Assign","width","","number","/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3].length"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","37.00090","BinaryExpression","Rule","FAILURE_STRING","+ /*string*/","/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3]"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","37.00090","call.arguments[0]","/*<NoOctalLiteral>*/ this","createFailure","any","(/*Args:*/<any>node).getStart() + (/*Args:*/<any>node).getText().indexOf(/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3])"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","37.00090","call.arguments[1]","/*<NoOctalLiteral>*/ this","createFailure","number","/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3].length"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","37.00090","call.arguments[2]","/*<NoOctalLiteral>*/ this","createFailure","string","'Octal literals should not be used: ' + /('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3]"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","37.00090","calls","/*<NoOctalLiteral>*/ this","createFailure","any","((/*Args:*/<any>node).getStart() + (/*Args:*/<any>node).getText().indexOf(/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3]), /('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3].length, 'Octal literals should not be used: ' + /('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3])"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","37.00090","pickUpedName","/*<NoOctalLiteral>*/ this","createFailure","","((/*Args:*/<any>node).getStart() + (/*Args:*/<any>node).getText().indexOf(/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3]), /('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3].length, 'Octal literals should not be used: ' + /('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3])"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","37.00090","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).getStart() + (/*Args:*/<any>node).getText().indexOf(/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3]), /('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3].length, 'Octal literals should not be used: ' + /('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3])"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","37.00090","call.arguments[0]","/*<NoOctalLiteral>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart() + (/*Args:*/<any>node).getText().indexOf(/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3]), /('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3].length, 'Octal literals should not be used: ' + /('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3])"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","37.00090","calls","/*<NoOctalLiteral>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart() + (/*Args:*/<any>node).getText().indexOf(/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3]), /('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3].length, 'Octal literals should not be used: ' + /('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3]))"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","37.00090","pickUpedName","/*<NoOctalLiteral>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart() + (/*Args:*/<any>node).getText().indexOf(/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3]), /('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3].length, 'Octal literals should not be used: ' + /('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3]))"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","37.00090","pickUpedName","/*<NoOctalLiteral>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart() + (/*Args:*/<any>node).getText().indexOf(/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3]), /('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3].length, 'Octal literals should not be used: ' + /('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3]))"
"../tslint-microsoft-contrib-master/src/noOctalLiteralRule.ts","NoOctalLiteral",".failOnOctalString","37.00090","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).getStart() + (/*Args:*/<any>node).getText().indexOf(/('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3]), /('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3].length, 'Octal literals should not be used: ' + /('|')(.*(\\-?[0-7]{1,3}(?![0-9])).*('|'))/g.exec((/*Args:*/<any>node).getText())[3]))"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","Rule","","9.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","Rule","","10.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","Rule","","10.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","Rule","","10.00035","Assign","Rule","FAILURE_STRING","string","'Spaces in regular expressions are hard to count. Use '"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","Rule",".","12.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","Rule",".apply","12.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","Rule",".apply","13.00082","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","Rule",".apply","13.00082","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","Rule",".apply","13.00082","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoRegexSpacesRuleWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","Rule",".apply","13.00082","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoRegexSpacesRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","Rule",".apply","13.00082","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoRegexSpacesRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","Rule",".apply","13.00082","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoRegexSpacesRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","Rule",".apply","13.00082","return","","","any","this.applyWithWalker((new NoRegexSpacesRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","Rule","","18.00006","defined","NoRegexSpacesRuleWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker","","18.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".","21.00014","TS.MethodDefined","NoRegexSpacesRuleWalker","visitRegularExpressionLiteral","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","21.00054","define.Parameter","visitRegularExpressionLiteral","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","22.00012","TS.VariableDeclaration","","match","RegExpExecArray",""
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","22.00060","calls","(/*Args:*/<any>node)","getText","any","()"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","22.00060","call.arguments[0]","/( {2,})+?/","exec","any","(/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","22.00060","calls","/( {2,})+?/","exec","RegExpExecArray","((/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","22.00060","Assign","match","","RegExpExecArray","/( {2,})+?/.exec((/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","22.00060","ref.type","RegExpExecArray","","",""
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","22.00071","Conditional","match != null","","/*IfStatement*/ boolean/* no Else Clause*/","/( {2,})+?/.exec((/*Args:*/<any>node).getText()) != null"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","23.00021","Compare","match","","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","23.00021","CompareR","null","","/*Reverse*/!= /*RegExpExecArray*/","/( {2,})+?/.exec((/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","24.00016","TS.VariableDeclaration","","replacement","string",""
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","24.00054","ref.varName","match[0]","length","number",""
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","24.00054","BinaryExpression","'{'","","+ /*number*/","/( {2,})+?/.exec((/*Args:*/<any>node).getText())[0].length"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","24.00062","BinaryExpression","'{' + match[0].length","","+ /*string*/","'}'"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","24.00062","Assign","replacement","","string","'{' + /( {2,})+?/.exec((/*Args:*/<any>node).getText())[0].length + '}'"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","25.00053","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","25.00070","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","25.00103","BinaryExpression","Rule","FAILURE_STRING","+ /*string*/","'{' + /( {2,})+?/.exec((/*Args:*/<any>node).getText())[0].length + '}'"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","25.00103","call.arguments[0]","/*<NoRegexSpacesRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","25.00103","call.arguments[1]","/*<NoRegexSpacesRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","25.00103","call.arguments[2]","/*<NoRegexSpacesRuleWalker>*/ this","createFailure","string","'Spaces in regular expressions are hard to count. Use {' + /( {2,})+?/.exec((/*Args:*/<any>node).getText())[0].length + '}'"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","25.00103","calls","/*<NoRegexSpacesRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Spaces in regular expressions are hard to count. Use {' + /( {2,})+?/.exec((/*Args:*/<any>node).getText())[0].length + '}')"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","25.00103","pickUpedName","/*<NoRegexSpacesRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Spaces in regular expressions are hard to count. Use {' + /( {2,})+?/.exec((/*Args:*/<any>node).getText())[0].length + '}')"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","25.00103","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Spaces in regular expressions are hard to count. Use {' + /( {2,})+?/.exec((/*Args:*/<any>node).getText())[0].length + '}')"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","25.00103","call.arguments[0]","/*<NoRegexSpacesRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Spaces in regular expressions are hard to count. Use {' + /( {2,})+?/.exec((/*Args:*/<any>node).getText())[0].length + '}')"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","25.00103","calls","/*<NoRegexSpacesRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Spaces in regular expressions are hard to count. Use {' + /( {2,})+?/.exec((/*Args:*/<any>node).getText())[0].length + '}'))"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","25.00103","pickUpedName","/*<NoRegexSpacesRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Spaces in regular expressions are hard to count. Use {' + /( {2,})+?/.exec((/*Args:*/<any>node).getText())[0].length + '}'))"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","25.00103","pickUpedName","/*<NoRegexSpacesRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Spaces in regular expressions are hard to count. Use {' + /( {2,})+?/.exec((/*Args:*/<any>node).getText())[0].length + '}'))"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","25.00103","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Spaces in regular expressions are hard to count. Use {' + /( {2,})+?/.exec((/*Args:*/<any>node).getText())[0].length + '}'))"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","28.00045","call.arguments[0]","super","visitRegularExpressionLiteral","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noRegexSpacesRule.ts","NoRegexSpacesRuleWalker",".visitRegularExpressionLiteral","28.00045","calls","super","visitRegularExpressionLiteral","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule","","9.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule","","10.00019","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule","","10.00036","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule","","10.00036","Assign","Rule","FAILURE_STRING","string","'Forbidden reference to reserved keyword: '"
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule","","13.00019","TS.PropertyDefined","Rule","BANNED_TERMS","string[]","/**
taken from https://github.com/Microsoft/TypeScript/issues/2536
"
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule","","33.00016","TS.PropertyDefined","Rule","BANNED_TERMS","string[]","/**
taken from https://github.com/Microsoft/TypeScript/issues/2536
"
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule","","33.00016","Assign","Rule","BANNED_TERMS","string[]","['break', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'false', 'finally', 'for', 'function', 'if', 'import', 'in', 'instanceof', 'new', 'null', 'return', 'super', 'switch', 'this', 'throw', 'true', 'try', 'typeof', 'var', 'void', 'while', 'with', 'as', 'implements', 'interface', 'let', 'package', 'private', 'protected', 'public', 'static', 'yield', 'any', 'boolean', 'constructor', 'declare', 'get', 'module', 'require', 'number', 'set', 'string', 'symbol', 'type', 'from', 'of']"
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule",".","37.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule",".apply","37.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule",".apply","38.00012","TS.VariableDeclaration","","walker","any",""
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule",".apply","40.00018","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule",".apply","40.00018","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule",".apply","42.00018","Assign","walker","","BannedTermWalker","(new BannedTermWalker((/*Args:*/<any>sourceFile), this.getOptions(), 'Forbidden reference to reserved keyword: ', ['break', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'false', 'finally', 'for', 'function', 'if', 'import', 'in', 'instanceof', 'new', 'null', 'return', 'super', 'switch', 'this', 'throw', 'true', 'try', 'typeof', 'var', 'void', 'while', 'with', 'as', 'implements', 'interface', 'let', 'package', 'private', 'protected', 'public', 'static', 'yield', 'any', 'boolean', 'constructor', 'declare', 'get', 'module', 'require', 'number', 'set', 'string', 'symbol', 'type', 'from', 'of']))"
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule",".apply","42.00018","ref.type","BannedTermWalker","","",""
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule",".apply","42.00018","pickUpedName","/*<Rule>*/ this","getOptions","","(new BannedTermWalker((/*Args:*/<any>sourceFile), this.getOptions(), 'Forbidden reference to reserved keyword: ', ['break', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'false', 'finally', 'for', 'function', 'if', 'import', 'in', 'instanceof', 'new', 'null', 'return', 'super', 'switch', 'this', 'throw', 'true', 'try', 'typeof', 'var', 'void', 'while', 'with', 'as', 'implements', 'interface', 'let', 'package', 'private', 'protected', 'public', 'static', 'yield', 'any', 'boolean', 'constructor', 'declare', 'get', 'module', 'require', 'number', 'set', 'string', 'symbol', 'type', 'from', 'of']))"
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule",".apply","42.00018","pickUpedName","Rule","FAILURE_STRING","","(new BannedTermWalker((/*Args:*/<any>sourceFile), this.getOptions(), 'Forbidden reference to reserved keyword: ', ['break', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'false', 'finally', 'for', 'function', 'if', 'import', 'in', 'instanceof', 'new', 'null', 'return', 'super', 'switch', 'this', 'throw', 'true', 'try', 'typeof', 'var', 'void', 'while', 'with', 'as', 'implements', 'interface', 'let', 'package', 'private', 'protected', 'public', 'static', 'yield', 'any', 'boolean', 'constructor', 'declare', 'get', 'module', 'require', 'number', 'set', 'string', 'symbol', 'type', 'from', 'of']))"
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule",".apply","42.00018","pickUpedName","Rule","BANNED_TERMS","","(new BannedTermWalker((/*Args:*/<any>sourceFile), this.getOptions(), 'Forbidden reference to reserved keyword: ', ['break', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'false', 'finally', 'for', 'function', 'if', 'import', 'in', 'instanceof', 'new', 'null', 'return', 'super', 'switch', 'this', 'throw', 'true', 'try', 'typeof', 'var', 'void', 'while', 'with', 'as', 'implements', 'interface', 'let', 'package', 'private', 'protected', 'public', 'static', 'yield', 'any', 'boolean', 'constructor', 'declare', 'get', 'module', 'require', 'number', 'set', 'string', 'symbol', 'type', 'from', 'of']))"
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule",".apply","44.00037","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new BannedTermWalker((/*Args:*/<any>sourceFile), this.getOptions(), 'Forbidden reference to reserved keyword: ', ['break', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'false', 'finally', 'for', 'function', 'if', 'import', 'in', 'instanceof', 'new', 'null', 'return', 'super', 'switch', 'this', 'throw', 'true', 'try', 'typeof', 'var', 'void', 'while', 'with', 'as', 'implements', 'interface', 'let', 'package', 'private', 'protected', 'public', 'static', 'yield', 'any', 'boolean', 'constructor', 'declare', 'get', 'module', 'require', 'number', 'set', 'string', 'symbol', 'type', 'from', 'of']))"
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule",".apply","44.00037","calls","/*<Rule>*/ this","applyWithWalker","any","((new BannedTermWalker((/*Args:*/<any>sourceFile), this.getOptions(), 'Forbidden reference to reserved keyword: ', ['break', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'false', 'finally', 'for', 'function', 'if', 'import', 'in', 'instanceof', 'new', 'null', 'return', 'super', 'switch', 'this', 'throw', 'true', 'try', 'typeof', 'var', 'void', 'while', 'with', 'as', 'implements', 'interface', 'let', 'package', 'private', 'protected', 'public', 'static', 'yield', 'any', 'boolean', 'constructor', 'declare', 'get', 'module', 'require', 'number', 'set', 'string', 'symbol', 'type', 'from', 'of'])))"
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule",".apply","44.00037","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new BannedTermWalker((/*Args:*/<any>sourceFile), this.getOptions(), 'Forbidden reference to reserved keyword: ', ['break', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'false', 'finally', 'for', 'function', 'if', 'import', 'in', 'instanceof', 'new', 'null', 'return', 'super', 'switch', 'this', 'throw', 'true', 'try', 'typeof', 'var', 'void', 'while', 'with', 'as', 'implements', 'interface', 'let', 'package', 'private', 'protected', 'public', 'static', 'yield', 'any', 'boolean', 'constructor', 'declare', 'get', 'module', 'require', 'number', 'set', 'string', 'symbol', 'type', 'from', 'of'])))"
"../tslint-microsoft-contrib-master/src/noReservedKeywordsRule.ts","Rule",".apply","44.00037","return","","","any","this.applyWithWalker((new BannedTermWalker((/*Args:*/<any>sourceFile), this.getOptions(), 'Forbidden reference to reserved keyword: ', ['break', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'false', 'finally', 'for', 'function', 'if', 'import', 'in', 'instanceof', 'new', 'null', 'return', 'super', 'switch', 'this', 'throw', 'true', 'try', 'typeof', 'var', 'void', 'while', 'with', 'as', 'implements', 'interface', 'let', 'package', 'private', 'protected', 'public', 'static', 'yield', 'any', 'boolean', 'constructor', 'declare', 'get', 'module', 'require', 'number', 'set', 'string', 'symbol', 'type', 'from', 'of'])))"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","Rule","","11.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","Rule","","12.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","Rule","","12.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","Rule","","12.00035","Assign","Rule","FAILURE_STRING","string","'Unexpected comma in middle of array'"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","Rule",".","14.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","Rule",".apply","14.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","Rule",".apply","15.00083","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","Rule",".apply","15.00083","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","Rule",".apply","15.00083","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoSparseArraysRuleWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","Rule",".apply","15.00083","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoSparseArraysRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","Rule",".apply","15.00083","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoSparseArraysRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","Rule",".apply","15.00083","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoSparseArraysRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","Rule",".apply","15.00083","return","","","any","this.applyWithWalker((new NoSparseArraysRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","Rule","","20.00006","defined","NoSparseArraysRuleWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker","","20.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".","22.00014","TS.MethodDefined","NoSparseArraysRuleWalker","visitNode","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","22.00034","define.Parameter","visitNode","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","22.00047","Conditional","node.kind === SyntaxKind.current().ArrayLiteralExpression","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).kind === SyntaxKind.current().ArrayLiteralExpression"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","23.00038","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","23.00048","ref.varName","SyntaxKind.current()","ArrayLiteralExpression","number",""
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","23.00048","Compare","node","kind","=== /*number*/","SyntaxKind.current().ArrayLiteralExpression"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","23.00048","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).kind"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","23.00073","Conditional","/*<NoSparseArraysRuleWalker>*/ this.isSparseArray(node)","","/*IfStatement*/ boolean/* no Else Clause*/","this.isSparseArray((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","24.00063","call.arguments[0]","/*<NoSparseArraysRuleWalker>*/ this","isSparseArray","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","24.00063","calls","/*<NoSparseArraysRuleWalker>*/ this","isSparseArray","boolean","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","24.00063","pickUpedName","/*<NoSparseArraysRuleWalker>*/ this","isSparseArray","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","25.00057","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","25.00074","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","25.00091","call.arguments[0]","/*<NoSparseArraysRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","25.00091","call.arguments[1]","/*<NoSparseArraysRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","25.00091","call.arguments[2]","/*<NoSparseArraysRuleWalker>*/ this","createFailure","string","'Unexpected comma in middle of array'"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","25.00091","calls","/*<NoSparseArraysRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Unexpected comma in middle of array')"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","25.00091","pickUpedName","/*<NoSparseArraysRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Unexpected comma in middle of array')"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","25.00091","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Unexpected comma in middle of array')"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","25.00091","call.arguments[0]","/*<NoSparseArraysRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Unexpected comma in middle of array')"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","25.00091","calls","/*<NoSparseArraysRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Unexpected comma in middle of array'))"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","25.00091","pickUpedName","/*<NoSparseArraysRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Unexpected comma in middle of array'))"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","25.00091","pickUpedName","/*<NoSparseArraysRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Unexpected comma in middle of array'))"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","25.00091","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Unexpected comma in middle of array'))"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","28.00025","call.arguments[0]","super","visitNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".visitNode","28.00025","calls","super","visitNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".","31.00012","TS.MethodDefined","NoSparseArraysRuleWalker","isSparseArray","(node: any) => boolean","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".isSparseArray","31.00036","define.Parameter","isSparseArray","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".isSparseArray;Utils.exists(Arguments[1])","32.00043","call.func","Utils","exists","(element: any) => boolean",""
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".isSparseArray;Utils.exists(Arguments[1])","32.00057","define.Parameter","element","","any","/*Args:*/<any>element"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".isSparseArray;Utils.exists(Arguments[1])","33.00048","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".isSparseArray;Utils.exists(Arguments[1])","33.00058","ref.varName","SyntaxKind.current()","OmittedExpression","number",""
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".isSparseArray;Utils.exists(Arguments[1])","33.00058","Compare","element","kind","=== /*number*/","SyntaxKind.current().OmittedExpression"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".isSparseArray;Utils.exists(Arguments[1])","33.00058","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>element).kind"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".isSparseArray;Utils.exists(Arguments[1])","33.00058","return","","","boolean","(/*Args:*/<any>element).kind === SyntaxKind.current().OmittedExpression"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".isSparseArray","33.00058","call.arguments[0]","Utils","exists","any","(/*Args:*/<any>node).elements"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".isSparseArray","33.00058","call.arguments[1]","Utils","exists","(element: any) => boolean","/**(element: any) => boolean**/"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".isSparseArray","33.00058","calls","Utils","exists","boolean","((/*Args:*/<any>node).elements, /**(element: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/noSparseArraysRule.ts","NoSparseArraysRuleWalker",".isSparseArray","33.00058","return","","","boolean","Utils.exists((/*Args:*/<any>node).elements, /**(element: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule","","9.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".","11.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","11.00034","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","12.00012","TS.VariableDeclaration","","documentRegistry","any",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","12.00035","calls","ts","createDocumentRegistry","any","()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","12.00035","Assign","documentRegistry","","any","ts.createDocumentRegistry()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","13.00012","TS.VariableDeclaration","","languageServiceHost","any",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","13.00088","calls","(/*Args:*/<any>sourceFile)","getFullText","any","()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","13.00088","call.arguments[0]","Lint","createLanguageServiceHost","string","'file.ts'"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","13.00088","call.arguments[1]","Lint","createLanguageServiceHost","any","(/*Args:*/<any>sourceFile).getFullText()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","13.00088","calls","Lint","createLanguageServiceHost","any","('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","13.00088","Assign","languageServiceHost","","any","Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","14.00012","TS.VariableDeclaration","","languageService","any",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","14.00076","call.arguments[0]","ts","createLanguageService","any","Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","14.00076","call.arguments[1]","ts","createLanguageService","any","ts.createDocumentRegistry()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","14.00076","calls","ts","createLanguageService","any","(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","14.00076","Assign","languageService","","any","ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","16.00012","TS.VariableDeclaration","","walker","any",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","17.00047","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","17.00047","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","17.00060","Assign","walker","","NoStringParameterToFunctionCallWalker","(new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setImmediate', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())))"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","17.00060","ref.type","NoStringParameterToFunctionCallWalker","","",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","17.00060","pickUpedName","/*<Rule>*/ this","getOptions","","(new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setImmediate', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())))"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","19.00037","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setImmediate', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())))"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","19.00037","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setImmediate', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","19.00037","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setImmediate', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/noStringBasedSetImmediateRule.ts","Rule",".apply","19.00037","return","","","any","this.applyWithWalker((new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setImmediate', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule","","9.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".","11.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","11.00034","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","12.00012","TS.VariableDeclaration","","documentRegistry","any",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","12.00035","calls","ts","createDocumentRegistry","any","()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","12.00035","Assign","documentRegistry","","any","ts.createDocumentRegistry()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","13.00012","TS.VariableDeclaration","","languageServiceHost","any",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","13.00088","calls","(/*Args:*/<any>sourceFile)","getFullText","any","()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","13.00088","call.arguments[0]","Lint","createLanguageServiceHost","string","'file.ts'"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","13.00088","call.arguments[1]","Lint","createLanguageServiceHost","any","(/*Args:*/<any>sourceFile).getFullText()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","13.00088","calls","Lint","createLanguageServiceHost","any","('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","13.00088","Assign","languageServiceHost","","any","Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","14.00012","TS.VariableDeclaration","","languageService","any",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","14.00076","call.arguments[0]","ts","createLanguageService","any","Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","14.00076","call.arguments[1]","ts","createLanguageService","any","ts.createDocumentRegistry()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","14.00076","calls","ts","createLanguageService","any","(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","14.00076","Assign","languageService","","any","ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","16.00012","TS.VariableDeclaration","","walker","any",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","17.00046","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","17.00046","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","17.00059","Assign","walker","","NoStringParameterToFunctionCallWalker","(new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setInterval', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())))"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","17.00059","ref.type","NoStringParameterToFunctionCallWalker","","",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","17.00059","pickUpedName","/*<Rule>*/ this","getOptions","","(new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setInterval', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())))"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","19.00037","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setInterval', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())))"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","19.00037","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setInterval', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","19.00037","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setInterval', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/noStringBasedSetIntervalRule.ts","Rule",".apply","19.00037","return","","","any","this.applyWithWalker((new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setInterval', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule","","9.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".","11.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","11.00034","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","12.00012","TS.VariableDeclaration","","documentRegistry","any",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","12.00035","calls","ts","createDocumentRegistry","any","()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","12.00035","Assign","documentRegistry","","any","ts.createDocumentRegistry()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","13.00012","TS.VariableDeclaration","","languageServiceHost","any",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","13.00088","calls","(/*Args:*/<any>sourceFile)","getFullText","any","()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","13.00088","call.arguments[0]","Lint","createLanguageServiceHost","string","'file.ts'"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","13.00088","call.arguments[1]","Lint","createLanguageServiceHost","any","(/*Args:*/<any>sourceFile).getFullText()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","13.00088","calls","Lint","createLanguageServiceHost","any","('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","13.00088","Assign","languageServiceHost","","any","Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","14.00012","TS.VariableDeclaration","","languageService","any",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","14.00076","call.arguments[0]","ts","createLanguageService","any","Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","14.00076","call.arguments[1]","ts","createLanguageService","any","ts.createDocumentRegistry()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","14.00076","calls","ts","createLanguageService","any","(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","14.00076","Assign","languageService","","any","ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","16.00012","TS.VariableDeclaration","","walker","any",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","17.00045","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","17.00045","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","17.00058","Assign","walker","","NoStringParameterToFunctionCallWalker","(new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setTimeout', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())))"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","17.00058","ref.type","NoStringParameterToFunctionCallWalker","","",""
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","17.00058","pickUpedName","/*<Rule>*/ this","getOptions","","(new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setTimeout', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())))"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","19.00037","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setTimeout', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())))"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","19.00037","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setTimeout', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","19.00037","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setTimeout', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/noStringBasedSetTimeoutRule.ts","Rule",".apply","19.00037","return","","","any","this.applyWithWalker((new NoStringParameterToFunctionCallWalker((/*Args:*/<any>sourceFile), 'setTimeout', this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule","","11.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule","","12.00018","TS.PropertyDefined","Rule","FAILURE_FUNCTION_WITH_BIND","string",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule","","12.00047","TS.PropertyDefined","Rule","FAILURE_FUNCTION_WITH_BIND","string",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule","","12.00047","Assign","Rule","FAILURE_FUNCTION_WITH_BIND","string","'Binding function literal with 'this' context. Use lambdas instead'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule","","13.00018","TS.PropertyDefined","Rule","FAILURE_ARROW_WITH_BIND","string",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule","","13.00044","TS.PropertyDefined","Rule","FAILURE_ARROW_WITH_BIND","string",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule","","13.00044","Assign","Rule","FAILURE_ARROW_WITH_BIND","string","'Binding lambda with 'this' context. Lambdas already have 'this' bound'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule","","15.00018","TS.PropertyDefined","Rule","UNDERSCORE_BINARY_FUNCTION_NAMES","string[]",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule","","19.00053","TS.PropertyDefined","Rule","UNDERSCORE_BINARY_FUNCTION_NAMES","string[]",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule","","19.00053","Assign","Rule","UNDERSCORE_BINARY_FUNCTION_NAMES","string[]","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique']"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule","","21.00018","TS.PropertyDefined","Rule","UNDERSCORE_TERNARY_FUNCTION_NAMES","string[]",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule","","22.00046","TS.PropertyDefined","Rule","UNDERSCORE_TERNARY_FUNCTION_NAMES","string[]",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule","","22.00046","Assign","Rule","UNDERSCORE_TERNARY_FUNCTION_NAMES","string[]","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight']"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule",".","25.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule",".apply","25.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule",".apply","26.00086","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule",".apply","26.00086","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule",".apply","26.00086","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoUnnecessaryBindRuleWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule",".apply","26.00086","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoUnnecessaryBindRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule",".apply","26.00086","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoUnnecessaryBindRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule",".apply","26.00086","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoUnnecessaryBindRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule",".apply","26.00086","return","","","any","this.applyWithWalker((new NoUnnecessaryBindRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","Rule","","30.00006","defined","NoUnnecessaryBindRuleWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker","","30.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".","32.00014","TS.MethodDefined","NoUnnecessaryBindRuleWalker","visitCallExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression","32.00044","define.Parameter","visitCallExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression","34.00012","TS.VariableDeclaration","","analyzers","CallAnalyzer[]",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression","35.00082","Assign","analyzers","","TypeScriptFunctionAnalyzer[]","[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())]"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression","35.00082","ref.type","TypeScriptFunctionAnalyzer","","",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","38.00027","call.func","[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())]","forEach","(analyzer: CallAnalyzer) => void",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","38.00027","pickUpedName","analyzers","forEach","","[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","38.00037","define.Parameter","analyzer","","CallAnalyzer","/*Args:*/<CallAnalyzer>analyzer"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","38.00037","ref.type","CallAnalyzer","","",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","38.00062","Conditional","analyzer.canHandle(node)","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<CallAnalyzer>analyzer).canHandle((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","39.00036","call.arguments[0]","(/*Args:*/<CallAnalyzer>analyzer)","canHandle","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","39.00036","calls","(/*Args:*/<CallAnalyzer>analyzer)","canHandle","boolean","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","39.00036","pickUpedName","node","","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","40.00020","TS.VariableDeclaration","","contextArgument","any",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","40.00082","call.arguments[0]","(/*Args:*/<CallAnalyzer>analyzer)","getContextArgument","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","40.00082","calls","(/*Args:*/<CallAnalyzer>analyzer)","getContextArgument","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","40.00082","pickUpedName","node","","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","40.00082","Assign","contextArgument","","any","(/*Args:*/<CallAnalyzer>analyzer).getContextArgument((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","40.00082","pickUpedName","node","","","(/*Args:*/<CallAnalyzer>analyzer).getContextArgument((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","41.00020","TS.VariableDeclaration","","functionArgument","any",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","41.00084","call.arguments[0]","(/*Args:*/<CallAnalyzer>analyzer)","getFunctionArgument","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","41.00084","calls","(/*Args:*/<CallAnalyzer>analyzer)","getFunctionArgument","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","41.00084","pickUpedName","node","","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","41.00084","Assign","functionArgument","","any","(/*Args:*/<CallAnalyzer>analyzer).getFunctionArgument((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","41.00084","pickUpedName","node","","","(/*Args:*/<CallAnalyzer>analyzer).getFunctionArgument((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","41.00090","Conditional","contextArgument == null || functionArgument == null","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<CallAnalyzer>analyzer).getContextArgument((/*Args:*/<any>node)) == null || (/*Args:*/<CallAnalyzer>analyzer).getFunctionArgument((/*Args:*/<any>node)) == null"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","42.00039","Compare","contextArgument","","== /*null*/","null"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","42.00039","CompareR","null","","/*Reverse*/== /*any*/","(/*Args:*/<CallAnalyzer>analyzer).getContextArgument((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","42.00067","Compare","functionArgument","","== /*null*/","null"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","42.00067","CompareR","null","","/*Reverse*/== /*any*/","(/*Args:*/<CallAnalyzer>analyzer).getFunctionArgument((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","42.00067","BinaryExpression","contextArgument == null","","|| /*boolean*/","(/*Args:*/<CallAnalyzer>analyzer).getFunctionArgument((/*Args:*/<any>node)) == null"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","42.00075","return","","","void",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","44.00018","Conditional","contextArgument.getText() === 'this'","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<CallAnalyzer>analyzer).getContextArgument((/*Args:*/<any>node)).getText() === 'this'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","45.00037","calls","(/*Args:*/<CallAnalyzer>analyzer).getContextArgument((/*Args:*/<any>node))","getText","any","()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","45.00050","Compare","contextArgument.getText()","","=== /*string*/","'this'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","45.00050","CompareR","'this'","","/*Reverse*/=== /*any*/","(/*Args:*/<CallAnalyzer>analyzer).getContextArgument((/*Args:*/<any>node)).getText()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","45.00060","Conditional","isArrowFunction(functionArgument)","","/*IfStatement*/ boolean","isArrowFunction((/*Args:*/<CallAnalyzer>analyzer).getFunctionArgument((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","46.00041","call.arguments[0]","isArrowFunction","","any","(/*Args:*/<CallAnalyzer>analyzer).getFunctionArgument((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","46.00041","calls","isArrowFunction","","boolean","((/*Args:*/<CallAnalyzer>analyzer).getFunctionArgument((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00065","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00065","pickUpedName","node","getStart","","()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00082","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00082","pickUpedName","node","getWidth","","()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00099","call.arguments[0]","/*<NoUnnecessaryBindRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00099","call.arguments[1]","/*<NoUnnecessaryBindRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00099","call.arguments[2]","/*<NoUnnecessaryBindRuleWalker>*/ this","createFailure","string","'Binding lambda with 'this' context. Lambdas already have 'this' bound'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00099","calls","/*<NoUnnecessaryBindRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding lambda with 'this' context. Lambdas already have 'this' bound')"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00099","pickUpedName","/*<NoUnnecessaryBindRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding lambda with 'this' context. Lambdas already have 'this' bound')"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00099","pickUpedName","node","getStart","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding lambda with 'this' context. Lambdas already have 'this' bound')"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00099","pickUpedName","node","getWidth","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding lambda with 'this' context. Lambdas already have 'this' bound')"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00099","pickUpedName","Rule","FAILURE_ARROW_WITH_BIND","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding lambda with 'this' context. Lambdas already have 'this' bound')"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00099","call.arguments[0]","/*<NoUnnecessaryBindRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding lambda with 'this' context. Lambdas already have 'this' bound')"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00099","calls","/*<NoUnnecessaryBindRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding lambda with 'this' context. Lambdas already have 'this' bound'))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00099","pickUpedName","/*<NoUnnecessaryBindRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding lambda with 'this' context. Lambdas already have 'this' bound'))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00099","pickUpedName","/*<NoUnnecessaryBindRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding lambda with 'this' context. Lambdas already have 'this' bound'))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00099","pickUpedName","node","getStart","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding lambda with 'this' context. Lambdas already have 'this' bound'))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00099","pickUpedName","node","getWidth","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding lambda with 'this' context. Lambdas already have 'this' bound'))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","47.00099","pickUpedName","Rule","FAILURE_ARROW_WITH_BIND","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding lambda with 'this' context. Lambdas already have 'this' bound'))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","48.00027","Conditional","isFunctionLiteral(functionArgument)","","/*IfStatement*/ boolean/* no Else Clause*/","isFunctionLiteral((/*Args:*/<CallAnalyzer>analyzer).getFunctionArgument((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","48.00050","call.arguments[0]","isFunctionLiteral","","any","(/*Args:*/<CallAnalyzer>analyzer).getFunctionArgument((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","48.00050","calls","isFunctionLiteral","","boolean","((/*Args:*/<CallAnalyzer>analyzer).getFunctionArgument((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00065","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00065","pickUpedName","node","getStart","","()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00082","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00082","pickUpedName","node","getWidth","","()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00099","call.arguments[0]","/*<NoUnnecessaryBindRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00099","call.arguments[1]","/*<NoUnnecessaryBindRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00099","call.arguments[2]","/*<NoUnnecessaryBindRuleWalker>*/ this","createFailure","string","'Binding function literal with 'this' context. Use lambdas instead'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00099","calls","/*<NoUnnecessaryBindRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding function literal with 'this' context. Use lambdas instead')"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00099","pickUpedName","/*<NoUnnecessaryBindRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding function literal with 'this' context. Use lambdas instead')"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00099","pickUpedName","node","getStart","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding function literal with 'this' context. Use lambdas instead')"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00099","pickUpedName","node","getWidth","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding function literal with 'this' context. Use lambdas instead')"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00099","pickUpedName","Rule","FAILURE_FUNCTION_WITH_BIND","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding function literal with 'this' context. Use lambdas instead')"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00099","call.arguments[0]","/*<NoUnnecessaryBindRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding function literal with 'this' context. Use lambdas instead')"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00099","calls","/*<NoUnnecessaryBindRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding function literal with 'this' context. Use lambdas instead'))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00099","pickUpedName","/*<NoUnnecessaryBindRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding function literal with 'this' context. Use lambdas instead'))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00099","pickUpedName","/*<NoUnnecessaryBindRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding function literal with 'this' context. Use lambdas instead'))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00099","pickUpedName","node","getStart","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding function literal with 'this' context. Use lambdas instead'))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00099","pickUpedName","node","getWidth","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding function literal with 'this' context. Use lambdas instead'))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression;[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())].forEach(Arguments[0])","49.00099","pickUpedName","Rule","FAILURE_FUNCTION_WITH_BIND","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Binding function literal with 'this' context. Use lambdas instead'))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression","49.00099","call.arguments[0]","[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())]","forEach","(analyzer: CallAnalyzer) => void","/**(analyzer: CallAnalyzer) => void**/"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression","49.00099","calls","[(new TypeScriptFunctionAnalyzer()), (new UnderscoreStaticAnalyzer()), (new UnderscoreInstanceAnalyzer())]","forEach","void","(/**(analyzer: CallAnalyzer) => void**/)"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression","54.00035","call.arguments[0]","super","visitCallExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker",".visitCallExpression","54.00035","calls","super","visitCallExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","NoUnnecessaryBindRuleWalker","","58.00010","defined","CallAnalyzer","","TS.Interface","
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","CallAnalyzer",".","58.00025","TS.MethodDefined","CallAnalyzer","canHandle","(node: any) => boolean","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","CallAnalyzer",".canHandle","59.00024","define.Parameter","canHandle","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","CallAnalyzer",".","59.00049","TS.MethodDefined","CallAnalyzer","getContextArgument","(node: any) => any","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","CallAnalyzer",".getContextArgument","60.00033","define.Parameter","getContextArgument","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","CallAnalyzer",".","60.00064","TS.MethodDefined","CallAnalyzer","getFunctionArgument","(node: any) => any","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","CallAnalyzer",".getFunctionArgument","61.00034","define.Parameter","getFunctionArgument","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","CallAnalyzer","","64.00006","defined","TypeScriptFunctionAnalyzer","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer","","64.00006","ref.type","CallAnalyzer","","implements",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".","65.00011","TS.MethodDefined","TypeScriptFunctionAnalyzer","canHandle","(node: any) => boolean","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".canHandle","65.00031","define.Parameter","canHandle","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".canHandle","66.00044","call.arguments[0]","AstUtils","getFunctionName","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".canHandle","66.00044","calls","AstUtils","getFunctionName","string","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".canHandle","66.00053","Compare","AstUtils.getFunctionName(node)","","=== /*string*/","'bind'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".canHandle","66.00053","CompareR","'bind'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".canHandle","67.00041","Compare","node.arguments","length","=== /*number*/","1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".canHandle","67.00041","CompareR","1","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).arguments.length"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".canHandle","67.00041","BinaryExpression","AstUtils.getFunctionName(node) === 'bind'","","&& /*boolean*/","(/*Args:*/<any>node).arguments.length === 1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".canHandle","68.00052","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".canHandle","68.00062","ref.varName","SyntaxKind.current()","PropertyAccessExpression","number",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".canHandle","68.00062","Compare","node.expression","kind","=== /*number*/","SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".canHandle","68.00062","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.kind"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".canHandle","68.00062","BinaryExpression","AstUtils.getFunctionName(node) === 'bind' && node.arguments.length === 1","","&& /*boolean*/","(/*Args:*/<any>node).expression.kind === SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".canHandle","68.00062","return","","","boolean","! ! (AstUtils.getFunctionName((/*Args:*/<any>node)) === 'bind' && (/*Args:*/<any>node).arguments.length === 1 && (/*Args:*/<any>node).expression.kind === SyntaxKind.current().PropertyAccessExpression)"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".","71.00011","TS.MethodDefined","TypeScriptFunctionAnalyzer","getContextArgument","(node: any) => any","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".getContextArgument","71.00040","define.Parameter","getContextArgument","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".getContextArgument","72.00031","return","","","any","(/*Args:*/<any>node).arguments[0]"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".","75.00011","TS.MethodDefined","TypeScriptFunctionAnalyzer","getFunctionArgument","(node: any) => any","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".getFunctionArgument","75.00041","define.Parameter","getFunctionArgument","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer",".getFunctionArgument","76.00063","return","","","any","((/*Args:*/<any>node).expression).expression"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","TypeScriptFunctionAnalyzer","","80.00006","defined","UnderscoreStaticAnalyzer","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer","","80.00006","ref.type","CallAnalyzer","","implements",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".","81.00011","TS.MethodDefined","UnderscoreStaticAnalyzer","canHandle","(node: any) => boolean","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","81.00031","define.Parameter","canHandle","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","82.00012","TS.VariableDeclaration","","isUnderscore","boolean",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","82.00064","call.arguments[0]","AstUtils","getFunctionTarget","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","82.00064","calls","AstUtils","getFunctionTarget","string","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","82.00073","Compare","AstUtils.getFunctionTarget(node)","","=== /*string*/","'_'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","82.00073","CompareR","'_'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionTarget((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","82.00073","Assign","isUnderscore","","boolean","AstUtils.getFunctionTarget((/*Args:*/<any>node)) === '_'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","82.00078","Conditional","isUnderscore","","/*IfStatement*/ boolean/* no Else Clause*/","AstUtils.getFunctionTarget((/*Args:*/<any>node)) === '_'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","84.00016","TS.VariableDeclaration","","functionName","string",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","84.00065","call.arguments[0]","AstUtils","getFunctionName","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","84.00065","calls","AstUtils","getFunctionName","string","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","84.00065","Assign","functionName","","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","84.00071","Conditional","functionName === 'bind'","","/*IfStatement*/ boolean/* no Else Clause*/","AstUtils.getFunctionName((/*Args:*/<any>node)) === 'bind'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","85.00033","Compare","functionName","","=== /*string*/","'bind'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","85.00033","CompareR","'bind'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","86.00049","Compare","node.arguments","length","=== /*number*/","2"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","86.00049","CompareR","2","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).arguments.length"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","86.00049","return","","","boolean","(/*Args:*/<any>node).arguments.length === 2"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".canHandle","89.00015","return","","","boolean","AstUtils.getFunctionTarget((/*Args:*/<any>node)) === '_'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".","92.00011","TS.MethodDefined","UnderscoreStaticAnalyzer","getContextArgument","(node: any) => any","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","92.00040","define.Parameter","getContextArgument","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","93.00012","TS.VariableDeclaration","","functionName","string",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","93.00061","call.arguments[0]","AstUtils","getFunctionName","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","93.00061","calls","AstUtils","getFunctionName","string","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","93.00061","Assign","functionName","","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","93.00067","Conditional","Rule.UNDERSCORE_BINARY_FUNCTION_NAMES.indexOf(functionName) !== - 1","","/*IfStatement*/ boolean","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node))) !== - 1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","94.00059","call.arguments[0]","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique']","indexOf","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","94.00059","calls","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique']","indexOf","number","(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","94.00059","pickUpedName","Rule.UNDERSCORE_BINARY_FUNCTION_NAMES","indexOf","","(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","94.00078","Compare","Rule.UNDERSCORE_BINARY_FUNCTION_NAMES.indexOf(functionName)","","!== /*number*/","- 1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","94.00078","CompareR","- 1","","/*Reverse*/!== /*number*/","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","94.00078","pickUpedName","Rule.UNDERSCORE_BINARY_FUNCTION_NAMES","indexOf","","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","95.00035","return","","","any","(/*Args:*/<any>node).arguments[2]"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","96.00015","Conditional","Rule.UNDERSCORE_TERNARY_FUNCTION_NAMES.indexOf(functionName) !== - 1","","/*IfStatement*/ boolean","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node))) !== - 1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","96.00067","call.arguments[0]","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight']","indexOf","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","96.00067","calls","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight']","indexOf","number","(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","96.00067","pickUpedName","Rule.UNDERSCORE_TERNARY_FUNCTION_NAMES","indexOf","","(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","96.00086","Compare","Rule.UNDERSCORE_TERNARY_FUNCTION_NAMES.indexOf(functionName)","","!== /*number*/","- 1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","96.00086","CompareR","- 1","","/*Reverse*/!== /*number*/","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","96.00086","pickUpedName","Rule.UNDERSCORE_TERNARY_FUNCTION_NAMES","indexOf","","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","97.00035","return","","","any","(/*Args:*/<any>node).arguments[3]"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","98.00015","Conditional","functionName === 'sortedIndex'","","/*IfStatement*/ boolean","AstUtils.getFunctionName((/*Args:*/<any>node)) === 'sortedIndex'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","98.00036","Compare","functionName","","=== /*string*/","'sortedIndex'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","98.00036","CompareR","'sortedIndex'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","99.00035","return","","","any","(/*Args:*/<any>node).arguments[3]"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","100.00015","Conditional","functionName === 'bind'","","/*IfStatement*/ boolean/* no Else Clause*/","AstUtils.getFunctionName((/*Args:*/<any>node)) === 'bind'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","100.00036","Compare","functionName","","=== /*string*/","'bind'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","100.00036","CompareR","'bind'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","101.00035","return","","","any","(/*Args:*/<any>node).arguments[1]"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getContextArgument","103.00015","return","","","null","null"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".","106.00011","TS.MethodDefined","UnderscoreStaticAnalyzer","getFunctionArgument","(node: any) => any","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","106.00041","define.Parameter","getFunctionArgument","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","107.00012","TS.VariableDeclaration","","functionName","string",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","107.00061","call.arguments[0]","AstUtils","getFunctionName","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","107.00061","calls","AstUtils","getFunctionName","string","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","107.00061","Assign","functionName","","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","107.00067","Conditional","Rule.UNDERSCORE_BINARY_FUNCTION_NAMES.indexOf(functionName) !== - 1","","/*IfStatement*/ boolean","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node))) !== - 1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","108.00059","call.arguments[0]","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique']","indexOf","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","108.00059","calls","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique']","indexOf","number","(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","108.00059","pickUpedName","Rule.UNDERSCORE_BINARY_FUNCTION_NAMES","indexOf","","(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","108.00078","Compare","Rule.UNDERSCORE_BINARY_FUNCTION_NAMES.indexOf(functionName)","","!== /*number*/","- 1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","108.00078","CompareR","- 1","","/*Reverse*/!== /*number*/","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","108.00078","pickUpedName","Rule.UNDERSCORE_BINARY_FUNCTION_NAMES","indexOf","","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","109.00035","return","","","any","(/*Args:*/<any>node).arguments[1]"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","110.00015","Conditional","Rule.UNDERSCORE_TERNARY_FUNCTION_NAMES.indexOf(functionName) !== - 1","","/*IfStatement*/ boolean","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node))) !== - 1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","110.00067","call.arguments[0]","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight']","indexOf","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","110.00067","calls","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight']","indexOf","number","(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","110.00067","pickUpedName","Rule.UNDERSCORE_TERNARY_FUNCTION_NAMES","indexOf","","(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","110.00086","Compare","Rule.UNDERSCORE_TERNARY_FUNCTION_NAMES.indexOf(functionName)","","!== /*number*/","- 1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","110.00086","CompareR","- 1","","/*Reverse*/!== /*number*/","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","110.00086","pickUpedName","Rule.UNDERSCORE_TERNARY_FUNCTION_NAMES","indexOf","","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","111.00035","return","","","any","(/*Args:*/<any>node).arguments[1]"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","112.00015","Conditional","functionName === 'sortedIndex'","","/*IfStatement*/ boolean","AstUtils.getFunctionName((/*Args:*/<any>node)) === 'sortedIndex'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","112.00036","Compare","functionName","","=== /*string*/","'sortedIndex'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","112.00036","CompareR","'sortedIndex'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","113.00035","return","","","any","(/*Args:*/<any>node).arguments[2]"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","114.00015","Conditional","functionName === 'bind'","","/*IfStatement*/ boolean/* no Else Clause*/","AstUtils.getFunctionName((/*Args:*/<any>node)) === 'bind'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","114.00036","Compare","functionName","","=== /*string*/","'bind'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","114.00036","CompareR","'bind'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","115.00035","return","","","any","(/*Args:*/<any>node).arguments[0]"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer",".getFunctionArgument","117.00015","return","","","null","null"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreStaticAnalyzer","","121.00006","defined","UnderscoreInstanceAnalyzer","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer","","121.00006","ref.type","CallAnalyzer","","implements",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".","122.00011","TS.MethodDefined","UnderscoreInstanceAnalyzer","canHandle","(node: any) => boolean","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","122.00031","define.Parameter","canHandle","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","122.00057","Conditional","node.expression.kind === SyntaxKind.current().PropertyAccessExpression","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).expression.kind === SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","123.00049","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","123.00059","ref.varName","SyntaxKind.current()","PropertyAccessExpression","number",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","123.00059","Compare","node.expression","kind","=== /*number*/","SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","123.00059","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.kind"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","124.00016","TS.VariableDeclaration","","propExpression","any",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","124.00097","Assign","propExpression","","any","(/*Args:*/<any>node).expression"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","124.00108","Conditional","propExpression.expression.kind === SyntaxKind.current().CallExpression","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).expression.expression.kind === SyntaxKind.current().CallExpression"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","125.00063","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","125.00073","ref.varName","SyntaxKind.current()","CallExpression","number",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","125.00073","Compare","propExpression.expression","kind","=== /*number*/","SyntaxKind.current().CallExpression"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","125.00073","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.expression.kind"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","126.00020","TS.VariableDeclaration","","call","any",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","126.00081","Assign","call","","any","(/*Args:*/<any>node).expression.expression"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","127.00040","calls","(/*Args:*/<any>node).expression.expression.expression","getText","any","()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","127.00053","Compare","call.expression.getText()","","=== /*string*/","'_'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","127.00053","CompareR","'_'","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.expression.expression.getText()"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","127.00053","return","","","boolean","(/*Args:*/<any>node).expression.expression.expression.getText() === '_'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".canHandle","130.00015","return","","","boolean","false"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".","133.00011","TS.MethodDefined","UnderscoreInstanceAnalyzer","getContextArgument","(node: any) => any","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","133.00040","define.Parameter","getContextArgument","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","134.00012","TS.VariableDeclaration","","functionName","string",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","134.00061","call.arguments[0]","AstUtils","getFunctionName","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","134.00061","calls","AstUtils","getFunctionName","string","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","134.00061","Assign","functionName","","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","134.00067","Conditional","Rule.UNDERSCORE_BINARY_FUNCTION_NAMES.indexOf(functionName) !== - 1","","/*IfStatement*/ boolean","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node))) !== - 1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","135.00059","call.arguments[0]","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique']","indexOf","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","135.00059","calls","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique']","indexOf","number","(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","135.00059","pickUpedName","Rule.UNDERSCORE_BINARY_FUNCTION_NAMES","indexOf","","(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","135.00078","Compare","Rule.UNDERSCORE_BINARY_FUNCTION_NAMES.indexOf(functionName)","","!== /*number*/","- 1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","135.00078","CompareR","- 1","","/*Reverse*/!== /*number*/","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","135.00078","pickUpedName","Rule.UNDERSCORE_BINARY_FUNCTION_NAMES","indexOf","","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","136.00035","return","","","any","(/*Args:*/<any>node).arguments[1]"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","137.00015","Conditional","Rule.UNDERSCORE_TERNARY_FUNCTION_NAMES.indexOf(functionName) !== - 1","","/*IfStatement*/ boolean","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node))) !== - 1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","137.00067","call.arguments[0]","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight']","indexOf","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","137.00067","calls","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight']","indexOf","number","(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","137.00067","pickUpedName","Rule.UNDERSCORE_TERNARY_FUNCTION_NAMES","indexOf","","(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","137.00086","Compare","Rule.UNDERSCORE_TERNARY_FUNCTION_NAMES.indexOf(functionName)","","!== /*number*/","- 1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","137.00086","CompareR","- 1","","/*Reverse*/!== /*number*/","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","137.00086","pickUpedName","Rule.UNDERSCORE_TERNARY_FUNCTION_NAMES","indexOf","","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","138.00035","return","","","any","(/*Args:*/<any>node).arguments[2]"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","139.00015","Conditional","functionName === 'sortedIndex'","","/*IfStatement*/ boolean/* no Else Clause*/","AstUtils.getFunctionName((/*Args:*/<any>node)) === 'sortedIndex'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","139.00036","Compare","functionName","","=== /*string*/","'sortedIndex'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","139.00036","CompareR","'sortedIndex'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","140.00035","return","","","any","(/*Args:*/<any>node).arguments[2]"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getContextArgument","142.00015","return","","","null","null"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".","145.00011","TS.MethodDefined","UnderscoreInstanceAnalyzer","getFunctionArgument","(node: any) => any","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","145.00041","define.Parameter","getFunctionArgument","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","146.00012","TS.VariableDeclaration","","functionName","string",""
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","146.00061","call.arguments[0]","AstUtils","getFunctionName","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","146.00061","calls","AstUtils","getFunctionName","string","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","146.00061","Assign","functionName","","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","146.00067","Conditional","Rule.UNDERSCORE_BINARY_FUNCTION_NAMES.indexOf(functionName) !== - 1","","/*IfStatement*/ boolean","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node))) !== - 1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","147.00059","call.arguments[0]","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique']","indexOf","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","147.00059","calls","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique']","indexOf","number","(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","147.00059","pickUpedName","Rule.UNDERSCORE_BINARY_FUNCTION_NAMES","indexOf","","(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","147.00078","Compare","Rule.UNDERSCORE_BINARY_FUNCTION_NAMES.indexOf(functionName)","","!== /*number*/","- 1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","147.00078","CompareR","- 1","","/*Reverse*/!== /*number*/","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","147.00078","pickUpedName","Rule.UNDERSCORE_BINARY_FUNCTION_NAMES","indexOf","","['all', 'any', 'collect', 'countBy', 'detect', 'each', 'every', 'filter', 'find', 'forEach', 'groupBy', 'indexBy', 'map', 'max', 'max', 'min', 'partition', 'reject', 'select', 'some', 'sortBy', 'times', 'uniq', 'unique'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","148.00035","return","","","any","(/*Args:*/<any>node).arguments[0]"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","149.00015","Conditional","Rule.UNDERSCORE_TERNARY_FUNCTION_NAMES.indexOf(functionName) !== - 1","","/*IfStatement*/ boolean","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node))) !== - 1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","149.00067","call.arguments[0]","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight']","indexOf","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","149.00067","calls","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight']","indexOf","number","(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","149.00067","pickUpedName","Rule.UNDERSCORE_TERNARY_FUNCTION_NAMES","indexOf","","(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","149.00086","Compare","Rule.UNDERSCORE_TERNARY_FUNCTION_NAMES.indexOf(functionName)","","!== /*number*/","- 1"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","149.00086","CompareR","- 1","","/*Reverse*/!== /*number*/","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","149.00086","pickUpedName","Rule.UNDERSCORE_TERNARY_FUNCTION_NAMES","indexOf","","['foldl', 'foldr', 'inject', 'reduce', 'reduceRight'].indexOf(AstUtils.getFunctionName((/*Args:*/<any>node)))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","150.00035","return","","","any","(/*Args:*/<any>node).arguments[0]"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","151.00015","Conditional","functionName === 'sortedIndex'","","/*IfStatement*/ boolean/* no Else Clause*/","AstUtils.getFunctionName((/*Args:*/<any>node)) === 'sortedIndex'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","151.00036","Compare","functionName","","=== /*string*/","'sortedIndex'"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","151.00036","CompareR","'sortedIndex'","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","152.00035","return","","","any","(/*Args:*/<any>node).arguments[1]"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer",".getFunctionArgument","154.00015","return","","","null","null"
"../tslint-microsoft-contrib-master/src/noUnnecessaryBindRule.ts","UnderscoreInstanceAnalyzer","","157.00002","def.func","","isFunctionLiteral","(expression: any) => boolean","@event  !! missing description.
(@param)?\W+expression *\W+ !! missing description.
@return  !! missing description.
"
"isFunctionLiteral","UnderscoreInstanceAnalyzer","","159.00043","define.Parameter","expression","","any","/*Args:*/<any>expression"
"isFunctionLiteral","UnderscoreInstanceAnalyzer","","159.00065","Conditional","expression.kind === SyntaxKind.current().FunctionExpression","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>expression).kind === SyntaxKind.current().FunctionExpression"
"isFunctionLiteral","UnderscoreInstanceAnalyzer","","160.00040","calls","SyntaxKind","current","SyntaxKind","()"
"isFunctionLiteral","UnderscoreInstanceAnalyzer","","160.00050","ref.varName","SyntaxKind.current()","FunctionExpression","number",""
"isFunctionLiteral","UnderscoreInstanceAnalyzer","","160.00050","Compare","expression","kind","=== /*number*/","SyntaxKind.current().FunctionExpression"
"isFunctionLiteral","UnderscoreInstanceAnalyzer","","160.00050","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>expression).kind"
"isFunctionLiteral","UnderscoreInstanceAnalyzer","","161.00015","return","","","boolean","true"
"isFunctionLiteral","UnderscoreInstanceAnalyzer","","162.00006","Conditional","expression.kind === SyntaxKind.current().ParenthesizedExpression","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>expression).kind === SyntaxKind.current().ParenthesizedExpression"
"isFunctionLiteral","UnderscoreInstanceAnalyzer","","163.00040","calls","SyntaxKind","current","SyntaxKind","()"
"isFunctionLiteral","UnderscoreInstanceAnalyzer","","163.00050","ref.varName","SyntaxKind.current()","ParenthesizedExpression","number",""
"isFunctionLiteral","UnderscoreInstanceAnalyzer","","163.00050","Compare","expression","kind","=== /*number*/","SyntaxKind.current().ParenthesizedExpression"
"isFunctionLiteral","UnderscoreInstanceAnalyzer","","163.00050","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>expression).kind"
"isFunctionLiteral","UnderscoreInstanceAnalyzer","","164.00075","call.arguments[0]","isFunctionLiteral","","any","((/*Args:*/<any>expression)).expression"
"isFunctionLiteral","UnderscoreInstanceAnalyzer","","164.00075","calls","isFunctionLiteral","","boolean","(((/*Args:*/<any>expression)).expression)"
"isFunctionLiteral","UnderscoreInstanceAnalyzer","","164.00075","return","","","boolean","isFunctionLiteral(((/*Args:*/<any>expression)).expression)"
"isFunctionLiteral","UnderscoreInstanceAnalyzer","","166.00011","return","","","boolean","false"
"isFunctionLiteral","UnderscoreInstanceAnalyzer","","167.00002","def.func","","isArrowFunction","(expression: any) => boolean","@event  !! missing description.
(@param)?\W+expression *\W+ !! missing description.
@return  !! missing description.
"
"isArrowFunction","UnderscoreInstanceAnalyzer","","169.00041","define.Parameter","expression","","any","/*Args:*/<any>expression"
"isArrowFunction","UnderscoreInstanceAnalyzer","","169.00063","Conditional","expression.kind === SyntaxKind.current().ArrowFunction","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>expression).kind === SyntaxKind.current().ArrowFunction"
"isArrowFunction","UnderscoreInstanceAnalyzer","","170.00040","calls","SyntaxKind","current","SyntaxKind","()"
"isArrowFunction","UnderscoreInstanceAnalyzer","","170.00050","ref.varName","SyntaxKind.current()","ArrowFunction","number",""
"isArrowFunction","UnderscoreInstanceAnalyzer","","170.00050","Compare","expression","kind","=== /*number*/","SyntaxKind.current().ArrowFunction"
"isArrowFunction","UnderscoreInstanceAnalyzer","","170.00050","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>expression).kind"
"isArrowFunction","UnderscoreInstanceAnalyzer","","171.00015","return","","","boolean","true"
"isArrowFunction","UnderscoreInstanceAnalyzer","","172.00006","Conditional","expression.kind === SyntaxKind.current().ParenthesizedExpression","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>expression).kind === SyntaxKind.current().ParenthesizedExpression"
"isArrowFunction","UnderscoreInstanceAnalyzer","","173.00040","calls","SyntaxKind","current","SyntaxKind","()"
"isArrowFunction","UnderscoreInstanceAnalyzer","","173.00050","ref.varName","SyntaxKind.current()","ParenthesizedExpression","number",""
"isArrowFunction","UnderscoreInstanceAnalyzer","","173.00050","Compare","expression","kind","=== /*number*/","SyntaxKind.current().ParenthesizedExpression"
"isArrowFunction","UnderscoreInstanceAnalyzer","","173.00050","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>expression).kind"
"isArrowFunction","UnderscoreInstanceAnalyzer","","174.00073","call.arguments[0]","isArrowFunction","","any","((/*Args:*/<any>expression)).expression"
"isArrowFunction","UnderscoreInstanceAnalyzer","","174.00073","calls","isArrowFunction","","boolean","(((/*Args:*/<any>expression)).expression)"
"isArrowFunction","UnderscoreInstanceAnalyzer","","174.00073","return","","","boolean","isArrowFunction(((/*Args:*/<any>expression)).expression)"
"isArrowFunction","UnderscoreInstanceAnalyzer","","176.00011","return","","","boolean","false"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","Rule","","11.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","Rule","","11.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","Rule","","11.00035","Assign","Rule","FAILURE_STRING","string","'unnecessary semi-colon'"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","Rule",".","13.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","Rule",".apply","13.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","Rule",".apply","14.00088","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","Rule",".apply","14.00088","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","Rule",".apply","14.00088","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoUnnecessarySemicolonsWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","Rule",".apply","14.00088","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoUnnecessarySemicolonsWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","Rule",".apply","14.00088","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoUnnecessarySemicolonsWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","Rule",".apply","14.00088","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoUnnecessarySemicolonsWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","Rule",".apply","14.00088","return","","","any","this.applyWithWalker((new NoUnnecessarySemicolonsWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","Rule","","18.00006","defined","NoUnnecessarySemicolonsWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker","","18.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".","20.00014","TS.MethodDefined","NoUnnecessarySemicolonsWalker","visitNode","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","20.00034","define.Parameter","visitNode","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","20.00047","Conditional","node.kind === SyntaxKind.current().EmptyStatement","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).kind === SyntaxKind.current().EmptyStatement"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","21.00038","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","21.00048","ref.varName","SyntaxKind.current()","EmptyStatement","number",""
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","21.00048","Compare","node","kind","=== /*number*/","SyntaxKind.current().EmptyStatement"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","21.00048","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).kind"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","22.00053","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","22.00070","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","22.00087","call.arguments[0]","/*<NoUnnecessarySemicolonsWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","22.00087","call.arguments[1]","/*<NoUnnecessarySemicolonsWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","22.00087","call.arguments[2]","/*<NoUnnecessarySemicolonsWalker>*/ this","createFailure","string","'unnecessary semi-colon'"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","22.00087","calls","/*<NoUnnecessarySemicolonsWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'unnecessary semi-colon')"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","22.00087","pickUpedName","/*<NoUnnecessarySemicolonsWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'unnecessary semi-colon')"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","22.00087","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'unnecessary semi-colon')"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","22.00087","call.arguments[0]","/*<NoUnnecessarySemicolonsWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'unnecessary semi-colon')"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","22.00087","calls","/*<NoUnnecessarySemicolonsWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'unnecessary semi-colon'))"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","22.00087","pickUpedName","/*<NoUnnecessarySemicolonsWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'unnecessary semi-colon'))"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","22.00087","pickUpedName","/*<NoUnnecessarySemicolonsWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'unnecessary semi-colon'))"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","22.00087","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'unnecessary semi-colon'))"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","24.00025","call.arguments[0]","super","visitNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noUnnecessarySemicolonsRule.ts","NoUnnecessarySemicolonsWalker",".visitNode","24.00025","calls","super","visitNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule","","11.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule","","11.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule","","11.00035","Assign","Rule","FAILURE_STRING","string","'unused import: '"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".","13.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","13.00034","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","14.00012","TS.VariableDeclaration","","documentRegistry","any",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","14.00035","calls","ts","createDocumentRegistry","any","()"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","14.00035","Assign","documentRegistry","","any","ts.createDocumentRegistry()"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","15.00012","TS.VariableDeclaration","","languageServiceHost","any",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","15.00088","calls","(/*Args:*/<any>sourceFile)","getFullText","any","()"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","15.00088","call.arguments[0]","Lint","createLanguageServiceHost","string","'file.ts'"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","15.00088","call.arguments[1]","Lint","createLanguageServiceHost","any","(/*Args:*/<any>sourceFile).getFullText()"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","15.00088","calls","Lint","createLanguageServiceHost","any","('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","15.00088","Assign","languageServiceHost","","any","Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","16.00012","TS.VariableDeclaration","","languageService","any",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","16.00076","call.arguments[0]","ts","createLanguageService","any","Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","16.00076","call.arguments[1]","ts","createLanguageService","any","ts.createDocumentRegistry()"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","16.00076","calls","ts","createLanguageService","any","(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","16.00076","Assign","languageService","","any","ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","18.00012","TS.VariableDeclaration","","referencedDotImports","{ [index: string]: boolean; }",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","18.00045","define.Parameter","index","","string","/*Args:*/<string>index"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","18.00114","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","18.00114","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","18.00114","call.arguments[0]","/*<Rule>*/ this","getReferencedDotImports","any","(/*Args:*/<any>sourceFile)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","18.00114","call.arguments[1]","/*<Rule>*/ this","getReferencedDotImports","any","this.getOptions()"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","18.00114","calls","/*<Rule>*/ this","getReferencedDotImports","{ [index: string]: boolean; }","((/*Args:*/<any>sourceFile), this.getOptions())"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","18.00114","pickUpedName","/*<Rule>*/ this","getReferencedDotImports","","((/*Args:*/<any>sourceFile), this.getOptions())"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","18.00114","pickUpedName","/*<Rule>*/ this","getOptions","","((/*Args:*/<any>sourceFile), this.getOptions())"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","18.00114","Assign","referencedDotImports","","{ [index: string]: boolean; }","this.getReferencedDotImports((/*Args:*/<any>sourceFile), this.getOptions())"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","18.00114","ref.type","{ [index: string]: boolean; }","","",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","18.00114","pickUpedName","/*<Rule>*/ this","getReferencedDotImports","","this.getReferencedDotImports((/*Args:*/<any>sourceFile), this.getOptions())"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","18.00114","pickUpedName","/*<Rule>*/ this","getOptions","","this.getReferencedDotImports((/*Args:*/<any>sourceFile), this.getOptions())"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","19.00080","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","19.00080","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","19.00110","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","NoUnusedImportsWalker","(new NoUnusedImportsWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()), this.getReferencedDotImports((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","19.00110","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoUnusedImportsWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()), this.getReferencedDotImports((/*Args:*/<any>sourceFile), this.getOptions()))))"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","19.00110","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoUnusedImportsWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()), this.getReferencedDotImports((/*Args:*/<any>sourceFile), this.getOptions()))))"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","19.00110","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoUnusedImportsWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()), this.getReferencedDotImports((/*Args:*/<any>sourceFile), this.getOptions()))))"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".apply","19.00110","return","","","any","this.applyWithWalker((new NoUnusedImportsWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost('file.ts', (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()), this.getReferencedDotImports((/*Args:*/<any>sourceFile), this.getOptions()))))"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".","22.00012","TS.MethodDefined","Rule","getReferencedDotImports","(sourceFile: any, options: any) => { [index: string]: boolean; }","(@param)?\W+sourceFile *\W+ !! missing description.
(@param)?\W+options *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".getReferencedDotImports","22.00053","define.Parameter","getReferencedDotImports","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".getReferencedDotImports","22.00080","define.Parameter","getReferencedDotImports","options","any","/*Args:*/<any>options"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".getReferencedDotImports","22.00101","define.Parameter","index","","string","/*Args:*/<string>index"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".getReferencedDotImports","23.00012","TS.VariableDeclaration","","gatherImportHandler","any",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".getReferencedDotImports","23.00079","Assign","gatherImportHandler","","any","(new GatherNoRequireImportsWalker((/*Args:*/<any>sourceFile), (/*Args:*/<any>options)))"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".getReferencedDotImports","24.00030","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new GatherNoRequireImportsWalker((/*Args:*/<any>sourceFile), (/*Args:*/<any>options)))"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".getReferencedDotImports","24.00030","calls","/*<Rule>*/ this","applyWithWalker","any","((new GatherNoRequireImportsWalker((/*Args:*/<any>sourceFile), (/*Args:*/<any>options))))"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".getReferencedDotImports","24.00030","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new GatherNoRequireImportsWalker((/*Args:*/<any>sourceFile), (/*Args:*/<any>options))))"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule",".getReferencedDotImports","25.00036","return","","","any","(new GatherNoRequireImportsWalker((/*Args:*/<any>sourceFile), (/*Args:*/<any>options))).noRequireReferences"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","Rule","","29.00006","defined","GatherNoRequireImportsWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker","","29.00006","ref.type","Lint.RuleWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker","","31.00011","TS.PropertyDefined","GatherNoRequireImportsWalker","noRequireReferences","{ [index: string]: boolean; }",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker","","31.00011","ref.type","{ [index: string]: boolean; }","","",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker","","31.00042","define.Parameter","index","","string","/*Args:*/<string>index"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker","","31.00064","TS.PropertyDefined","GatherNoRequireImportsWalker","noRequireReferences","{ [index: string]: boolean; }",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker","","31.00064","Assign","GatherNoRequireImportsWalker","noRequireReferences","{ [x: string]: undefined; }","{}"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker","","31.00064","ref.type","{ [x: string]: undefined; }","","",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".","33.00014","TS.MethodDefined","GatherNoRequireImportsWalker","visitImportEqualsDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".visitImportEqualsDeclaration","33.00053","define.Parameter","visitImportEqualsDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".visitImportEqualsDeclaration","34.00012","TS.VariableDeclaration","","moduleReference","any",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".visitImportEqualsDeclaration","34.00036","Assign","moduleReference","","any","(/*Args:*/<any>node).moduleReference"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".visitImportEqualsDeclaration","34.00052","Conditional","moduleReference.kind === SyntaxKind.current().QualifiedName","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).moduleReference.kind === SyntaxKind.current().QualifiedName"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".visitImportEqualsDeclaration","35.00049","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".visitImportEqualsDeclaration","35.00059","ref.varName","SyntaxKind.current()","QualifiedName","number",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".visitImportEqualsDeclaration","35.00059","Compare","moduleReference","kind","=== /*number*/","SyntaxKind.current().QualifiedName"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".visitImportEqualsDeclaration","35.00059","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).moduleReference.kind"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".visitImportEqualsDeclaration","35.00075","Conditional","(moduleReference).left != null","","/*IfStatement*/ boolean/* no Else Clause*/","((/*Args:*/<any>node).moduleReference).left != null"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".visitImportEqualsDeclaration","36.00047","Compare","(<any>moduleReference)","left","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".visitImportEqualsDeclaration","36.00047","CompareR","null","","/*Reverse*/!= /*any*/","((/*Args:*/<any>node).moduleReference).left"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".visitImportEqualsDeclaration","37.00076","call.arguments[0]","/*<GatherNoRequireImportsWalker>*/ this","gatherReferenceFromImport","any","((/*Args:*/<any>node).moduleReference).left.text"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".visitImportEqualsDeclaration","37.00076","calls","/*<GatherNoRequireImportsWalker>*/ this","gatherReferenceFromImport","void","(((/*Args:*/<any>node).moduleReference).left.text)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".visitImportEqualsDeclaration","37.00076","pickUpedName","/*<GatherNoRequireImportsWalker>*/ this","gatherReferenceFromImport","","(((/*Args:*/<any>node).moduleReference).left.text)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".visitImportEqualsDeclaration","40.00044","call.arguments[0]","super","visitImportEqualsDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".visitImportEqualsDeclaration","40.00044","calls","super","visitImportEqualsDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".","44.00012","TS.MethodDefined","GatherNoRequireImportsWalker","gatherReferenceFromImport","(qualifiedName: string) => void","(@param)?\W+qualifiedName *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".gatherReferenceFromImport","44.00054","define.Parameter","gatherReferenceFromImport","qualifiedName","string","/*Args:*/<string>qualifiedName"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".gatherReferenceFromImport","44.00071","Conditional","qualifiedName","","/*IfStatement*/ string/* no Else Clause*/","(/*Args:*/<string>qualifiedName)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".gatherReferenceFromImport","46.00033","call.arguments[0]","(/*Args:*/<string>qualifiedName)","split","string","'.'"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".gatherReferenceFromImport","46.00033","calls","(/*Args:*/<string>qualifiedName)","split","string[]","('.')"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".gatherReferenceFromImport;(/*Args:*/<string>qualifiedName).split('.').forEach(Arguments[0])","46.00046","call.func","(/*Args:*/<string>qualifiedName).split('.')","forEach","(name: string) => void",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".gatherReferenceFromImport;(/*Args:*/<string>qualifiedName).split('.').forEach(Arguments[0])","46.00046","pickUpedName","qualifiedName","split","","(/*Args:*/<string>qualifiedName).split('.').forEach"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".gatherReferenceFromImport;(/*Args:*/<string>qualifiedName).split('.').forEach(Arguments[0])","46.00053","define.Parameter","name","","string","/*Args:*/<string>name"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".gatherReferenceFromImport;(/*Args:*/<string>qualifiedName).split('.').forEach(Arguments[0])","47.00049","Assign","/*<GatherNoRequireImportsWalker>*/ this","noRequireReferences[name]","= /*boolean*/","{|this.noRequireReferences[(/*Args:*/<string>name)] |,| true|} "
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".gatherReferenceFromImport;(/*Args:*/<string>qualifiedName).split('.').forEach(Arguments[0])","47.00049","pickUpedName","/*<GatherNoRequireImportsWalker>*/ this","noRequireReferences","","{|this.noRequireReferences[(/*Args:*/<string>name)] |,| true|} "
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".gatherReferenceFromImport","47.00049","call.arguments[0]","(/*Args:*/<string>qualifiedName).split('.')","forEach","(name: string) => void","/**(name: string) => void**/"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker",".gatherReferenceFromImport","47.00049","calls","(/*Args:*/<string>qualifiedName).split('.')","forEach","void","(/**(name: string) => void**/)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","GatherNoRequireImportsWalker","","53.00006","defined","NoUnusedImportsWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker","","53.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker","","55.00012","TS.PropertyDefined","NoUnusedImportsWalker","languageServices","any",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker","","55.00034","TS.PropertyDefined","NoUnusedImportsWalker","languageServices","any",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker","","56.00012","TS.PropertyDefined","NoUnusedImportsWalker","noRequireReferences","{ [index: string]: boolean; }",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker","","56.00012","ref.type","{ [index: string]: boolean; }","","",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker","","56.00043","define.Parameter","index","","string","/*Args:*/<string>index"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker","","56.00065","TS.PropertyDefined","NoUnusedImportsWalker","noRequireReferences","{ [index: string]: boolean; }",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker","","56.00065","Assign","NoUnusedImportsWalker","noRequireReferences","{ [x: string]: undefined; }","{}"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker","","56.00065","ref.type","{ [x: string]: undefined; }","","",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","56.00069","TS.MethodDefined","NoUnusedImportsWalker","Constructor","any",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","58.00040","define.Parameter","/*<NoUnusedImportsWalker>*/ this.","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","59.00039","define.Parameter","/*<NoUnusedImportsWalker>*/ this.","options","any","/*Args:*/<any>options"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","60.00046","define.Parameter","/*<NoUnusedImportsWalker>*/ this.","languageServices","any","/*Args:*/<any>languageServices"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","61.00054","define.Parameter","index","","string","/*Args:*/<string>index"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","61.00063","define.Parameter","/*<NoUnusedImportsWalker>*/ this.","noRequireReferences","{ [index: string]: boolean; }","/*Args:*/<{ [index: string]: boolean; }>noRequireReferences"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","61.00063","ref.type","{ [index: string]: boolean; }","","",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","62.00026","call.arguments[0]","super","","any","NoUnusedImportsWalker.sourceFile"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","62.00026","call.arguments[1]","super","","any","NoUnusedImportsWalker.options"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","62.00026","calls","super","","void","(NoUnusedImportsWalker.sourceFile, NoUnusedImportsWalker.options)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","62.00026","pickUpedName","sourceFile","","","(NoUnusedImportsWalker.sourceFile, NoUnusedImportsWalker.options)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","62.00026","pickUpedName","options","","","(NoUnusedImportsWalker.sourceFile, NoUnusedImportsWalker.options)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","63.00032","Assign","/*<NoUnusedImportsWalker>*/ this","languageServices","= /*any*/","NoUnusedImportsWalker.languageServices"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","63.00032","pickUpedName","/*<NoUnusedImportsWalker>*/ this","languageServices","","NoUnusedImportsWalker.languageServices"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","63.00032","pickUpedName","languageServices","","","NoUnusedImportsWalker.languageServices"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","64.00035","Assign","/*<NoUnusedImportsWalker>*/ this","noRequireReferences","= /*{ [index: string]: boolean; }*/","NoUnusedImportsWalker.noRequireReferences"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","64.00035","ref.type","{ [index: string]: boolean; }","","",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","64.00035","pickUpedName","/*<NoUnusedImportsWalker>*/ this","noRequireReferences","","NoUnusedImportsWalker.noRequireReferences"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".constructor","64.00035","pickUpedName","noRequireReferences","","","NoUnusedImportsWalker.noRequireReferences"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".","68.00014","TS.MethodDefined","NoUnusedImportsWalker","visitImportEqualsDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".visitImportEqualsDeclaration","68.00053","define.Parameter","visitImportEqualsDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".visitImportEqualsDeclaration","68.00085","Conditional","! this.hasModifier(node.modifiers, SyntaxKind.current().ExportKeyword)","","/*IfStatement*/ boolean/* no Else Clause*/","! this.hasModifier((/*Args:*/<any>node).modifiers, SyntaxKind.current().ExportKeyword)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".visitImportEqualsDeclaration","69.00058","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".visitImportEqualsDeclaration","69.00068","call.arguments[0]","/*<NoUnusedImportsWalker>*/ this","hasModifier","any","(/*Args:*/<any>node).modifiers"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".visitImportEqualsDeclaration","69.00068","call.arguments[1]","/*<NoUnusedImportsWalker>*/ this","hasModifier","number","SyntaxKind.current().ExportKeyword"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".visitImportEqualsDeclaration","69.00068","calls","/*<NoUnusedImportsWalker>*/ this","hasModifier","boolean","((/*Args:*/<any>node).modifiers, SyntaxKind.current().ExportKeyword)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".visitImportEqualsDeclaration","69.00068","pickUpedName","/*<NoUnusedImportsWalker>*/ this","hasModifier","","((/*Args:*/<any>node).modifiers, SyntaxKind.current().ExportKeyword)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".visitImportEqualsDeclaration","70.00088","calls","((/*Args:*/<any>node)).name","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".visitImportEqualsDeclaration","70.00088","call.arguments[0]","/*<NoUnusedImportsWalker>*/ this","validateReferencesForVariable","any","((/*Args:*/<any>node)).name.text"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".visitImportEqualsDeclaration","70.00088","call.arguments[1]","/*<NoUnusedImportsWalker>*/ this","validateReferencesForVariable","any","((/*Args:*/<any>node)).name.getStart()"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".visitImportEqualsDeclaration","70.00088","calls","/*<NoUnusedImportsWalker>*/ this","validateReferencesForVariable","void","(((/*Args:*/<any>node)).name.text, ((/*Args:*/<any>node)).name.getStart())"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".visitImportEqualsDeclaration","70.00088","pickUpedName","/*<NoUnusedImportsWalker>*/ this","validateReferencesForVariable","","(((/*Args:*/<any>node)).name.text, ((/*Args:*/<any>node)).name.getStart())"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".visitImportEqualsDeclaration","72.00044","call.arguments[0]","super","visitImportEqualsDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".visitImportEqualsDeclaration","72.00044","calls","super","visitImportEqualsDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".","75.00012","TS.MethodDefined","NoUnusedImportsWalker","hasModifier","(modifiers: any, modifierKind: number) => boolean","(@param)?\W+modifiers *\W+ !! missing description.
(@param)?\W+modifierKind *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier","75.00040","define.Parameter","hasModifier","modifiers","any","/*Args:*/<any>modifiers"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier","75.00070","define.Parameter","hasModifier","modifierKind","number","/*Args:*/<number>modifierKind"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier","75.00090","Conditional","modifiers == null","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>modifiers) == null"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier","76.00025","Compare","modifiers","","== /*null*/","null"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier","76.00025","CompareR","null","","/*Reverse*/== /*any*/","(/*Args:*/<any>modifiers)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier","77.00019","return","","","boolean","false"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier","79.00012","TS.VariableDeclaration","","result","boolean",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier","79.00031","Assign","result","","boolean","false"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier;(/*Args:*/<any>modifiers).forEach(Arguments[0])","80.00027","call.func","(/*Args:*/<any>modifiers)","forEach","(modifier: any) => void",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier;(/*Args:*/<any>modifiers).forEach(Arguments[0])","80.00027","pickUpedName","modifiers","forEach","","(/*Args:*/<any>modifiers).forEach"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier;(/*Args:*/<any>modifiers).forEach(Arguments[0])","80.00042","define.Parameter","modifier","","any","/*Args:*/<any>modifier"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier;(/*Args:*/<any>modifiers).forEach(Arguments[0])","80.00059","Conditional","modifier.kind === modifierKind","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>modifier).kind === (/*Args:*/<number>modifierKind)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier;(/*Args:*/<any>modifiers).forEach(Arguments[0])","81.00034","Compare","modifier","kind","=== /*number*/","(/*Args:*/<number>modifierKind)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier;(/*Args:*/<any>modifiers).forEach(Arguments[0])","81.00034","pickUpedName","modifierKind","","","(/*Args:*/<number>modifierKind)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier;(/*Args:*/<any>modifiers).forEach(Arguments[0])","81.00034","CompareR","modifierKind","","/*Reverse*/=== /*any*/","(/*Args:*/<any>modifier).kind"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier;(/*Args:*/<any>modifiers).forEach(Arguments[0])","82.00025","Assign","result","","= /*boolean*/","true"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier;(/*Args:*/<any>modifiers).forEach(Arguments[0])","82.00025","pickUpedName","result","","","true"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier","82.00025","call.arguments[0]","(/*Args:*/<any>modifiers)","forEach","(modifier: any) => void","/**(modifier: any) => void**/"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier","82.00025","calls","(/*Args:*/<any>modifiers)","forEach","any","(/**(modifier: any) => void**/)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".hasModifier","85.00015","return","","","boolean","true"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".","93.00012","TS.MethodDefined","NoUnusedImportsWalker","validateReferencesForVariable","(name: string, position: number) => void","/**
As described in  https://github.com/palantir/tslint/issues/325,
the language service in typescript 1.4 doesn't seem to search for references in other imports.
This will be fixed, but we can work around it by keeping track for the import references manually.

(@param)?\W+name *\W+ !! missing description.
(@param)?\W+position *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","93.00049","define.Parameter","validateReferencesForVariable","name","string","/*Args:*/<string>name"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","93.00068","define.Parameter","validateReferencesForVariable","position","number","/*Args:*/<number>position"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","94.00012","TS.VariableDeclaration","","references","any",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","94.00082","call.arguments[0]","NoUnusedImportsWalker.languageServices","getReferencesAtPosition","string","'file.ts'"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","94.00082","call.arguments[1]","NoUnusedImportsWalker.languageServices","getReferencesAtPosition","number","(/*Args:*/<number>position)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","94.00082","calls","NoUnusedImportsWalker.languageServices","getReferencesAtPosition","any","('file.ts', (/*Args:*/<number>position))"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","94.00082","pickUpedName","/*<NoUnusedImportsWalker>*/ this.languageServices","getReferencesAtPosition","","('file.ts', (/*Args:*/<number>position))"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","94.00082","Assign","references","","any","NoUnusedImportsWalker.languageServices.getReferencesAtPosition('file.ts', (/*Args:*/<number>position))"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","94.00082","pickUpedName","/*<NoUnusedImportsWalker>*/ this.languageServices","getReferencesAtPosition","","NoUnusedImportsWalker.languageServices.getReferencesAtPosition('file.ts', (/*Args:*/<number>position))"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","94.00093","Conditional","references.length <= 1 && ! NoUnusedImportsWalker.noRequireReferences[(/*Args:*/<string>name)]","","/*IfStatement*/ boolean/* no Else Clause*/","NoUnusedImportsWalker.languageServices.getReferencesAtPosition('file.ts', (/*Args:*/<number>position)).length <= 1 && ! NoUnusedImportsWalker.noRequireReferences[(/*Args:*/<string>name)]"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","95.00033","Compare","references","length","<= /*number*/","1"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","95.00033","CompareR","1","","/*Reverse*/<= /*any*/","NoUnusedImportsWalker.languageServices.getReferencesAtPosition('file.ts', (/*Args:*/<number>position)).length"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","95.00065","BinaryExpression","references.length <= 1","","&& /*boolean*/","! NoUnusedImportsWalker.noRequireReferences[(/*Args:*/<string>name)]"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","95.00065","pickUpedName","/*<NoUnusedImportsWalker>*/ this","noRequireReferences","","! NoUnusedImportsWalker.noRequireReferences[(/*Args:*/<string>name)]"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","96.00016","TS.VariableDeclaration","","failureString","string",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","96.00054","BinaryExpression","Rule","FAILURE_STRING","+ /*string*/","'''"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","96.00061","BinaryExpression","Rule.FAILURE_STRING + '''","","+ /*string*/","(/*Args:*/<string>name)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","96.00068","BinaryExpression","Rule.FAILURE_STRING + ''' + name","","+ /*string*/","'''"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","96.00068","Assign","failureString","","string","'unused import: '' + (/*Args:*/<string>name) + '''"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","96.00068","pickUpedName","Rule","FAILURE_STRING","","'unused import: '' + (/*Args:*/<string>name) + '''"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","97.00016","TS.VariableDeclaration","","failure","any",""
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","97.00068","call.arguments[0]","/*<NoUnusedImportsWalker>*/ this","createFailure","number","(/*Args:*/<number>position)"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","97.00068","call.arguments[1]","/*<NoUnusedImportsWalker>*/ this","createFailure","number","(/*Args:*/<string>name).length"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","97.00068","call.arguments[2]","/*<NoUnusedImportsWalker>*/ this","createFailure","string","'unused import: '' + (/*Args:*/<string>name) + '''"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","97.00068","calls","/*<NoUnusedImportsWalker>*/ this","createFailure","any","((/*Args:*/<number>position), (/*Args:*/<string>name).length, 'unused import: '' + (/*Args:*/<string>name) + ''')"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","97.00068","pickUpedName","/*<NoUnusedImportsWalker>*/ this","createFailure","","((/*Args:*/<number>position), (/*Args:*/<string>name).length, 'unused import: '' + (/*Args:*/<string>name) + ''')"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","97.00068","Assign","failure","","any","this.createFailure((/*Args:*/<number>position), (/*Args:*/<string>name).length, 'unused import: '' + (/*Args:*/<string>name) + ''')"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","97.00068","pickUpedName","/*<NoUnusedImportsWalker>*/ this","createFailure","","this.createFailure((/*Args:*/<number>position), (/*Args:*/<string>name).length, 'unused import: '' + (/*Args:*/<string>name) + ''')"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","98.00029","call.arguments[0]","/*<NoUnusedImportsWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<number>position), (/*Args:*/<string>name).length, 'unused import: '' + (/*Args:*/<string>name) + ''')"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","98.00029","calls","/*<NoUnusedImportsWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<number>position), (/*Args:*/<string>name).length, 'unused import: '' + (/*Args:*/<string>name) + '''))"
"../tslint-microsoft-contrib-master/src/noUnusedImportsRule.ts","NoUnusedImportsWalker",".validateReferencesForVariable","98.00029","pickUpedName","/*<NoUnusedImportsWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<number>position), (/*Args:*/<string>name).length, 'unused import: '' + (/*Args:*/<string>name) + '''))"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","Rule","","11.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","Rule","","11.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","Rule","","11.00035","Assign","Rule","FAILURE_STRING","string","'Forbidden with statement'"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","Rule",".","13.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","Rule",".apply","13.00034","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","Rule",".apply","14.00080","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","Rule",".apply","14.00080","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","Rule",".apply","14.00080","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoWithStatementWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","Rule",".apply","14.00080","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoWithStatementWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","Rule",".apply","14.00080","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoWithStatementWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","Rule",".apply","14.00080","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoWithStatementWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","Rule",".apply","14.00080","return","","","any","this.applyWithWalker((new NoWithStatementWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","Rule","","18.00006","defined","NoWithStatementWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker","","18.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".","20.00014","TS.MethodDefined","NoWithStatementWalker","visitNode","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","20.00034","define.Parameter","visitNode","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","20.00047","Conditional","node.kind === SyntaxKind.current().WithStatement","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).kind === SyntaxKind.current().WithStatement"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","21.00038","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","21.00048","ref.varName","SyntaxKind.current()","WithStatement","number",""
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","21.00048","Compare","node","kind","=== /*number*/","SyntaxKind.current().WithStatement"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","21.00048","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).kind"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","22.00053","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","22.00070","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","22.00087","call.arguments[0]","/*<NoWithStatementWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","22.00087","call.arguments[1]","/*<NoWithStatementWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","22.00087","call.arguments[2]","/*<NoWithStatementWalker>*/ this","createFailure","string","'Forbidden with statement'"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","22.00087","calls","/*<NoWithStatementWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden with statement')"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","22.00087","pickUpedName","/*<NoWithStatementWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden with statement')"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","22.00087","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden with statement')"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","22.00087","call.arguments[0]","/*<NoWithStatementWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden with statement')"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","22.00087","calls","/*<NoWithStatementWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden with statement'))"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","22.00087","pickUpedName","/*<NoWithStatementWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden with statement'))"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","22.00087","pickUpedName","/*<NoWithStatementWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden with statement'))"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","22.00087","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden with statement'))"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","24.00025","call.arguments[0]","super","visitNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/noWithStatementRule.ts","NoWithStatementWalker",".visitNode","24.00025","calls","super","visitNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","Rule","","11.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","Rule","","11.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","Rule","","11.00035","Assign","Rule","FAILURE_STRING","string","'Replace generic-typed Array with array literal: '"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","Rule",".","13.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","Rule",".apply","13.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","Rule",".apply","14.00079","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","Rule",".apply","14.00079","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","Rule",".apply","14.00079","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new NoGenericArrayWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","Rule",".apply","14.00079","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoGenericArrayWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","Rule",".apply","14.00079","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoGenericArrayWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","Rule",".apply","14.00079","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoGenericArrayWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","Rule",".apply","14.00079","return","","","any","this.applyWithWalker((new NoGenericArrayWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","Rule","","18.00006","defined","NoGenericArrayWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker","","18.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".","20.00014","TS.MethodDefined","NoGenericArrayWalker","visitNode","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","20.00034","define.Parameter","visitNode","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","20.00047","Conditional","node.kind === SyntaxKind.current().TypeReference","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).kind === SyntaxKind.current().TypeReference"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","21.00038","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","21.00048","ref.varName","SyntaxKind.current()","TypeReference","number",""
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","21.00048","Compare","node","kind","=== /*number*/","SyntaxKind.current().TypeReference"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","21.00048","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).kind"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","22.00016","TS.VariableDeclaration","","ref","any",""
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","22.00068","Assign","ref","","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","22.00073","Conditional","(ref.typeName).text === 'Array'","","/*IfStatement*/ boolean/* no Else Clause*/","((/*Args:*/<any>node).typeName).text === 'Array'"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","23.00055","Compare","(<ts.Identifier>ref.typeName)","text","=== /*string*/","'Array'"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","23.00055","CompareR","'Array'","","/*Reverse*/=== /*any*/","((/*Args:*/<any>node).typeName).text"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","24.00020","TS.VariableDeclaration","","failureString","string",""
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","24.00064","calls","(/*Args:*/<any>node)","getText","any","()"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","24.00064","BinaryExpression","Rule","FAILURE_STRING","+ /*any*/","(/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","24.00064","Assign","failureString","","string","'Replace generic-typed Array with array literal: ' + (/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","24.00064","pickUpedName","Rule","FAILURE_STRING","","'Replace generic-typed Array with array literal: ' + (/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","25.00020","TS.VariableDeclaration","","failure","any",""
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","25.00055","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","25.00072","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","25.00083","call.arguments[0]","/*<NoGenericArrayWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","25.00083","call.arguments[1]","/*<NoGenericArrayWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","25.00083","call.arguments[2]","/*<NoGenericArrayWalker>*/ this","createFailure","string","'Replace generic-typed Array with array literal: ' + (/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","25.00083","calls","/*<NoGenericArrayWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Replace generic-typed Array with array literal: ' + (/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","25.00083","pickUpedName","/*<NoGenericArrayWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Replace generic-typed Array with array literal: ' + (/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","25.00083","Assign","failure","","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Replace generic-typed Array with array literal: ' + (/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","25.00083","pickUpedName","/*<NoGenericArrayWalker>*/ this","createFailure","","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Replace generic-typed Array with array literal: ' + (/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","26.00033","call.arguments[0]","/*<NoGenericArrayWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Replace generic-typed Array with array literal: ' + (/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","26.00033","calls","/*<NoGenericArrayWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Replace generic-typed Array with array literal: ' + (/*Args:*/<any>node).getText()))"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","26.00033","pickUpedName","/*<NoGenericArrayWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Replace generic-typed Array with array literal: ' + (/*Args:*/<any>node).getText()))"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","29.00025","call.arguments[0]","super","visitNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/preferArrayLiteralRule.ts","NoGenericArrayWalker",".visitNode","29.00025","calls","super","visitNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","Rule","","12.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","Rule","","13.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","Rule","","13.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","Rule","","13.00035","Assign","Rule","FAILURE_STRING","string","'A Promise was found that appears to not have resolve or reject invoked on all code paths'"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","Rule",".","15.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","Rule",".apply","15.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","Rule",".apply","16.00074","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","Rule",".apply","16.00074","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","Rule",".apply","16.00074","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new PromiseAnalyzer((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","Rule",".apply","16.00074","calls","/*<Rule>*/ this","applyWithWalker","any","((new PromiseAnalyzer((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","Rule",".apply","16.00074","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new PromiseAnalyzer((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","Rule",".apply","16.00074","pickUpedName","/*<Rule>*/ this","getOptions","","((new PromiseAnalyzer((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","Rule",".apply","16.00074","return","","","any","this.applyWithWalker((new PromiseAnalyzer((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","Rule","","20.00006","defined","PromiseAnalyzer","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer","","20.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".","22.00012","TS.MethodDefined","PromiseAnalyzer","isPromiseDeclaration","(node: any) => boolean","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","22.00043","define.Parameter","isPromiseDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","22.00068","Conditional","node.expression.kind === SyntaxKind.current().Identifier && node.expression.getText() === 'Promise' && node.arguments != null && node.arguments.length > 0","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).expression.kind === SyntaxKind.current().Identifier && (/*Args:*/<any>node).expression.getText() === 'Promise' && (/*Args:*/<any>node).arguments != null && (/*Args:*/<any>node).arguments.length > 0"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","23.00049","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","23.00059","ref.varName","SyntaxKind.current()","Identifier","number",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","23.00059","Compare","node.expression","kind","=== /*number*/","SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","23.00059","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.kind"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","24.00032","calls","(/*Args:*/<any>node).expression","getText","any","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","24.00045","Compare","node.expression.getText()","","=== /*string*/","'Promise'"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","24.00045","CompareR","'Promise'","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.getText()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","24.00045","BinaryExpression","node.expression.kind === SyntaxKind.current().Identifier","","&& /*boolean*/","(/*Args:*/<any>node).expression.getText() === 'Promise'"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","25.00033","Compare","node","arguments","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","25.00033","CompareR","null","","/*Reverse*/!= /*any*/","(/*Args:*/<any>node).arguments"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","25.00033","BinaryExpression","node.expression.kind === SyntaxKind.current().Identifier && node.expression.getText() === 'Promise'","","&& /*boolean*/","(/*Args:*/<any>node).arguments != null"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","25.00065","Compare","node.arguments","length","> /*number*/","0"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","25.00065","CompareR","0","","/*Reverse*/> /*any*/","(/*Args:*/<any>node).arguments.length"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","25.00065","BinaryExpression","node.expression.kind === SyntaxKind.current().Identifier && node.expression.getText() === 'Promise' && node.arguments != null","","&& /*boolean*/","(/*Args:*/<any>node).arguments.length > 0"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","27.00016","TS.VariableDeclaration","","firstArg","any",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","27.00058","Assign","firstArg","","any","(/*Args:*/<any>node).arguments[0]"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","27.00061","Conditional","firstArg.kind === SyntaxKind.current().ArrowFunction || firstArg.kind === SyntaxKind.current().FunctionExpression","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).arguments[0].kind === SyntaxKind.current().ArrowFunction || (/*Args:*/<any>node).arguments[0].kind === SyntaxKind.current().FunctionExpression"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","28.00046","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","28.00056","ref.varName","SyntaxKind.current()","ArrowFunction","number",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","28.00056","Compare","firstArg","kind","=== /*number*/","SyntaxKind.current().ArrowFunction"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","28.00056","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).arguments[0].kind"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","28.00102","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","28.00112","ref.varName","SyntaxKind.current()","FunctionExpression","number",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","28.00112","Compare","firstArg","kind","=== /*number*/","SyntaxKind.current().FunctionExpression"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","28.00112","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).arguments[0].kind"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","28.00112","BinaryExpression","firstArg.kind === SyntaxKind.current().ArrowFunction","","|| /*boolean*/","(/*Args:*/<any>node).arguments[0].kind === SyntaxKind.current().FunctionExpression"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","29.00023","return","","","boolean","true"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".isPromiseDeclaration","32.00015","return","","","boolean","false"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".","35.00012","TS.MethodDefined","PromiseAnalyzer","getCompletionIdentifiers","(declaration: any) => any[]","(@param)?\W+declaration *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","35.00054","define.Parameter","getCompletionIdentifiers","declaration","any","/*Args:*/<any>declaration"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","36.00012","TS.VariableDeclaration","","result","any[]",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","36.00038","Assign","result","","undefined[]","[]"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","36.00042","Conditional","declaration.parameters == null || declaration.parameters.length === 0","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>declaration).parameters == null || (/*Args:*/<any>declaration).parameters.length === 0"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","37.00038","Compare","declaration","parameters","== /*null*/","null"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","37.00038","CompareR","null","","/*Reverse*/== /*any*/","(/*Args:*/<any>declaration).parameters"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","37.00080","Compare","declaration.parameters","length","=== /*number*/","0"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","37.00080","CompareR","0","","/*Reverse*/=== /*any*/","(/*Args:*/<any>declaration).parameters.length"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","37.00080","BinaryExpression","declaration.parameters == null","","|| /*boolean*/","(/*Args:*/<any>declaration).parameters.length === 0"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","38.00019","return","","","any[]","[]"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","41.00012","TS.VariableDeclaration","","arg1","any",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","41.00068","Assign","arg1","","any","(/*Args:*/<any>declaration).parameters[0]"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","42.00012","TS.VariableDeclaration","","arg2","any",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","42.00068","Assign","arg2","","any","(/*Args:*/<any>declaration).parameters[1]"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","42.00071","Conditional","arg1 != null && arg1.name.kind === SyntaxKind.current().Identifier","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>declaration).parameters[0] != null && (/*Args:*/<any>declaration).parameters[0].name.kind === SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","43.00020","Compare","arg1","","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","43.00020","CompareR","null","","/*Reverse*/!= /*any*/","(/*Args:*/<any>declaration).parameters[0]"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","43.00059","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","43.00069","ref.varName","SyntaxKind.current()","Identifier","number",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","43.00069","Compare","arg1.name","kind","=== /*number*/","SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","43.00069","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>declaration).parameters[0].name.kind"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","43.00069","BinaryExpression","arg1 != null","","&& /*boolean*/","(/*Args:*/<any>declaration).parameters[0].name.kind === SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","44.00066","call.arguments[0]","result","push","any","(/*Args:*/<any>declaration).parameters[0].name"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","44.00066","calls","result","push","number","((/*Args:*/<any>declaration).parameters[0].name)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","45.00010","Conditional","arg2 != null && arg2.name.kind === SyntaxKind.current().Identifier","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>declaration).parameters[1] != null && (/*Args:*/<any>declaration).parameters[1].name.kind === SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","46.00020","Compare","arg2","","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","46.00020","CompareR","null","","/*Reverse*/!= /*any*/","(/*Args:*/<any>declaration).parameters[1]"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","46.00059","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","46.00069","ref.varName","SyntaxKind.current()","Identifier","number",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","46.00069","Compare","arg2.name","kind","=== /*number*/","SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","46.00069","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>declaration).parameters[1].name.kind"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","46.00069","BinaryExpression","arg2 != null","","&& /*boolean*/","(/*Args:*/<any>declaration).parameters[1].name.kind === SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","47.00066","call.arguments[0]","result","push","any","(/*Args:*/<any>declaration).parameters[1].name"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","47.00066","calls","result","push","number","((/*Args:*/<any>declaration).parameters[1].name)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","47.00066","pickUpedName","result","push","","((/*Args:*/<any>declaration).parameters[1].name)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".getCompletionIdentifiers","49.00015","return","","","any[]","{|{|[] |,| (/*Args:*/<any>declaration).parameters[0].name|}  |,| (/*Args:*/<any>declaration).parameters[1].name|} "
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".","52.00014","TS.MethodDefined","PromiseAnalyzer","visitNewExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","52.00043","define.Parameter","visitNewExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","52.00065","Conditional","/*<PromiseAnalyzer>*/ this.isPromiseDeclaration(node)","","/*IfStatement*/ boolean/* no Else Clause*/","this.isPromiseDeclaration((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","53.00039","call.arguments[0]","/*<PromiseAnalyzer>*/ this","isPromiseDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","53.00039","calls","/*<PromiseAnalyzer>*/ this","isPromiseDeclaration","boolean","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","53.00039","pickUpedName","/*<PromiseAnalyzer>*/ this","isPromiseDeclaration","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","54.00016","TS.VariableDeclaration","","functionArgument","any",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","54.00112","Assign","functionArgument","","any","(/*Args:*/<any>node).arguments[0]"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","55.00016","TS.VariableDeclaration","","functionBody","any",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","55.00049","Assign","functionBody","","any","(/*Args:*/<any>node).arguments[0].body"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","56.00016","TS.VariableDeclaration","","competionIdentifiers","any[]",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","56.00088","call.arguments[0]","/*<PromiseAnalyzer>*/ this","getCompletionIdentifiers","any","(/*Args:*/<any>node).arguments[0]"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","56.00088","calls","/*<PromiseAnalyzer>*/ this","getCompletionIdentifiers","any[]","((/*Args:*/<any>node).arguments[0])"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","56.00088","pickUpedName","/*<PromiseAnalyzer>*/ this","getCompletionIdentifiers","","((/*Args:*/<any>node).arguments[0])"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","56.00088","Assign","competionIdentifiers","","any[]","this.getCompletionIdentifiers((/*Args:*/<any>node).arguments[0])"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","56.00088","pickUpedName","/*<PromiseAnalyzer>*/ this","getCompletionIdentifiers","","this.getCompletionIdentifiers((/*Args:*/<any>node).arguments[0])"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","57.00058","call.arguments[0]","/*<PromiseAnalyzer>*/ this","validatePromiseUsage","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","57.00058","call.arguments[1]","/*<PromiseAnalyzer>*/ this","validatePromiseUsage","any","(/*Args:*/<any>node).arguments[0].body"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","57.00058","call.arguments[2]","/*<PromiseAnalyzer>*/ this","validatePromiseUsage","any[]","this.getCompletionIdentifiers((/*Args:*/<any>node).arguments[0])"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","57.00058","calls","/*<PromiseAnalyzer>*/ this","validatePromiseUsage","void","((/*Args:*/<any>node), (/*Args:*/<any>node).arguments[0].body, this.getCompletionIdentifiers((/*Args:*/<any>node).arguments[0]))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","57.00058","pickUpedName","/*<PromiseAnalyzer>*/ this","validatePromiseUsage","","((/*Args:*/<any>node), (/*Args:*/<any>node).arguments[0].body, this.getCompletionIdentifiers((/*Args:*/<any>node).arguments[0]))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","59.00034","call.arguments[0]","super","visitNewExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".visitNewExpression","59.00034","calls","super","visitNewExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".","62.00012","TS.MethodDefined","PromiseAnalyzer","validatePromiseUsage","(promiseInstantiation: any, block: any, completionIdentifiers: any[]) => void","(@param)?\W+promiseInstantiation *\W+ !! missing description.
(@param)?\W+completionIdentifiers *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","62.00059","define.Parameter","validatePromiseUsage","promiseInstantiation","any","/*Args:*/<any>promiseInstantiation"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","62.00084","define.Parameter","validatePromiseUsage","block","any","/*Args:*/<any>block"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","62.00116","define.Parameter","validatePromiseUsage","completionIdentifiers","any[]","/*Args:*/<any[]>completionIdentifiers"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","63.00012","TS.VariableDeclaration","","blockAnalyzer","PromiseCompletionWalker",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","63.00062","calls","/*<PromiseAnalyzer>*/ this","getSourceFile","any","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","63.00062","pickUpedName","/*<PromiseAnalyzer>*/ this","getSourceFile","","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","63.00084","calls","/*<PromiseAnalyzer>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","63.00084","pickUpedName","/*<PromiseAnalyzer>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","63.00097","Assign","blockAnalyzer","","PromiseCompletionWalker","(new PromiseCompletionWalker(this.getSourceFile(), this.getOptions(), (/*Args:*/<any[]>completionIdentifiers)))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","63.00097","ref.type","PromiseCompletionWalker","","",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","63.00097","pickUpedName","/*<PromiseAnalyzer>*/ this","","","(new PromiseCompletionWalker(this.getSourceFile(), this.getOptions(), (/*Args:*/<any[]>completionIdentifiers)))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","63.00097","pickUpedName","/*<PromiseAnalyzer>*/ this","getOptions","","(new PromiseCompletionWalker(this.getSourceFile(), this.getOptions(), (/*Args:*/<any[]>completionIdentifiers)))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","64.00033","call.arguments[0]","(new PromiseCompletionWalker(this.getSourceFile(), this.getOptions(), (/*Args:*/<any[]>completionIdentifiers)))","visitNode","any","(/*Args:*/<any>block)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","64.00033","calls","(new PromiseCompletionWalker(this.getSourceFile(), this.getOptions(), (/*Args:*/<any[]>completionIdentifiers)))","visitNode","void","((/*Args:*/<any>block))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","64.00040","Conditional","! blockAnalyzer.isAlwaysCompleted()","","/*IfStatement*/ boolean/* no Else Clause*/","! (new PromiseCompletionWalker(this.getSourceFile(), this.getOptions(), (/*Args:*/<any[]>completionIdentifiers))).isAlwaysCompleted()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","65.00028","calls","(new PromiseCompletionWalker(this.getSourceFile(), this.getOptions(), (/*Args:*/<any[]>completionIdentifiers)))","isAlwaysCompleted","boolean","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","66.00016","TS.VariableDeclaration","","failure","any",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","66.00067","calls","(/*Args:*/<any>promiseInstantiation)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","66.00100","calls","(/*Args:*/<any>promiseInstantiation)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","66.00117","call.arguments[0]","/*<PromiseAnalyzer>*/ this","createFailure","any","(/*Args:*/<any>promiseInstantiation).getStart()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","66.00117","call.arguments[1]","/*<PromiseAnalyzer>*/ this","createFailure","any","(/*Args:*/<any>promiseInstantiation).getWidth()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","66.00117","call.arguments[2]","/*<PromiseAnalyzer>*/ this","createFailure","string","'A Promise was found that appears to not have resolve or reject invoked on all code paths'"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","66.00117","calls","/*<PromiseAnalyzer>*/ this","createFailure","any","((/*Args:*/<any>promiseInstantiation).getStart(), (/*Args:*/<any>promiseInstantiation).getWidth(), 'A Promise was found that appears to not have resolve or reject invoked on all code paths')"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","66.00117","pickUpedName","/*<PromiseAnalyzer>*/ this","createFailure","","((/*Args:*/<any>promiseInstantiation).getStart(), (/*Args:*/<any>promiseInstantiation).getWidth(), 'A Promise was found that appears to not have resolve or reject invoked on all code paths')"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","66.00117","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>promiseInstantiation).getStart(), (/*Args:*/<any>promiseInstantiation).getWidth(), 'A Promise was found that appears to not have resolve or reject invoked on all code paths')"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","66.00117","Assign","failure","","any","this.createFailure((/*Args:*/<any>promiseInstantiation).getStart(), (/*Args:*/<any>promiseInstantiation).getWidth(), 'A Promise was found that appears to not have resolve or reject invoked on all code paths')"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","66.00117","pickUpedName","/*<PromiseAnalyzer>*/ this","createFailure","","this.createFailure((/*Args:*/<any>promiseInstantiation).getStart(), (/*Args:*/<any>promiseInstantiation).getWidth(), 'A Promise was found that appears to not have resolve or reject invoked on all code paths')"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","66.00117","pickUpedName","Rule","FAILURE_STRING","","this.createFailure((/*Args:*/<any>promiseInstantiation).getStart(), (/*Args:*/<any>promiseInstantiation).getWidth(), 'A Promise was found that appears to not have resolve or reject invoked on all code paths')"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","67.00029","call.arguments[0]","/*<PromiseAnalyzer>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>promiseInstantiation).getStart(), (/*Args:*/<any>promiseInstantiation).getWidth(), 'A Promise was found that appears to not have resolve or reject invoked on all code paths')"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","67.00029","calls","/*<PromiseAnalyzer>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>promiseInstantiation).getStart(), (/*Args:*/<any>promiseInstantiation).getWidth(), 'A Promise was found that appears to not have resolve or reject invoked on all code paths'))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer",".validatePromiseUsage","67.00029","pickUpedName","/*<PromiseAnalyzer>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>promiseInstantiation).getStart(), (/*Args:*/<any>promiseInstantiation).getWidth(), 'A Promise was found that appears to not have resolve or reject invoked on all code paths'))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseAnalyzer","","72.00006","defined","PromiseCompletionWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker","","72.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker","","74.00012","TS.PropertyDefined","PromiseCompletionWalker","completionIdentifiers","any[]",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker","","74.00039","TS.PropertyDefined","PromiseCompletionWalker","completionIdentifiers","any[]",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker","","75.00012","TS.PropertyDefined","PromiseCompletionWalker","wasCompleted","boolean",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker","","75.00037","TS.PropertyDefined","PromiseCompletionWalker","wasCompleted","boolean",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker","","75.00037","Assign","PromiseCompletionWalker","wasCompleted","boolean","false"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker","","76.00012","TS.PropertyDefined","PromiseCompletionWalker","allBranchesCompleted","boolean",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker","","76.00045","TS.PropertyDefined","PromiseCompletionWalker","allBranchesCompleted","boolean",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker","","76.00045","Assign","PromiseCompletionWalker","allBranchesCompleted","boolean","true"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker","","77.00012","TS.PropertyDefined","PromiseCompletionWalker","hasBranches","boolean",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker","","77.00036","TS.PropertyDefined","PromiseCompletionWalker","hasBranches","boolean","/**
by default, there are no branches, so this is true
"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker","","77.00036","Assign","PromiseCompletionWalker","hasBranches","boolean","false"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker","","78.00012","TS.PropertyDefined","PromiseCompletionWalker","walkerOptions","any",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker","","78.00033","TS.PropertyDefined","PromiseCompletionWalker","walkerOptions","any",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".constructor","78.00042","TS.MethodDefined","PromiseCompletionWalker","Constructor","any",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".constructor","80.00032","define.Parameter","/*<PromiseCompletionWalker>*/ this.","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".constructor","80.00058","define.Parameter","/*<PromiseCompletionWalker>*/ this.","options","any","/*Args:*/<any>options"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".constructor","80.00094","define.Parameter","/*<PromiseCompletionWalker>*/ this.","completionIdentifiers","any[]","/*Args:*/<any[]>completionIdentifiers"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".constructor","81.00026","call.arguments[0]","super","","any","PromiseCompletionWalker.sourceFile"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".constructor","81.00026","call.arguments[1]","super","","any","PromiseCompletionWalker.options"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".constructor","81.00026","calls","super","","void","(PromiseCompletionWalker.sourceFile, PromiseCompletionWalker.options)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".constructor","81.00026","pickUpedName","sourceFile","","","(PromiseCompletionWalker.sourceFile, PromiseCompletionWalker.options)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".constructor","81.00026","pickUpedName","options","","","(PromiseCompletionWalker.sourceFile, PromiseCompletionWalker.options)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".constructor","82.00029","Assign","/*<PromiseCompletionWalker>*/ this","walkerOptions","= /*any*/","PromiseCompletionWalker.options"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".constructor","82.00029","pickUpedName","/*<PromiseCompletionWalker>*/ this","walkerOptions","","PromiseCompletionWalker.options"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".constructor","82.00029","pickUpedName","options","","","PromiseCompletionWalker.options"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".constructor","83.00037","Assign","/*<PromiseCompletionWalker>*/ this","completionIdentifiers","= /*any[]*/","PromiseCompletionWalker.completionIdentifiers"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".constructor","83.00037","pickUpedName","/*<PromiseCompletionWalker>*/ this","completionIdentifiers","","PromiseCompletionWalker.completionIdentifiers"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".constructor","83.00037","pickUpedName","completionIdentifiers","","","PromiseCompletionWalker.completionIdentifiers"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".","87.00011","TS.MethodDefined","PromiseCompletionWalker","visitNode","(node: any) => void","/**
need to make this public so it can invoked from parent walker

(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitNode","87.00031","define.Parameter","visitNode","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitNode","88.00025","call.arguments[0]","super","visitNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitNode","88.00025","calls","super","visitNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".","91.00011","TS.MethodDefined","PromiseCompletionWalker","isAlwaysCompleted","() => boolean","@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isAlwaysCompleted","91.00043","Conditional","/*<PromiseCompletionWalker>*/ this.wasCompleted","","/*IfStatement*/ boolean/* no Else Clause*/","this.wasCompleted"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isAlwaysCompleted","93.00019","return","","","boolean","true"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isAlwaysCompleted","94.00010","Conditional","! this.hasBranches","","/*IfStatement*/ boolean/* no Else Clause*/","! this.hasBranches"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isAlwaysCompleted","96.00019","return","","","boolean","false"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isAlwaysCompleted","98.00021","return","","","boolean","this.allBranchesCompleted"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".","101.00014","TS.MethodDefined","PromiseCompletionWalker","visitIfStatement","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","101.00041","define.Parameter","visitIfStatement","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","102.00027","Assign","/*<PromiseCompletionWalker>*/ this","hasBranches","= /*boolean*/","{|this.hasBranches |,| true|} "
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","102.00027","pickUpedName","/*<PromiseCompletionWalker>*/ this","hasBranches","","{|this.hasBranches |,| true|} "
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","105.00012","TS.VariableDeclaration","","ifAnalyzer","PromiseCompletionWalker",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","105.00059","calls","/*<PromiseCompletionWalker>*/ this","getSourceFile","any","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","105.00059","pickUpedName","/*<PromiseCompletionWalker>*/ this","getSourceFile","","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","105.00101","Assign","ifAnalyzer","","PromiseCompletionWalker","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, PromiseCompletionWalker.completionIdentifiers))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","105.00101","ref.type","PromiseCompletionWalker","","",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","105.00101","pickUpedName","/*<PromiseCompletionWalker>*/ this","","","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, PromiseCompletionWalker.completionIdentifiers))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","105.00101","pickUpedName","/*<PromiseCompletionWalker>*/ this","walkerOptions","","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, PromiseCompletionWalker.completionIdentifiers))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","105.00101","pickUpedName","/*<PromiseCompletionWalker>*/ this","completionIdentifiers","","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, PromiseCompletionWalker.completionIdentifiers))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","106.00012","TS.VariableDeclaration","","elseAnalyzer","PromiseCompletionWalker",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","106.00061","calls","/*<PromiseCompletionWalker>*/ this","getSourceFile","any","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","106.00061","pickUpedName","/*<PromiseCompletionWalker>*/ this","getSourceFile","","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","106.00103","Assign","elseAnalyzer","","PromiseCompletionWalker","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, PromiseCompletionWalker.completionIdentifiers))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","106.00103","ref.type","PromiseCompletionWalker","","",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","106.00103","pickUpedName","/*<PromiseCompletionWalker>*/ this","","","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, PromiseCompletionWalker.completionIdentifiers))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","106.00103","pickUpedName","/*<PromiseCompletionWalker>*/ this","walkerOptions","","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, PromiseCompletionWalker.completionIdentifiers))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","106.00103","pickUpedName","/*<PromiseCompletionWalker>*/ this","completionIdentifiers","","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, PromiseCompletionWalker.completionIdentifiers))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","108.00035","call.arguments[0]","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, PromiseCompletionWalker.completionIdentifiers))","visitNode","any","(/*Args:*/<any>node).thenStatement"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","108.00035","calls","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, PromiseCompletionWalker.completionIdentifiers))","visitNode","void","((/*Args:*/<any>node).thenStatement)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","108.00050","Conditional","! ifAnalyzer.isAlwaysCompleted()","","/*IfStatement*/ boolean","! (new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, PromiseCompletionWalker.completionIdentifiers)).isAlwaysCompleted()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","110.00025","calls","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, PromiseCompletionWalker.completionIdentifiers))","isAlwaysCompleted","boolean","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","111.00040","Assign","/*<PromiseCompletionWalker>*/ this","allBranchesCompleted","= /*boolean*/","{|this.allBranchesCompleted |,| false|} "
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","111.00040","pickUpedName","/*<PromiseCompletionWalker>*/ this","allBranchesCompleted","","{|this.allBranchesCompleted |,| false|} "
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","112.00015","Conditional","node.elseStatement != null","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).elseStatement != null"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","112.00041","Compare","node","elseStatement","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","112.00041","CompareR","null","","/*Reverse*/!= /*any*/","(/*Args:*/<any>node).elseStatement"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","113.00041","call.arguments[0]","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, PromiseCompletionWalker.completionIdentifiers))","visitNode","any","(/*Args:*/<any>node).elseStatement"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","113.00041","calls","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, PromiseCompletionWalker.completionIdentifiers))","visitNode","void","((/*Args:*/<any>node).elseStatement)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","113.00056","Conditional","! elseAnalyzer.isAlwaysCompleted()","","/*IfStatement*/ boolean/* no Else Clause*/","! (new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, PromiseCompletionWalker.completionIdentifiers)).isAlwaysCompleted()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","114.00031","calls","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, PromiseCompletionWalker.completionIdentifiers))","isAlwaysCompleted","boolean","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","115.00044","Assign","/*<PromiseCompletionWalker>*/ this","allBranchesCompleted","= /*boolean*/","{|this.allBranchesCompleted |,| false|} "
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitIfStatement","115.00044","pickUpedName","/*<PromiseCompletionWalker>*/ this","allBranchesCompleted","","{|this.allBranchesCompleted |,| false|} "
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".","121.00014","TS.MethodDefined","PromiseCompletionWalker","visitCallExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","121.00044","define.Parameter","visitCallExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","121.00067","Conditional","node.expression.kind === SyntaxKind.current().Identifier","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).expression.kind === SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","123.00049","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","123.00059","ref.varName","SyntaxKind.current()","Identifier","number",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","123.00059","Compare","node.expression","kind","=== /*number*/","SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","123.00059","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.kind"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","123.00072","Conditional","/*<PromiseCompletionWalker>*/ this.isCompletionIdentifier(node.expression)","","/*IfStatement*/ boolean/* no Else Clause*/","this.isCompletionIdentifier((/*Args:*/<any>node).expression)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","124.00050","call.arguments[0]","/*<PromiseCompletionWalker>*/ this","isCompletionIdentifier","any","(/*Args:*/<any>node).expression"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","124.00050","calls","/*<PromiseCompletionWalker>*/ this","isCompletionIdentifier","boolean","((/*Args:*/<any>node).expression)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","124.00050","pickUpedName","/*<PromiseCompletionWalker>*/ this","isCompletionIdentifier","","((/*Args:*/<any>node).expression)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","125.00036","Assign","/*<PromiseCompletionWalker>*/ this","wasCompleted","= /*boolean*/","{|this.wasCompleted |,| true|} "
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","125.00036","pickUpedName","/*<PromiseCompletionWalker>*/ this","wasCompleted","","{|this.wasCompleted |,| true|} "
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","125.00042","return","","","void",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","130.00012","TS.VariableDeclaration","","referenceEscaped","boolean",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression;Utils.exists(Arguments[1])","130.00070","call.func","Utils","exists","(argument: any) => boolean",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression;Utils.exists(Arguments[1])","130.00085","define.Parameter","argument","","any","/*Args:*/<any>argument"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression;Utils.exists(Arguments[1])","131.00048","call.arguments[0]","/*<PromiseCompletionWalker>*/ this","isCompletionIdentifier","any","(/*Args:*/<any>argument)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression;Utils.exists(Arguments[1])","131.00048","calls","/*<PromiseCompletionWalker>*/ this","isCompletionIdentifier","boolean","((/*Args:*/<any>argument))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression;Utils.exists(Arguments[1])","131.00048","pickUpedName","/*<PromiseCompletionWalker>*/ this","isCompletionIdentifier","","((/*Args:*/<any>argument))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression;Utils.exists(Arguments[1])","131.00048","return","","","boolean","this.isCompletionIdentifier((/*Args:*/<any>argument))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","131.00048","call.arguments[0]","Utils","exists","any","(/*Args:*/<any>node).arguments"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","131.00048","call.arguments[1]","Utils","exists","(argument: any) => boolean","/**(argument: any) => boolean**/"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","131.00048","calls","Utils","exists","boolean","((/*Args:*/<any>node).arguments, /**(argument: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","131.00048","Assign","referenceEscaped","","boolean","Utils.exists((/*Args:*/<any>node).arguments, /**(argument: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","132.00012","Conditional","referenceEscaped","","/*IfStatement*/ boolean/* no Else Clause*/","Utils.exists((/*Args:*/<any>node).arguments, /**(argument: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","134.00032","Assign","/*<PromiseCompletionWalker>*/ this","wasCompleted","= /*boolean*/","{|this.wasCompleted |,| true|} "
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","134.00032","pickUpedName","/*<PromiseCompletionWalker>*/ this","wasCompleted","","{|this.wasCompleted |,| true|} "
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","134.00038","return","","","void",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","137.00035","call.arguments[0]","super","visitCallExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitCallExpression","137.00035","calls","super","visitCallExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".","141.00014","TS.MethodDefined","PromiseCompletionWalker","visitArrowFunction","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","141.00043","define.Parameter","visitArrowFunction","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","143.00012","TS.VariableDeclaration","","nonShadowedIdentifiers","any[]",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","143.00096","call.arguments[0]","/*<PromiseCompletionWalker>*/ this","getNonShadowedCompletionIdentifiers","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","143.00096","calls","/*<PromiseCompletionWalker>*/ this","getNonShadowedCompletionIdentifiers","any[]","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","143.00096","pickUpedName","/*<PromiseCompletionWalker>*/ this","getNonShadowedCompletionIdentifiers","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","143.00096","Assign","nonShadowedIdentifiers","","any[]","this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","143.00096","pickUpedName","/*<PromiseCompletionWalker>*/ this","getNonShadowedCompletionIdentifiers","","this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","144.00012","TS.VariableDeclaration","","analyzer","PromiseCompletionWalker",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","144.00057","calls","/*<PromiseCompletionWalker>*/ this","getSourceFile","any","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","144.00057","pickUpedName","/*<PromiseCompletionWalker>*/ this","getSourceFile","","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","144.00093","Assign","analyzer","","PromiseCompletionWalker","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node))))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","144.00093","ref.type","PromiseCompletionWalker","","",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","144.00093","pickUpedName","/*<PromiseCompletionWalker>*/ this","","","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node))))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","144.00093","pickUpedName","/*<PromiseCompletionWalker>*/ this","walkerOptions","","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node))))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","145.00033","call.arguments[0]","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node))))","visitNode","any","(/*Args:*/<any>node).body"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","145.00033","calls","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node))))","visitNode","void","((/*Args:*/<any>node).body)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","145.00039","Conditional","analyzer.isAlwaysCompleted()","","/*IfStatement*/ boolean/* no Else Clause*/","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node)))).isAlwaysCompleted()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","146.00022","calls","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node))))","isAlwaysCompleted","boolean","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","147.00032","Assign","/*<PromiseCompletionWalker>*/ this","wasCompleted","= /*boolean*/","{|this.wasCompleted |,| true|} "
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitArrowFunction","147.00032","pickUpedName","/*<PromiseCompletionWalker>*/ this","wasCompleted","","{|this.wasCompleted |,| true|} "
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".","151.00014","TS.MethodDefined","PromiseCompletionWalker","visitFunctionExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","151.00048","define.Parameter","visitFunctionExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","153.00012","TS.VariableDeclaration","","nonShadowedIdentifiers","any[]",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","153.00096","call.arguments[0]","/*<PromiseCompletionWalker>*/ this","getNonShadowedCompletionIdentifiers","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","153.00096","calls","/*<PromiseCompletionWalker>*/ this","getNonShadowedCompletionIdentifiers","any[]","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","153.00096","pickUpedName","/*<PromiseCompletionWalker>*/ this","getNonShadowedCompletionIdentifiers","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","153.00096","Assign","nonShadowedIdentifiers","","any[]","this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","153.00096","pickUpedName","/*<PromiseCompletionWalker>*/ this","getNonShadowedCompletionIdentifiers","","this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","154.00012","TS.VariableDeclaration","","analyzer","PromiseCompletionWalker",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","154.00057","calls","/*<PromiseCompletionWalker>*/ this","getSourceFile","any","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","154.00057","pickUpedName","/*<PromiseCompletionWalker>*/ this","getSourceFile","","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","154.00093","Assign","analyzer","","PromiseCompletionWalker","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node))))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","154.00093","ref.type","PromiseCompletionWalker","","",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","154.00093","pickUpedName","/*<PromiseCompletionWalker>*/ this","","","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node))))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","154.00093","pickUpedName","/*<PromiseCompletionWalker>*/ this","walkerOptions","","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node))))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","155.00033","call.arguments[0]","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node))))","visitNode","any","(/*Args:*/<any>node).body"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","155.00033","calls","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node))))","visitNode","void","((/*Args:*/<any>node).body)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","155.00039","Conditional","analyzer.isAlwaysCompleted()","","/*IfStatement*/ boolean/* no Else Clause*/","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node)))).isAlwaysCompleted()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","156.00022","calls","(new PromiseCompletionWalker(this.getSourceFile(), PromiseCompletionWalker.options, this.getNonShadowedCompletionIdentifiers((/*Args:*/<any>node))))","isAlwaysCompleted","boolean","()"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","157.00032","Assign","/*<PromiseCompletionWalker>*/ this","wasCompleted","= /*boolean*/","{|this.wasCompleted |,| true|} "
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".visitFunctionExpression","157.00032","pickUpedName","/*<PromiseCompletionWalker>*/ this","wasCompleted","","{|this.wasCompleted |,| true|} "
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".","161.00012","TS.MethodDefined","PromiseCompletionWalker","getNonShadowedCompletionIdentifiers","(declaration: any) => any[]","(@param)?\W+declaration *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers","161.00065","define.Parameter","getNonShadowedCompletionIdentifiers","declaration","any","/*Args:*/<any>declaration"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers","163.00012","TS.VariableDeclaration","","result","any[]",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers","163.00038","Assign","result","","undefined[]","[]"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0])","164.00044","call.func","PromiseCompletionWalker.completionIdentifiers","forEach","(identifier: any) => void",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0])","164.00044","pickUpedName","/*<PromiseCompletionWalker>*/ this.completionIdentifiers","forEach","","PromiseCompletionWalker.completionIdentifiers.forEach"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0])","164.00060","define.Parameter","identifier","","any","/*Args:*/<any>identifier"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0])","166.00016","TS.VariableDeclaration","","isShadowed","boolean",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0]);Utils.exists(Arguments[1])","166.00075","call.func","Utils","exists","(parameter: any) => boolean",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0]);Utils.exists(Arguments[1])","166.00091","define.Parameter","parameter","","any","/*Args:*/<any>parameter"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0]);Utils.exists(Arguments[1])","167.00071","call.arguments[0]","AstUtils","isSameIdentifer","any","(/*Args:*/<any>identifier)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0]);Utils.exists(Arguments[1])","167.00071","call.arguments[1]","AstUtils","isSameIdentifer","any","(/*Args:*/<any>parameter).name"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0]);Utils.exists(Arguments[1])","167.00071","calls","AstUtils","isSameIdentifer","boolean","((/*Args:*/<any>identifier), (/*Args:*/<any>parameter).name)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0]);Utils.exists(Arguments[1])","167.00071","pickUpedName","identifier","","","((/*Args:*/<any>identifier), (/*Args:*/<any>parameter).name)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0]);Utils.exists(Arguments[1])","167.00071","return","","","boolean","AstUtils.isSameIdentifer((/*Args:*/<any>identifier), (/*Args:*/<any>parameter).name)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0])","167.00071","call.arguments[0]","Utils","exists","any","(/*Args:*/<any>declaration).parameters"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0])","167.00071","call.arguments[1]","Utils","exists","(parameter: any) => boolean","/**(parameter: any) => boolean**/"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0])","167.00071","calls","Utils","exists","boolean","((/*Args:*/<any>declaration).parameters, /**(parameter: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0])","167.00071","pickUpedName","declaration","parameters","","((/*Args:*/<any>declaration).parameters, /**(parameter: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0])","167.00071","Assign","isShadowed","","boolean","Utils.exists((/*Args:*/<any>declaration).parameters, /**(parameter: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0])","167.00071","pickUpedName","declaration","parameters","","Utils.exists((/*Args:*/<any>declaration).parameters, /**(parameter: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0])","168.00016","Conditional","! isShadowed","","/*IfStatement*/ boolean/* no Else Clause*/","! Utils.exists((/*Args:*/<any>declaration).parameters, /**(parameter: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0])","170.00029","call.arguments[0]","result","push","any","(/*Args:*/<any>identifier)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0])","170.00029","calls","result","push","number","((/*Args:*/<any>identifier))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers;PromiseCompletionWalker.completionIdentifiers.forEach(Arguments[0])","170.00029","pickUpedName","result","push","","((/*Args:*/<any>identifier))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers","170.00029","call.arguments[0]","PromiseCompletionWalker.completionIdentifiers","forEach","(identifier: any) => void","/**(identifier: any) => void**/"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers","170.00029","calls","PromiseCompletionWalker.completionIdentifiers","forEach","void","(/**(identifier: any) => void**/)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers","170.00029","pickUpedName","/*<PromiseCompletionWalker>*/ this.completionIdentifiers","forEach","","(/**(identifier: any) => void**/)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".getNonShadowedCompletionIdentifiers","174.00015","return","","","any[]","{|[] |,| (/*Args:*/<any>identifier)|} "
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".","177.00012","TS.MethodDefined","PromiseCompletionWalker","isCompletionIdentifier","(sourceIdentifier: any) => boolean","(@param)?\W+sourceIdentifier *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isCompletionIdentifier","177.00057","define.Parameter","isCompletionIdentifier","sourceIdentifier","any","/*Args:*/<any>sourceIdentifier"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isCompletionIdentifier;Utils.exists(Arguments[1])","178.00056","call.func","Utils","exists","(identifier: any) => boolean",""
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isCompletionIdentifier;Utils.exists(Arguments[1])","178.00073","define.Parameter","identifier","","any","/*Args:*/<any>identifier"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isCompletionIdentifier;Utils.exists(Arguments[1])","179.00062","call.arguments[0]","AstUtils","isSameIdentifer","any","(/*Args:*/<any>sourceIdentifier)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isCompletionIdentifier;Utils.exists(Arguments[1])","179.00062","call.arguments[1]","AstUtils","isSameIdentifer","any","(/*Args:*/<any>identifier)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isCompletionIdentifier;Utils.exists(Arguments[1])","179.00062","calls","AstUtils","isSameIdentifer","boolean","((/*Args:*/<any>sourceIdentifier), (/*Args:*/<any>identifier))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isCompletionIdentifier;Utils.exists(Arguments[1])","179.00062","pickUpedName","sourceIdentifier","","","((/*Args:*/<any>sourceIdentifier), (/*Args:*/<any>identifier))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isCompletionIdentifier;Utils.exists(Arguments[1])","179.00062","return","","","boolean","AstUtils.isSameIdentifer((/*Args:*/<any>sourceIdentifier), (/*Args:*/<any>identifier))"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isCompletionIdentifier","179.00062","call.arguments[0]","Utils","exists","any[]","PromiseCompletionWalker.completionIdentifiers"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isCompletionIdentifier","179.00062","call.arguments[1]","Utils","exists","(identifier: any) => boolean","/**(identifier: any) => boolean**/"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isCompletionIdentifier","179.00062","calls","Utils","exists","boolean","(PromiseCompletionWalker.completionIdentifiers, /**(identifier: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isCompletionIdentifier","179.00062","pickUpedName","/*<PromiseCompletionWalker>*/ this","completionIdentifiers","","(PromiseCompletionWalker.completionIdentifiers, /**(identifier: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/promiseMustCompleteRule.ts","PromiseCompletionWalker",".isCompletionIdentifier","179.00062","return","","","boolean","Utils.exists(PromiseCompletionWalker.completionIdentifiers, /**(identifier: any) => boolean**/)"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Exception","","7.00022","TS.PropertyDefined","Exception","file","string",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Exception","","8.00018","TS.PropertyDefined","Exception","method","string",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Exception","","9.00020","TS.PropertyDefined","Exception","comment","string",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Exception","","16.00013","defined","Rule","","TS.Class","export 
/**
* Implementation of the react-no-dangerous-html rule.
 */
"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule","","16.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".","18.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","18.00034","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","19.00012","TS.VariableDeclaration","","documentRegistry","any",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","19.00035","calls","ts","createDocumentRegistry","any","()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","19.00035","Assign","documentRegistry","","any","ts.createDocumentRegistry()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","20.00012","TS.VariableDeclaration","","languageServiceHost","any",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","20.00098","calls","(/*Args:*/<any>sourceFile)","getFullText","any","()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","20.00098","call.arguments[0]","Lint","createLanguageServiceHost","any","(/*Args:*/<any>sourceFile).fileName"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","20.00098","call.arguments[1]","Lint","createLanguageServiceHost","any","(/*Args:*/<any>sourceFile).getFullText()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","20.00098","calls","Lint","createLanguageServiceHost","any","((/*Args:*/<any>sourceFile).fileName, (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","20.00098","Assign","languageServiceHost","","any","Lint.createLanguageServiceHost((/*Args:*/<any>sourceFile).fileName, (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","21.00012","TS.VariableDeclaration","","languageService","any",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","21.00076","call.arguments[0]","ts","createLanguageService","any","Lint.createLanguageServiceHost((/*Args:*/<any>sourceFile).fileName, (/*Args:*/<any>sourceFile).getFullText())"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","21.00076","call.arguments[1]","ts","createLanguageService","any","ts.createDocumentRegistry()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","21.00076","calls","ts","createLanguageService","any","(Lint.createLanguageServiceHost((/*Args:*/<any>sourceFile).fileName, (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","21.00076","Assign","languageService","","any","ts.createLanguageService(Lint.createLanguageServiceHost((/*Args:*/<any>sourceFile).fileName, (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","23.00080","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","23.00080","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","23.00093","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","NoDangerousHtmlWalker","(new NoDangerousHtmlWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost((/*Args:*/<any>sourceFile).fileName, (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry())))"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","23.00093","calls","/*<Rule>*/ this","applyWithWalker","any","((new NoDangerousHtmlWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost((/*Args:*/<any>sourceFile).fileName, (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","23.00093","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new NoDangerousHtmlWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost((/*Args:*/<any>sourceFile).fileName, (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","23.00093","pickUpedName","/*<Rule>*/ this","getOptions","","((new NoDangerousHtmlWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost((/*Args:*/<any>sourceFile).fileName, (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".apply","23.00093","return","","","any","this.applyWithWalker((new NoDangerousHtmlWalker((/*Args:*/<any>sourceFile), this.getOptions(), ts.createLanguageService(Lint.createLanguageServiceHost((/*Args:*/<any>sourceFile).fileName, (/*Args:*/<any>sourceFile).getFullText()), ts.createDocumentRegistry()))))"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".","29.00018","TS.MethodDefined","Rule","getExceptions","(options: any) => Exception[]","/**
Exposed for testing.

(@param)?\W+options *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".getExceptions","29.00048","define.Parameter","getExceptions","options","any","/*Args:*/<any>options"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".getExceptions","29.00073","Conditional","options.ruleArguments instanceof Array","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>options).ruleArguments instanceof Array"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".getExceptions","30.00045","BinaryExpression","options","ruleArguments","instanceof /*ArrayConstructor*/","Array"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".getExceptions","30.00045","ref.type","ArrayConstructor","","",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".getExceptions","31.00042","return","","","any","(/*Args:*/<any>options).ruleArguments[0]"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".getExceptions","32.00010","Conditional","options instanceof Array","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>options) instanceof Array"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".getExceptions","33.00031","BinaryExpression","options","","instanceof /*ArrayConstructor*/","Array"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".getExceptions","33.00031","ref.type","ArrayConstructor","","",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".getExceptions","34.00038","return","","","Exception[]","(/*Args:*/<any>options)"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".getExceptions","34.00038","ref.type","Exception","","return",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule",".getExceptions","36.00015","return","","","null","null"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","Rule","","40.00006","defined","NoDangerousHtmlWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker","","40.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker","","42.00012","TS.PropertyDefined","NoDangerousHtmlWalker","languageServices","any",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker","","42.00035","TS.PropertyDefined","NoDangerousHtmlWalker","languageServices","any",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker","","43.00012","TS.PropertyDefined","NoDangerousHtmlWalker","currentMethodName","string",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker","","43.00032","TS.PropertyDefined","NoDangerousHtmlWalker","currentMethodName","string",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".constructor","43.00040","TS.MethodDefined","NoDangerousHtmlWalker","Constructor","any",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".constructor","45.00033","define.Parameter","/*<NoDangerousHtmlWalker>*/ this.","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".constructor","45.00060","define.Parameter","/*<NoDangerousHtmlWalker>*/ this.","options","any","/*Args:*/<any>options"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".constructor","45.00092","define.Parameter","/*<NoDangerousHtmlWalker>*/ this.","languageServices","any","/*Args:*/<any>languageServices"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".constructor","46.00026","call.arguments[0]","super","","any","NoDangerousHtmlWalker.sourceFile"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".constructor","46.00026","call.arguments[1]","super","","any","NoDangerousHtmlWalker.options"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".constructor","46.00026","calls","super","","void","(NoDangerousHtmlWalker.sourceFile, NoDangerousHtmlWalker.options)"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".constructor","46.00026","pickUpedName","sourceFile","","","(NoDangerousHtmlWalker.sourceFile, NoDangerousHtmlWalker.options)"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".constructor","46.00026","pickUpedName","options","","","(NoDangerousHtmlWalker.sourceFile, NoDangerousHtmlWalker.options)"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".constructor","47.00032","Assign","/*<NoDangerousHtmlWalker>*/ this","languageServices","= /*any*/","NoDangerousHtmlWalker.languageServices"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".constructor","47.00032","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","languageServices","","NoDangerousHtmlWalker.languageServices"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".constructor","47.00032","pickUpedName","languageServices","","","NoDangerousHtmlWalker.languageServices"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".constructor","48.00033","Assign","/*<NoDangerousHtmlWalker>*/ this","currentMethodName","= /*string*/","'<unknown>'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".constructor","48.00033","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","currentMethodName","","'<unknown>'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".","51.00014","TS.MethodDefined","NoDangerousHtmlWalker","visitMethodDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitMethodDeclaration","51.00047","define.Parameter","visitMethodDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitMethodDeclaration","52.00051","ref.varName","(<any>node.name)","text","any",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitMethodDeclaration","52.00051","Assign","/*<NoDangerousHtmlWalker>*/ this","currentMethodName","= /*any*/","{|'<unknown>' |,| ((/*Args:*/<any>node).name).text|} "
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitMethodDeclaration","52.00051","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","currentMethodName","","{|'<unknown>' |,| ((/*Args:*/<any>node).name).text|} "
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitMethodDeclaration","53.00038","call.arguments[0]","super","visitMethodDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitMethodDeclaration","53.00038","calls","super","visitMethodDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitMethodDeclaration","54.00033","Assign","/*<NoDangerousHtmlWalker>*/ this","currentMethodName","= /*string*/","{|'<unknown>' |,| ((/*Args:*/<any>node).name).text|} "
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitMethodDeclaration","54.00033","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","currentMethodName","","{|'<unknown>' |,| ((/*Args:*/<any>node).name).text|} "
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".","57.00014","TS.MethodDefined","NoDangerousHtmlWalker","visitPropertyAssignment","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","57.00048","define.Parameter","visitPropertyAssignment","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","58.00039","call.arguments[0]","super","visitPropertyAssignment","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","58.00039","calls","super","visitPropertyAssignment","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","59.00012","TS.VariableDeclaration","","keyNode","any",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","59.00049","Assign","keyNode","","any","(/*Args:*/<any>node).name"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","59.00054","Conditional","keyNode.kind === SyntaxKind.current().Identifier","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).name.kind === SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","61.00041","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","61.00051","ref.varName","SyntaxKind.current()","Identifier","number",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","61.00051","Compare","keyNode","kind","=== /*number*/","SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","61.00051","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).name.kind"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","61.00064","Conditional","(keyNode).text === 'dangerouslySetInnerHTML'","","/*IfStatement*/ boolean/* no Else Clause*/","((/*Args:*/<any>node).name).text === 'dangerouslySetInnerHTML'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","62.00040","Compare","(<any>keyNode)","text","=== /*string*/","'dangerouslySetInnerHTML'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","62.00040","CompareR","'dangerouslySetInnerHTML'","","/*Reverse*/=== /*any*/","((/*Args:*/<any>node).name).text"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","62.00069","Conditional","! this.isSuppressed(this.currentMethodName)","","/*IfStatement*/ boolean/* no Else Clause*/","! this.isSuppressed({|'<unknown>' |,| ((/*Args:*/<any>node).name).text|} )"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","63.00045","call.arguments[0]","/*<NoDangerousHtmlWalker>*/ this","isSuppressed","string","{|'<unknown>' |,| ((/*Args:*/<any>node).name).text|} "
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","63.00045","calls","/*<NoDangerousHtmlWalker>*/ this","isSuppressed","boolean","({|'<unknown>' |,| ((/*Args:*/<any>node).name).text|} )"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","63.00045","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","isSuppressed","","({|'<unknown>' |,| ((/*Args:*/<any>node).name).text|} )"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","63.00045","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","currentMethodName","","({|'<unknown>' |,| ((/*Args:*/<any>node).name).text|} )"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","64.00024","TS.VariableDeclaration","","failureString","string",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","64.00102","ref.varName","/*<NoDangerousHtmlWalker>*/ this","currentMethodName","string",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","64.00102","BinaryExpression","'Invalid call to dangerouslySetInnerHTML in method \''","","+ /*string*/","{|'<unknown>' |,| ((/*Args:*/<any>node).name).text|} "
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","64.00102","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","currentMethodName","","{|'<unknown>' |,| ((/*Args:*/<any>node).name).text|} "
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","64.00121","BinaryExpression","'Invalid call to dangerouslySetInnerHTML in method \'' + this.currentMethodName","","+ /*string*/","'\'\n'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","64.00121","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","","","'\'\n'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","64.00129","BinaryExpression","'Invalid call to dangerouslySetInnerHTML in method \'' + this.currentMethodName + '\'\n'","","+ /*string*/","'    of source file '"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","64.00129","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","","","'    of source file '"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","65.00054","calls","/*<NoDangerousHtmlWalker>*/ this","getSourceFile","any","()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","65.00054","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","getSourceFile","","()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","65.00070","ref.varName","/*<NoDangerousHtmlWalker>*/ this.getSourceFile()","fileName","any",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","65.00070","BinaryExpression","'Invalid call to dangerouslySetInnerHTML in method \'' + this.currentMethodName + '\'\n    of source file '","","+ /*any*/","this.getSourceFile().fileName"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","65.00070","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","","","this.getSourceFile().fileName"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","65.00070","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","getSourceFile","","this.getSourceFile().fileName"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","65.00080","BinaryExpression","'Invalid call to dangerouslySetInnerHTML in method \'' + this.currentMethodName + '\'\n    of source file ' + this.getSourceFile().fileName","","+ /*string*/","'\'\n'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","65.00080","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","","","'\'\n'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","65.00088","BinaryExpression","'Invalid call to dangerouslySetInnerHTML in method \'' + this.currentMethodName + '\'\n    of source file ' + this.getSourceFile().fileName + '\'\n'","","+ /*string*/","'    Do *NOT* add a suppression for this warning. If you absolutely must use this API then you need\n'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","65.00088","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","","","'    Do *NOT* add a suppression for this warning. If you absolutely must use this API then you need\n'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","66.00129","BinaryExpression","'Invalid call to dangerouslySetInnerHTML in method \'' + this.currentMethodName + '\'\n    of source file ' + this.getSourceFile().fileName + '\'\n    Do *NOT* add a suppression for this warning. If you absolutely must use this API then you need\n'","","+ /*string*/","'    to review the usage with a security expert/QE representative. If they decide that this is an\n'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","66.00129","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","","","'    to review the usage with a security expert/QE representative. If they decide that this is an\n'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","67.00127","BinaryExpression","'Invalid call to dangerouslySetInnerHTML in method \'' + this.currentMethodName + '\'\n    of source file ' + this.getSourceFile().fileName + '\'\n    Do *NOT* add a suppression for this warning. If you absolutely must use this API then you need\n    to review the usage with a security expert/QE representative. If they decide that this is an\n'","","+ /*string*/","'    acceptable usage then add the exception to xss_exceptions.json'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","67.00127","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","","","'    acceptable usage then add the exception to xss_exceptions.json'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","67.00127","Assign","failureString","","string","'Invalid call to dangerouslySetInnerHTML in method \'' + {|'<unknown>' |,| ((/*Args:*/<any>node).name).text|}  + '\'\n    of source file ' + this.getSourceFile().fileName + '\'\n    Do *NOT* add a suppression for this warning. If you absolutely must use this API then you need\n    to review the usage with a security expert/QE representative. If they decide that this is an\n    acceptable usage then add the exception to xss_exceptions.json'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","67.00127","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","getSourceFile","","'Invalid call to dangerouslySetInnerHTML in method \'' + {|'<unknown>' |,| ((/*Args:*/<any>node).name).text|}  + '\'\n    of source file ' + this.getSourceFile().fileName + '\'\n    Do *NOT* add a suppression for this warning. If you absolutely must use this API then you need\n    to review the usage with a security expert/QE representative. If they decide that this is an\n    acceptable usage then add the exception to xss_exceptions.json'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","67.00127","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","currentMethodName","","'Invalid call to dangerouslySetInnerHTML in method \'' + {|'<unknown>' |,| ((/*Args:*/<any>node).name).text|}  + '\'\n    of source file ' + this.getSourceFile().fileName + '\'\n    Do *NOT* add a suppression for this warning. If you absolutely must use this API then you need\n    to review the usage with a security expert/QE representative. If they decide that this is an\n    acceptable usage then add the exception to xss_exceptions.json'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","69.00024","TS.VariableDeclaration","","position","any",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","69.00041","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","69.00041","Assign","position","","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","70.00024","TS.VariableDeclaration","","failure","any",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","70.00091","call.arguments[0]","/*<NoDangerousHtmlWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","70.00091","call.arguments[1]","/*<NoDangerousHtmlWalker>*/ this","createFailure","any","((/*Args:*/<any>node).name).text.length"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","70.00091","call.arguments[2]","/*<NoDangerousHtmlWalker>*/ this","createFailure","string","'Invalid call to dangerouslySetInnerHTML in method \'' + {|'<unknown>' |,| ((/*Args:*/<any>node).name).text|}  + '\'\n    of source file ' + this.getSourceFile().fileName + '\'\n    Do *NOT* add a suppression for this warning. If you absolutely must use this API then you need\n    to review the usage with a security expert/QE representative. If they decide that this is an\n    acceptable usage then add the exception to xss_exceptions.json'"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","70.00091","calls","/*<NoDangerousHtmlWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), ((/*Args:*/<any>node).name).text.length, 'Invalid call to dangerouslySetInnerHTML in method \'' + {|'<unknown>' |,| ((/*Args:*/<any>node).name).text|}  + '\'\n    of source file ' + this.getSourceFile().fileName + '\'\n    Do *NOT* add a suppression for this warning. If you absolutely must use this API then you need\n    to review the usage with a security expert/QE representative. If they decide that this is an\n    acceptable usage then add the exception to xss_exceptions.json')"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","70.00091","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), ((/*Args:*/<any>node).name).text.length, 'Invalid call to dangerouslySetInnerHTML in method \'' + {|'<unknown>' |,| ((/*Args:*/<any>node).name).text|}  + '\'\n    of source file ' + this.getSourceFile().fileName + '\'\n    Do *NOT* add a suppression for this warning. If you absolutely must use this API then you need\n    to review the usage with a security expert/QE representative. If they decide that this is an\n    acceptable usage then add the exception to xss_exceptions.json')"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","70.00091","Assign","failure","","any","this.createFailure((/*Args:*/<any>node).getStart(), ((/*Args:*/<any>node).name).text.length, 'Invalid call to dangerouslySetInnerHTML in method \'' + {|'<unknown>' |,| ((/*Args:*/<any>node).name).text|}  + '\'\n    of source file ' + this.getSourceFile().fileName + '\'\n    Do *NOT* add a suppression for this warning. If you absolutely must use this API then you need\n    to review the usage with a security expert/QE representative. If they decide that this is an\n    acceptable usage then add the exception to xss_exceptions.json')"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","70.00091","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","createFailure","","this.createFailure((/*Args:*/<any>node).getStart(), ((/*Args:*/<any>node).name).text.length, 'Invalid call to dangerouslySetInnerHTML in method \'' + {|'<unknown>' |,| ((/*Args:*/<any>node).name).text|}  + '\'\n    of source file ' + this.getSourceFile().fileName + '\'\n    Do *NOT* add a suppression for this warning. If you absolutely must use this API then you need\n    to review the usage with a security expert/QE representative. If they decide that this is an\n    acceptable usage then add the exception to xss_exceptions.json')"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","71.00037","call.arguments[0]","/*<NoDangerousHtmlWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), ((/*Args:*/<any>node).name).text.length, 'Invalid call to dangerouslySetInnerHTML in method \'' + {|'<unknown>' |,| ((/*Args:*/<any>node).name).text|}  + '\'\n    of source file ' + this.getSourceFile().fileName + '\'\n    Do *NOT* add a suppression for this warning. If you absolutely must use this API then you need\n    to review the usage with a security expert/QE representative. If they decide that this is an\n    acceptable usage then add the exception to xss_exceptions.json')"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","71.00037","calls","/*<NoDangerousHtmlWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), ((/*Args:*/<any>node).name).text.length, 'Invalid call to dangerouslySetInnerHTML in method \'' + {|'<unknown>' |,| ((/*Args:*/<any>node).name).text|}  + '\'\n    of source file ' + this.getSourceFile().fileName + '\'\n    Do *NOT* add a suppression for this warning. If you absolutely must use this API then you need\n    to review the usage with a security expert/QE representative. If they decide that this is an\n    acceptable usage then add the exception to xss_exceptions.json'))"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","71.00037","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), ((/*Args:*/<any>node).name).text.length, 'Invalid call to dangerouslySetInnerHTML in method \'' + {|'<unknown>' |,| ((/*Args:*/<any>node).name).text|}  + '\'\n    of source file ' + this.getSourceFile().fileName + '\'\n    Do *NOT* add a suppression for this warning. If you absolutely must use this API then you need\n    to review the usage with a security expert/QE representative. If they decide that this is an\n    acceptable usage then add the exception to xss_exceptions.json'))"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","75.00039","call.arguments[0]","super","visitPropertyAssignment","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".visitPropertyAssignment","75.00039","calls","super","visitPropertyAssignment","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".","78.00012","TS.MethodDefined","NoDangerousHtmlWalker","isSuppressed","(methodName: string) => boolean","(@param)?\W+methodName *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","78.00038","define.Parameter","isSuppressed","methodName","string","/*Args:*/<string>methodName"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","79.00012","TS.VariableDeclaration","","exceptions","Exception[]",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","79.00064","calls","/*<NoDangerousHtmlWalker>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","79.00064","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","79.00064","call.arguments[0]","Rule","getExceptions","any","this.getOptions()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","79.00064","calls","Rule","getExceptions","Exception[]","(this.getOptions())"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","79.00064","pickUpedName","Rule","getExceptions","","(this.getOptions())"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","79.00064","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","getOptions","","(this.getOptions())"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","79.00064","Assign","exceptions","","Exception[]","Rule.getExceptions(this.getOptions())"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","79.00064","ref.type","Exception","","",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","79.00064","pickUpedName","Rule","getExceptions","","Rule.getExceptions(this.getOptions())"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","79.00064","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","getOptions","","Rule.getExceptions(this.getOptions())"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","79.00078","Conditional","exceptions == null || exceptions.length === 0","","/*IfStatement*/ boolean/* no Else Clause*/","Rule.getExceptions(this.getOptions()) == null || Rule.getExceptions(this.getOptions()).length === 0"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","80.00026","Compare","exceptions","","== /*null*/","null"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","80.00026","CompareR","null","","/*Reverse*/== /*Exception[]*/","Rule.getExceptions(this.getOptions())"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","80.00056","Compare","exceptions","length","=== /*number*/","0"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","80.00056","CompareR","0","","/*Reverse*/=== /*number*/","Rule.getExceptions(this.getOptions()).length"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","80.00056","BinaryExpression","exceptions == null","","|| /*boolean*/","Rule.getExceptions(this.getOptions()).length === 0"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","81.00019","return","","","boolean","false"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","83.00012","TS.VariableDeclaration","","found","boolean",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","83.00020","Assign","found","","boolean","false"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","84.00028","call.func","Rule.getExceptions(this.getOptions())","forEach","(exception: Exception) => void",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","84.00028","pickUpedName","exceptions","forEach","","Rule.getExceptions(this.getOptions()).forEach"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","84.00040","define.Parameter","exception","","Exception","/*Args:*/<Exception>exception"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","84.00040","ref.type","Exception","","",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","84.00063","Conditional","exception.file === this.getSourceFile().fileName","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<Exception>exception).file === this.getSourceFile().fileName"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","85.00041","calls","/*<NoDangerousHtmlWalker>*/ this","getSourceFile","any","()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","85.00041","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","getSourceFile","","()"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","85.00057","ref.varName","/*<NoDangerousHtmlWalker>*/ this.getSourceFile()","fileName","any",""
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","85.00057","Compare","exception","file","=== /*any*/","this.getSourceFile().fileName"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","85.00057","pickUpedName","/*<NoDangerousHtmlWalker>*/ this","getSourceFile","","this.getSourceFile().fileName"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","85.00057","CompareR","/*<NoDangerousHtmlWalker>*/ this.getSourceFile()","","/*Reverse*/=== /*string*/","(/*Args:*/<Exception>exception).file"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","85.00068","Conditional","exception.method === methodName","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<Exception>exception).method === (/*Args:*/<string>methodName)"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","86.00041","Compare","exception","method","=== /*string*/","(/*Args:*/<string>methodName)"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","86.00041","pickUpedName","methodName","","","(/*Args:*/<string>methodName)"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","86.00041","CompareR","methodName","","/*Reverse*/=== /*string*/","(/*Args:*/<Exception>exception).method"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","86.00055","Conditional","exception.comment != null","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<Exception>exception).comment != null"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","87.00045","Compare","exception","comment","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","87.00045","CompareR","null","","/*Reverse*/!= /*string*/","(/*Args:*/<Exception>exception).comment"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","88.00032","Assign","found","","= /*boolean*/","true"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed;Rule.getExceptions(this.getOptions()).forEach(Arguments[0])","88.00032","pickUpedName","found","","","true"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","88.00032","call.arguments[0]","Rule.getExceptions(this.getOptions())","forEach","(exception: Exception) => void","/**(exception: Exception) => void**/"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","88.00032","calls","Rule.getExceptions(this.getOptions())","forEach","void","(/**(exception: Exception) => void**/)"
"../tslint-microsoft-contrib-master/src/reactNoDangerousHtmlRule.ts","NoDangerousHtmlWalker",".isSuppressed","93.00015","return","","","boolean","true"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","Rule","","11.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","Rule","","11.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","Rule","","11.00035","Assign","Rule","FAILURE_STRING","string","'Found an invalid comparison for NaN: '"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","Rule",".","13.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","Rule",".apply","13.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","Rule",".apply","14.00077","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","Rule",".apply","14.00077","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","Rule",".apply","14.00077","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new UseIsnanRuleWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","Rule",".apply","14.00077","calls","/*<Rule>*/ this","applyWithWalker","any","((new UseIsnanRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","Rule",".apply","14.00077","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new UseIsnanRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","Rule",".apply","14.00077","pickUpedName","/*<Rule>*/ this","getOptions","","((new UseIsnanRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","Rule",".apply","14.00077","return","","","any","this.applyWithWalker((new UseIsnanRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","Rule","","18.00006","defined","UseIsnanRuleWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker","","18.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".","20.00014","TS.MethodDefined","UseIsnanRuleWalker","visitBinaryExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","20.00046","define.Parameter","visitBinaryExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","20.00071","Conditional","/*<UseIsnanRuleWalker>*/ this.isExpressionNaN(node.left) || this.isExpressionNaN(node.right)","","/*IfStatement*/ boolean/* no Else Clause*/","this.isExpressionNaN((/*Args:*/<any>node).left) || this.isExpressionNaN((/*Args:*/<any>node).right)"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","21.00039","call.arguments[0]","/*<UseIsnanRuleWalker>*/ this","isExpressionNaN","any","(/*Args:*/<any>node).left"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","21.00039","calls","/*<UseIsnanRuleWalker>*/ this","isExpressionNaN","boolean","((/*Args:*/<any>node).left)"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","21.00039","pickUpedName","/*<UseIsnanRuleWalker>*/ this","isExpressionNaN","","((/*Args:*/<any>node).left)"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","21.00074","call.arguments[0]","/*<UseIsnanRuleWalker>*/ this","isExpressionNaN","any","(/*Args:*/<any>node).right"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","21.00074","calls","/*<UseIsnanRuleWalker>*/ this","isExpressionNaN","boolean","((/*Args:*/<any>node).right)"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","21.00074","pickUpedName","/*<UseIsnanRuleWalker>*/ this","isExpressionNaN","","((/*Args:*/<any>node).right)"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","21.00074","BinaryExpression","/*<UseIsnanRuleWalker>*/ this.isExpressionNaN(node.left)","","|| /*boolean*/","this.isExpressionNaN((/*Args:*/<any>node).right)"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","21.00074","pickUpedName","/*<UseIsnanRuleWalker>*/ this","","","this.isExpressionNaN((/*Args:*/<any>node).right)"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","21.00074","pickUpedName","/*<UseIsnanRuleWalker>*/ this","isExpressionNaN","","this.isExpressionNaN((/*Args:*/<any>node).right)"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","22.00053","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","22.00070","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","22.00109","calls","(/*Args:*/<any>node)","getText","any","()"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","22.00109","BinaryExpression","Rule","FAILURE_STRING","+ /*any*/","(/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","22.00109","call.arguments[0]","/*<UseIsnanRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","22.00109","call.arguments[1]","/*<UseIsnanRuleWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","22.00109","call.arguments[2]","/*<UseIsnanRuleWalker>*/ this","createFailure","string","'Found an invalid comparison for NaN: ' + (/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","22.00109","calls","/*<UseIsnanRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found an invalid comparison for NaN: ' + (/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","22.00109","pickUpedName","/*<UseIsnanRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found an invalid comparison for NaN: ' + (/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","22.00109","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found an invalid comparison for NaN: ' + (/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","22.00109","call.arguments[0]","/*<UseIsnanRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found an invalid comparison for NaN: ' + (/*Args:*/<any>node).getText())"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","22.00109","calls","/*<UseIsnanRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found an invalid comparison for NaN: ' + (/*Args:*/<any>node).getText()))"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","22.00109","pickUpedName","/*<UseIsnanRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found an invalid comparison for NaN: ' + (/*Args:*/<any>node).getText()))"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","22.00109","pickUpedName","/*<UseIsnanRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found an invalid comparison for NaN: ' + (/*Args:*/<any>node).getText()))"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","22.00109","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Found an invalid comparison for NaN: ' + (/*Args:*/<any>node).getText()))"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","24.00037","call.arguments[0]","super","visitBinaryExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".visitBinaryExpression","24.00037","calls","super","visitBinaryExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".","27.00012","TS.MethodDefined","UseIsnanRuleWalker","isExpressionNaN","(node: any) => boolean","(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".isExpressionNaN","27.00038","define.Parameter","isExpressionNaN","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".isExpressionNaN","28.00041","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".isExpressionNaN","28.00051","ref.varName","SyntaxKind.current()","Identifier","number",""
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".isExpressionNaN","28.00051","Compare","node","kind","=== /*number*/","SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".isExpressionNaN","28.00051","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).kind"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".isExpressionNaN","28.00070","calls","(/*Args:*/<any>node)","getText","any","()"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".isExpressionNaN","28.00083","Compare","node.getText()","","=== /*string*/","'NaN'"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".isExpressionNaN","28.00083","CompareR","'NaN'","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".isExpressionNaN","28.00083","BinaryExpression","node.kind === SyntaxKind.current().Identifier","","&& /*boolean*/","(/*Args:*/<any>node).getText() === 'NaN'"
"../tslint-microsoft-contrib-master/src/useIsnanRule.ts","UseIsnanRuleWalker",".isExpressionNaN","28.00083","return","","","boolean","(/*Args:*/<any>node).kind === SyntaxKind.current().Identifier && (/*Args:*/<any>node).getText() === 'NaN'"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","Rule","","10.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","Rule","","11.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","Rule","","11.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","Rule","","11.00035","Assign","Rule","FAILURE_STRING","string","'Use a named parameter instead: '"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","Rule",".","13.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","Rule",".apply","13.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","Rule",".apply","14.00082","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","Rule",".apply","14.00082","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","Rule",".apply","14.00082","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new UseNamedParameterWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","Rule",".apply","14.00082","calls","/*<Rule>*/ this","applyWithWalker","any","((new UseNamedParameterWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","Rule",".apply","14.00082","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new UseNamedParameterWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","Rule",".apply","14.00082","pickUpedName","/*<Rule>*/ this","getOptions","","((new UseNamedParameterWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","Rule",".apply","14.00082","return","","","any","this.applyWithWalker((new UseNamedParameterWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","Rule","","18.00006","defined","UseNamedParameterWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker","","18.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".","20.00014","TS.MethodDefined","UseNamedParameterWalker","visitElementAccessExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","20.00053","define.Parameter","visitElementAccessExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","20.00085","Conditional","node.argumentExpression != null","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).argumentExpression != null"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","21.00039","Compare","node","argumentExpression","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","21.00039","CompareR","null","","/*Reverse*/!= /*any*/","(/*Args:*/<any>node).argumentExpression"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","21.00047","Conditional","node.argumentExpression.kind === SyntaxKind.current().NumericLiteral","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).argumentExpression.kind === SyntaxKind.current().NumericLiteral"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","22.00061","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","22.00071","ref.varName","SyntaxKind.current()","NumericLiteral","number",""
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","22.00071","Compare","node.argumentExpression","kind","=== /*number*/","SyntaxKind.current().NumericLiteral"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","22.00071","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).argumentExpression.kind"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","22.00088","Conditional","node.expression.getText() === 'arguments'","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).expression.getText() === 'arguments'"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","23.00037","calls","(/*Args:*/<any>node).expression","getText","any","()"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","23.00050","Compare","node.expression.getText()","","=== /*string*/","'arguments'"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","23.00050","CompareR","'arguments'","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).expression.getText()"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","24.00024","TS.VariableDeclaration","","failureString","string",""
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","24.00062","BinaryExpression","Rule","FAILURE_STRING","+ /*string*/","'''"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","24.00075","calls","(/*Args:*/<any>node)","getText","any","()"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","24.00075","BinaryExpression","Rule.FAILURE_STRING + '''","","+ /*any*/","(/*Args:*/<any>node).getText()"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","24.00086","BinaryExpression","Rule.FAILURE_STRING + ''' + node.getText()","","+ /*string*/","'''"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","24.00086","Assign","failureString","","string","'Use a named parameter instead: '' + (/*Args:*/<any>node).getText() + '''"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","24.00086","pickUpedName","Rule","FAILURE_STRING","","'Use a named parameter instead: '' + (/*Args:*/<any>node).getText() + '''"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","25.00024","TS.VariableDeclaration","","failure","any",""
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","25.00059","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","25.00076","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","25.00087","call.arguments[0]","/*<UseNamedParameterWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","25.00087","call.arguments[1]","/*<UseNamedParameterWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","25.00087","call.arguments[2]","/*<UseNamedParameterWalker>*/ this","createFailure","string","'Use a named parameter instead: '' + (/*Args:*/<any>node).getText() + '''"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","25.00087","calls","/*<UseNamedParameterWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Use a named parameter instead: '' + (/*Args:*/<any>node).getText() + ''')"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","25.00087","pickUpedName","/*<UseNamedParameterWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Use a named parameter instead: '' + (/*Args:*/<any>node).getText() + ''')"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","25.00087","Assign","failure","","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Use a named parameter instead: '' + (/*Args:*/<any>node).getText() + ''')"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","25.00087","pickUpedName","/*<UseNamedParameterWalker>*/ this","createFailure","","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Use a named parameter instead: '' + (/*Args:*/<any>node).getText() + ''')"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","26.00037","call.arguments[0]","/*<UseNamedParameterWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Use a named parameter instead: '' + (/*Args:*/<any>node).getText() + ''')"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","26.00037","calls","/*<UseNamedParameterWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Use a named parameter instead: '' + (/*Args:*/<any>node).getText() + '''))"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","26.00037","pickUpedName","/*<UseNamedParameterWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Use a named parameter instead: '' + (/*Args:*/<any>node).getText() + '''))"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","30.00044","call.arguments[0]","super","visitElementAccessExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/useNamedParameterRule.ts","UseNamedParameterWalker",".visitElementAccessExpression","30.00044","calls","super","visitElementAccessExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","7.00018","def.func","AstUtils","getFunctionName","(node: any) => string","@event  !! missing description.
(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","10.00047","define.Parameter","node","","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","11.00012","TS.VariableDeclaration","","expression","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","11.00046","Assign","expression","","any","(/*Args:*/<any>node).expression"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","12.00012","TS.VariableDeclaration","","functionName","string",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","12.00055","Assign","functionName","","any","((/*Args:*/<any>node).expression).text"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","12.00060","Conditional","functionName === undefined && (expression).name","","/*IfStatement*/ any/* no Else Clause*/","((/*Args:*/<any>node).expression).text === undefined && ((/*Args:*/<any>node).expression).name"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","13.00029","Compare","functionName","","=== /*undefined*/","undefined"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","13.00029","CompareR","undefined","","/*Reverse*/=== /*string*/","((/*Args:*/<any>node).expression).text"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","13.00061","ref.varName","(<any>expression)","name","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","13.00061","BinaryExpression","functionName === undefined","","&& /*any*/","((/*Args:*/<any>node).expression).name"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","14.00051","ref.varName","(<any>expression).name","text","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","14.00051","Assign","functionName","","= /*any*/","((/*Args:*/<any>node).expression).name.text"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","14.00051","pickUpedName","functionName","","","((/*Args:*/<any>node).expression).name.text"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","16.00015","return","","","string","((/*Args:*/<any>node).expression).name.text"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","17.00006","def.func","AstUtils","getFunctionTarget","(expression: any) => string","@event  !! missing description.
(@param)?\W+expression *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","19.00054","define.Parameter","expression","","any","/*Args:*/<any>expression"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","19.00080","Conditional","expression.expression.kind === SyntaxKind.current().PropertyAccessExpression","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>expression).expression.kind === SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","20.00055","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","20.00065","ref.varName","SyntaxKind.current()","PropertyAccessExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","20.00065","Compare","expression.expression","kind","=== /*number*/","SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","20.00065","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>expression).expression.kind"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","21.00016","TS.VariableDeclaration","","propExp","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","21.00097","Assign","propExp","","any","(/*Args:*/<any>expression).expression"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","22.00039","calls","(/*Args:*/<any>expression).expression.expression","getText","any","()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","22.00039","return","","","any","(/*Args:*/<any>expression).expression.expression.getText()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","24.00015","return","","","null","null"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","25.00006","def.func","AstUtils","dumpTypeInfo","(expression: any, languageServices: any, typeChecker: any) => void","@event  !! missing description.
(@param)?\W+expression *\W+ !! missing description.
(@param)?\W+typeChecker *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","27.00050","define.Parameter","expression","","any","/*Args:*/<any>expression"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","27.00083","define.Parameter","languageServices","","any","/*Args:*/<any>languageServices"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","27.00117","define.Parameter","typeChecker","","any","/*Args:*/<any>typeChecker"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","29.00032","calls","(/*Args:*/<any>expression)","getFullText","any","()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","29.00032","call.arguments[0]","console","log","any","(/*Args:*/<any>expression).getFullText()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","29.00032","calls","console","log","void","((/*Args:*/<any>expression).getFullText())"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","30.00045","ref.varName","expression","kind","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","30.00045","BinaryExpression","'\tkind: '","","+ /*any*/","(/*Args:*/<any>expression).kind"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","30.00045","call.arguments[0]","console","log","string","'\tkind: ' + (/*Args:*/<any>expression).kind"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","30.00045","calls","console","log","void","('\tkind: ' + (/*Args:*/<any>expression).kind)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","30.00051","Conditional","expression.kind === SyntaxKind.current().Identifier || expression.kind === SyntaxKind.current().PropertyAccessExpression","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>expression).kind === SyntaxKind.current().Identifier || (/*Args:*/<any>expression).kind === SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","32.00044","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","32.00054","ref.varName","SyntaxKind.current()","Identifier","number",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","32.00054","Compare","expression","kind","=== /*number*/","SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","32.00054","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>expression).kind"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","33.00047","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","33.00057","ref.varName","SyntaxKind.current()","PropertyAccessExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","33.00057","Compare","expression","kind","=== /*number*/","SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","33.00057","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>expression).kind"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","33.00057","BinaryExpression","expression.kind === SyntaxKind.current().Identifier","","|| /*boolean*/","(/*Args:*/<any>expression).kind === SyntaxKind.current().PropertyAccessExpression"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","34.00016","TS.VariableDeclaration","","definitionInfo","any[]",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","34.00119","calls","(/*Args:*/<any>expression)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","34.00119","call.arguments[0]","(/*Args:*/<any>languageServices)","getDefinitionAtPosition","string","'file.ts'"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","34.00119","call.arguments[1]","(/*Args:*/<any>languageServices)","getDefinitionAtPosition","any","(/*Args:*/<any>expression).getStart()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","34.00119","calls","(/*Args:*/<any>languageServices)","getDefinitionAtPosition","any","('file.ts', (/*Args:*/<any>expression).getStart())"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","34.00119","Assign","definitionInfo","","any","(/*Args:*/<any>languageServices).getDefinitionAtPosition('file.ts', (/*Args:*/<any>expression).getStart())"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","34.00131","Conditional","definitionInfo","","/*IfStatement*/ any[]/* no Else Clause*/","(/*Args:*/<any>languageServices).getDefinitionAtPosition('file.ts', (/*Args:*/<any>expression).getStart())"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","36.00040","call.func","(/*Args:*/<any>languageServices).getDefinitionAtPosition('file.ts', (/*Args:*/<any>expression).getStart())","forEach","(definitionInfo: any, index: number) => void",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","36.00040","pickUpedName","definitionInfo","forEach","","(/*Args:*/<any>languageServices).getDefinitionAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).forEach"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","36.00061","define.Parameter","definitionInfo","","any","/*Args:*/<any>definitionInfo"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","36.00084","define.Parameter","index","","number","/*Args:*/<number>index"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","37.00054","BinaryExpression","'\tdefinitionInfo-'","","+ /*number*/","(/*Args:*/<number>index)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","37.00054","call.arguments[0]","console","log","string","'\tdefinitionInfo-' + (/*Args:*/<number>index)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","37.00054","calls","console","log","void","('\tdefinitionInfo-' + (/*Args:*/<number>index))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","38.00063","ref.varName","definitionInfo","kind","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","38.00063","BinaryExpression","'\t\tkind: '","","+ /*any*/","(/*Args:*/<any>definitionInfo).kind"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","38.00063","call.arguments[0]","console","log","string","'\t\tkind: ' + (/*Args:*/<any>definitionInfo).kind"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","38.00063","calls","console","log","void","('\t\tkind: ' + (/*Args:*/<any>definitionInfo).kind)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","39.00063","ref.varName","definitionInfo","name","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","39.00063","BinaryExpression","'\t\tname: '","","+ /*any*/","(/*Args:*/<any>definitionInfo).name"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","39.00063","call.arguments[0]","console","log","string","'\t\tname: ' + (/*Args:*/<any>definitionInfo).name"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","39.00063","calls","console","log","void","('\t\tname: ' + (/*Args:*/<any>definitionInfo).name)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","39.00063","call.arguments[0]","(/*Args:*/<any>languageServices).getDefinitionAtPosition('file.ts', (/*Args:*/<any>expression).getStart())","forEach","(definitionInfo: any, index: number) => void","/**(definitionInfo: any, index: number) => void**/"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","39.00063","calls","(/*Args:*/<any>languageServices).getDefinitionAtPosition('file.ts', (/*Args:*/<any>expression).getStart())","forEach","void","(/**(definitionInfo: any, index: number) => void**/)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","43.00016","TS.VariableDeclaration","","typeInfo","any[]",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","43.00117","calls","(/*Args:*/<any>expression)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","43.00117","call.arguments[0]","(/*Args:*/<any>languageServices)","getTypeDefinitionAtPosition","string","'file.ts'"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","43.00117","call.arguments[1]","(/*Args:*/<any>languageServices)","getTypeDefinitionAtPosition","any","(/*Args:*/<any>expression).getStart()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","43.00117","calls","(/*Args:*/<any>languageServices)","getTypeDefinitionAtPosition","any","('file.ts', (/*Args:*/<any>expression).getStart())"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","43.00117","Assign","typeInfo","","any","(/*Args:*/<any>languageServices).getTypeDefinitionAtPosition('file.ts', (/*Args:*/<any>expression).getStart())"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","43.00129","Conditional","typeInfo","","/*IfStatement*/ any[]/* no Else Clause*/","(/*Args:*/<any>languageServices).getTypeDefinitionAtPosition('file.ts', (/*Args:*/<any>expression).getStart())"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","45.00034","call.func","(/*Args:*/<any>languageServices).getTypeDefinitionAtPosition('file.ts', (/*Args:*/<any>expression).getStart())","forEach","(definitionInfo: any, index: number) => void",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","45.00034","pickUpedName","typeInfo","forEach","","(/*Args:*/<any>languageServices).getTypeDefinitionAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).forEach"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","45.00055","define.Parameter","definitionInfo","","any","/*Args:*/<any>definitionInfo"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","45.00078","define.Parameter","index","","number","/*Args:*/<number>index"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","46.00058","BinaryExpression","'\ttypeDefinitionInfo-'","","+ /*number*/","(/*Args:*/<number>index)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","46.00058","call.arguments[0]","console","log","string","'\ttypeDefinitionInfo-' + (/*Args:*/<number>index)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","46.00058","calls","console","log","void","('\ttypeDefinitionInfo-' + (/*Args:*/<number>index))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","47.00063","ref.varName","definitionInfo","kind","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","47.00063","BinaryExpression","'\t\tkind: '","","+ /*any*/","(/*Args:*/<any>definitionInfo).kind"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","47.00063","call.arguments[0]","console","log","string","'\t\tkind: ' + (/*Args:*/<any>definitionInfo).kind"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","47.00063","calls","console","log","void","('\t\tkind: ' + (/*Args:*/<any>definitionInfo).kind)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","48.00063","ref.varName","definitionInfo","name","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","48.00063","BinaryExpression","'\t\tname: '","","+ /*any*/","(/*Args:*/<any>definitionInfo).name"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","48.00063","call.arguments[0]","console","log","string","'\t\tname: ' + (/*Args:*/<any>definitionInfo).name"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils",".","48.00063","calls","console","log","void","('\t\tname: ' + (/*Args:*/<any>definitionInfo).name)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","48.00063","call.arguments[0]","(/*Args:*/<any>languageServices).getTypeDefinitionAtPosition('file.ts', (/*Args:*/<any>expression).getStart())","forEach","(definitionInfo: any, index: number) => void","/**(definitionInfo: any, index: number) => void**/"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","48.00063","calls","(/*Args:*/<any>languageServices).getTypeDefinitionAtPosition('file.ts', (/*Args:*/<any>expression).getStart())","forEach","void","(/**(definitionInfo: any, index: number) => void**/)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","52.00016","TS.VariableDeclaration","","quickInfo","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","52.00106","calls","(/*Args:*/<any>expression)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","52.00106","call.arguments[0]","(/*Args:*/<any>languageServices)","getQuickInfoAtPosition","string","'file.ts'"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","52.00106","call.arguments[1]","(/*Args:*/<any>languageServices)","getQuickInfoAtPosition","any","(/*Args:*/<any>expression).getStart()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","52.00106","calls","(/*Args:*/<any>languageServices)","getQuickInfoAtPosition","any","('file.ts', (/*Args:*/<any>expression).getStart())"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","52.00106","Assign","quickInfo","","any","(/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart())"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","52.00118","Conditional","! (! quickInfo) && ! (! quickInfo.kind)","","/*IfStatement*/ boolean/* no Else Clause*/","! (! (/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart())) && ! (! (/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).kind)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","53.00046","BinaryExpression","! (! quickInfo)","","&& /*boolean*/","! (! (/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).kind)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","54.00067","ref.varName","quickInfo","kind","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","54.00067","BinaryExpression","'\tquickInfo.kind         = '","","+ /*any*/","(/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).kind"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","54.00067","call.arguments[0]","console","log","string","'\tquickInfo.kind         = ' + (/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).kind"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","54.00067","calls","console","log","void","('\tquickInfo.kind         = ' + (/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).kind)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","55.00067","ref.varName","quickInfo","kindModifiers","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","55.00067","BinaryExpression","'\tquickInfo.kindModifiers= '","","+ /*any*/","(/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).kindModifiers"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","55.00067","call.arguments[0]","console","log","string","'\tquickInfo.kindModifiers= ' + (/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).kindModifiers"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","55.00067","calls","console","log","void","('\tquickInfo.kindModifiers= ' + (/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).kindModifiers)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","56.00076","ref.varName","quickInfo.textSpan","start","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","56.00076","BinaryExpression","'\tquickInfo.textSpan     = '","","+ /*any*/","(/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).textSpan.start"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","56.00076","call.arguments[0]","console","log","string","'\tquickInfo.textSpan     = ' + (/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).textSpan.start"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","56.00076","calls","console","log","void","('\tquickInfo.textSpan     = ' + (/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).textSpan.start)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","57.00083","ref.varName","quickInfo.displayParts[0]","text","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","57.00083","BinaryExpression","'\tquickInfo.displayParts = '","","+ /*any*/","(/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).displayParts[0].text"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","57.00083","call.arguments[0]","console","log","string","'\tquickInfo.displayParts = ' + (/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).displayParts[0].text"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","57.00083","calls","console","log","void","('\tquickInfo.displayParts = ' + (/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).displayParts[0].text)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","58.00083","ref.varName","quickInfo.displayParts[0]","kind","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","58.00083","BinaryExpression","'\tquickInfo.displayParts = '","","+ /*any*/","(/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).displayParts[0].kind"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","58.00083","call.arguments[0]","console","log","string","'\tquickInfo.displayParts = ' + (/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).displayParts[0].kind"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","58.00083","calls","console","log","void","('\tquickInfo.displayParts = ' + (/*Args:*/<any>languageServices).getQuickInfoAtPosition('file.ts', (/*Args:*/<any>expression).getStart()).displayParts[0].kind)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","61.00016","TS.VariableDeclaration","","expressionType","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","61.00074","call.arguments[0]","(/*Args:*/<any>typeChecker)","getTypeAtLocation","any","(/*Args:*/<any>expression)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","61.00074","calls","(/*Args:*/<any>typeChecker)","getTypeAtLocation","any","((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","61.00074","Assign","expressionType","","any","(/*Args:*/<any>typeChecker).getTypeAtLocation((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","62.00084","call.arguments[0]","(/*Args:*/<any>typeChecker)","typeToString","any","(/*Args:*/<any>typeChecker).getTypeAtLocation((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","62.00084","calls","(/*Args:*/<any>typeChecker)","typeToString","any","((/*Args:*/<any>typeChecker).getTypeAtLocation((/*Args:*/<any>expression)))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","62.00084","BinaryExpression","'\ttypeChecker.typeToString : '","","+ /*any*/","(/*Args:*/<any>typeChecker).typeToString((/*Args:*/<any>typeChecker).getTypeAtLocation((/*Args:*/<any>expression)))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","62.00084","call.arguments[0]","console","log","string","'\ttypeChecker.typeToString : ' + (/*Args:*/<any>typeChecker).typeToString((/*Args:*/<any>typeChecker).getTypeAtLocation((/*Args:*/<any>expression)))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","62.00084","calls","console","log","void","('\ttypeChecker.typeToString : ' + (/*Args:*/<any>typeChecker).typeToString((/*Args:*/<any>typeChecker).getTypeAtLocation((/*Args:*/<any>expression))))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","63.00059","ref.varName","expressionType","flags","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","63.00059","BinaryExpression","'\ttype.flags: '","","+ /*any*/","(/*Args:*/<any>typeChecker).getTypeAtLocation((/*Args:*/<any>expression)).flags"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","63.00059","call.arguments[0]","console","log","string","'\ttype.flags: ' + (/*Args:*/<any>typeChecker).getTypeAtLocation((/*Args:*/<any>expression)).flags"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","63.00059","calls","console","log","void","('\ttype.flags: ' + (/*Args:*/<any>typeChecker).getTypeAtLocation((/*Args:*/<any>expression)).flags)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","64.00060","ref.varName","expressionType","symbol","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","64.00060","BinaryExpression","'\ttype.symbol: '","","+ /*any*/","(/*Args:*/<any>typeChecker).getTypeAtLocation((/*Args:*/<any>expression)).symbol"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","64.00060","call.arguments[0]","console","log","string","'\ttype.symbol: ' + (/*Args:*/<any>typeChecker).getTypeAtLocation((/*Args:*/<any>expression)).symbol"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","64.00060","calls","console","log","void","('\ttype.symbol: ' + (/*Args:*/<any>typeChecker).getTypeAtLocation((/*Args:*/<any>expression)).symbol)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","66.00016","TS.VariableDeclaration","","expressionSymbol","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","66.00080","call.arguments[0]","(/*Args:*/<any>typeChecker)","getSymbolAtLocation","any","(/*Args:*/<any>expression)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","66.00080","calls","(/*Args:*/<any>typeChecker)","getSymbolAtLocation","any","((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","66.00080","Assign","expressionSymbol","","any","(/*Args:*/<any>typeChecker).getSymbolAtLocation((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","66.00092","Conditional","expressionSymbol == null","","/*IfStatement*/ boolean","(/*Args:*/<any>typeChecker).getSymbolAtLocation((/*Args:*/<any>expression)) == null"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","67.00036","Compare","expressionSymbol","","== /*null*/","null"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","67.00036","CompareR","null","","/*Reverse*/== /*any*/","(/*Args:*/<any>typeChecker).getSymbolAtLocation((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","68.00043","BinaryExpression","'\tsymbol: '","","+ /*any*/","(/*Args:*/<any>typeChecker).getSymbolAtLocation((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","68.00043","call.arguments[0]","console","log","string","'\tsymbol: ' + (/*Args:*/<any>typeChecker).getSymbolAtLocation((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","68.00043","calls","console","log","void","('\tsymbol: ' + (/*Args:*/<any>typeChecker).getSymbolAtLocation((/*Args:*/<any>expression)))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","70.00067","ref.varName","expressionSymbol","flags","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","70.00067","BinaryExpression","'\tsymbol.flags: '","","+ /*any*/","(/*Args:*/<any>typeChecker).getSymbolAtLocation((/*Args:*/<any>expression)).flags"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","70.00067","call.arguments[0]","console","log","string","'\tsymbol.flags: ' + (/*Args:*/<any>typeChecker).getSymbolAtLocation((/*Args:*/<any>expression)).flags"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","70.00067","calls","console","log","void","('\tsymbol.flags: ' + (/*Args:*/<any>typeChecker).getSymbolAtLocation((/*Args:*/<any>expression)).flags)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","71.00066","ref.varName","expressionSymbol","name","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","71.00066","BinaryExpression","'\tsymbol.name: '","","+ /*any*/","(/*Args:*/<any>typeChecker).getSymbolAtLocation((/*Args:*/<any>expression)).name"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","71.00066","call.arguments[0]","console","log","string","'\tsymbol.name: ' + (/*Args:*/<any>typeChecker).getSymbolAtLocation((/*Args:*/<any>expression)).name"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","71.00066","calls","console","log","void","('\tsymbol.name: ' + (/*Args:*/<any>typeChecker).getSymbolAtLocation((/*Args:*/<any>expression)).name)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","72.00074","ref.varName","expressionSymbol","declarations","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","72.00074","BinaryExpression","'\tsymbol.declarations: '","","+ /*any*/","(/*Args:*/<any>typeChecker).getSymbolAtLocation((/*Args:*/<any>expression)).declarations"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","72.00074","call.arguments[0]","console","log","string","'\tsymbol.declarations: ' + (/*Args:*/<any>typeChecker).getSymbolAtLocation((/*Args:*/<any>expression)).declarations"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","72.00074","calls","console","log","void","('\tsymbol.declarations: ' + (/*Args:*/<any>typeChecker).getSymbolAtLocation((/*Args:*/<any>expression)).declarations)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","75.00016","TS.VariableDeclaration","","contextualType","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","75.00074","call.arguments[0]","(/*Args:*/<any>typeChecker)","getContextualType","any","(/*Args:*/<any>expression)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","75.00074","calls","(/*Args:*/<any>typeChecker)","getContextualType","any","((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","75.00074","Assign","contextualType","","any","(/*Args:*/<any>typeChecker).getContextualType((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","75.00086","Conditional","contextualType == null","","/*IfStatement*/ boolean","(/*Args:*/<any>typeChecker).getContextualType((/*Args:*/<any>expression)) == null"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","76.00034","Compare","contextualType","","== /*null*/","null"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","76.00034","CompareR","null","","/*Reverse*/== /*any*/","(/*Args:*/<any>typeChecker).getContextualType((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","77.00051","BinaryExpression","'\tcontextualType: '","","+ /*any*/","(/*Args:*/<any>typeChecker).getContextualType((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","77.00051","call.arguments[0]","console","log","string","'\tcontextualType: ' + (/*Args:*/<any>typeChecker).getContextualType((/*Args:*/<any>expression))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","77.00051","calls","console","log","void","('\tcontextualType: ' + (/*Args:*/<any>typeChecker).getContextualType((/*Args:*/<any>expression)))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","79.00073","ref.varName","contextualType","flags","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","79.00073","BinaryExpression","'\tcontextualType.flags: '","","+ /*any*/","(/*Args:*/<any>typeChecker).getContextualType((/*Args:*/<any>expression)).flags"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","79.00073","call.arguments[0]","console","log","string","'\tcontextualType.flags: ' + (/*Args:*/<any>typeChecker).getContextualType((/*Args:*/<any>expression)).flags"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","79.00073","calls","console","log","void","('\tcontextualType.flags: ' + (/*Args:*/<any>typeChecker).getContextualType((/*Args:*/<any>expression)).flags)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","80.00074","ref.varName","contextualType","symbol","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","80.00074","BinaryExpression","'\tcontextualType.symbol: '","","+ /*any*/","(/*Args:*/<any>typeChecker).getContextualType((/*Args:*/<any>expression)).symbol"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","80.00074","call.arguments[0]","console","log","string","'\tcontextualType.symbol: ' + (/*Args:*/<any>typeChecker).getContextualType((/*Args:*/<any>expression)).symbol"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","80.00074","calls","console","log","void","('\tcontextualType.symbol: ' + (/*Args:*/<any>typeChecker).getContextualType((/*Args:*/<any>expression)).symbol)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","84.00006","def.func","AstUtils","isPrivate","(node: any) => boolean","@event  !! missing description.
(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","86.00040","define.Parameter","node","","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","88.00045","ref.varName","ts.NodeFlags","Private","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","88.00045","BinaryExpression","node","flags","& /*any*/","ts.NodeFlags.Private"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","88.00045","return","","","boolean","! ! ((/*Args:*/<any>node).flags & ts.NodeFlags.Private)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","90.00006","def.func","AstUtils","isProtected","(node: any) => boolean","@event  !! missing description.
(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","92.00042","define.Parameter","node","","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","94.00045","ref.varName","ts.NodeFlags","Protected","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","94.00045","BinaryExpression","node","flags","& /*any*/","ts.NodeFlags.Protected"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","94.00045","return","","","boolean","! ! ((/*Args:*/<any>node).flags & ts.NodeFlags.Protected)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","96.00006","def.func","AstUtils","isPublic","(node: any) => boolean","@event  !! missing description.
(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","98.00039","define.Parameter","node","","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","100.00045","ref.varName","ts.NodeFlags","Public","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","100.00045","BinaryExpression","node","flags","& /*any*/","ts.NodeFlags.Public"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","100.00045","return","","","boolean","! ! ((/*Args:*/<any>node).flags & ts.NodeFlags.Public)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","102.00006","def.func","AstUtils","isStatic","(node: any) => boolean","@event  !! missing description.
(@param)?\W+node *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","104.00039","define.Parameter","node","","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","106.00045","ref.varName","ts.NodeFlags","Static","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","106.00045","BinaryExpression","node","flags","& /*any*/","ts.NodeFlags.Static"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","106.00045","return","","","boolean","! ! ((/*Args:*/<any>node).flags & ts.NodeFlags.Static)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","108.00006","def.func","AstUtils","findParentBlock","(child: any) => any","@event  !! missing description.
(@param)?\W+child *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","110.00047","define.Parameter","child","","any","/*Args:*/<any>child"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","111.00012","TS.VariableDeclaration","","parent","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","111.00038","Assign","parent","","any","(/*Args:*/<any>child).parent"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","111.00045","Conditional","parent != null","","/*WhileStatement*/ boolean","(/*Args:*/<any>child).parent != null"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","112.00025","Compare","parent","","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","112.00025","CompareR","null","","/*Reverse*/!= /*any*/","(/*Args:*/<any>child).parent"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","112.00033","Conditional","parent.kind === SyntaxKind.current().Block","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>child).parent.kind === SyntaxKind.current().Block"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","113.00044","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","113.00054","ref.varName","SyntaxKind.current()","Block","number",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","113.00054","Compare","parent","kind","=== /*number*/","SyntaxKind.current().Block"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","113.00054","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>child).parent.kind"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","114.00023","return","","","any","(/*Args:*/<any>child).parent"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","116.00029","ref.varName","parent","parent","any",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","116.00029","Assign","parent","","= /*any*/","(/*Args:*/<any>child).parent.parent"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","116.00029","pickUpedName","parent","","","(/*Args:*/<any>child).parent.parent"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","118.00071","BinaryExpression","'Could not determine parent block of node: '","","+ /*any*/","(/*Args:*/<any>child)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","118.00071","throw","","","Error","(new Error('Could not determine parent block of node: ' + (/*Args:*/<any>child)))"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","118.00071","ref.type","Error","","throw",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","119.00006","def.func","AstUtils","isSameIdentifer","(source: any, target: any) => boolean","@event  !! missing description.
(@param)?\W+source *\W+ !! missing description.
(@param)?\W+target *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","121.00049","define.Parameter","source","","any","/*Args:*/<any>source"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","121.00066","define.Parameter","target","","any","/*Args:*/<any>target"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","121.00083","Conditional","source == null || target == null","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>source) == null || (/*Args:*/<any>target) == null"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","122.00022","Compare","source","","== /*null*/","null"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","122.00022","CompareR","null","","/*Reverse*/== /*any*/","(/*Args:*/<any>source)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","122.00040","Compare","target","","== /*null*/","null"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","122.00040","CompareR","null","","/*Reverse*/== /*any*/","(/*Args:*/<any>target)"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","122.00040","BinaryExpression","source == null","","|| /*boolean*/","(/*Args:*/<any>target) == null"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","123.00019","return","","","boolean","false"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","124.00010","Conditional","source.kind === SyntaxKind.current().Identifier && target.kind === SyntaxKind.current().Identifier","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>source).kind === SyntaxKind.current().Identifier && (/*Args:*/<any>target).kind === SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","125.00040","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","125.00050","ref.varName","SyntaxKind.current()","Identifier","number",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","125.00050","Compare","source","kind","=== /*number*/","SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","125.00050","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>source).kind"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","125.00091","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","125.00101","ref.varName","SyntaxKind.current()","Identifier","number",""
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","125.00101","Compare","target","kind","=== /*number*/","SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","125.00101","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>target).kind"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","125.00101","BinaryExpression","source.kind === SyntaxKind.current().Identifier","","&& /*boolean*/","(/*Args:*/<any>target).kind === SyntaxKind.current().Identifier"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","126.00027","calls","(/*Args:*/<any>source)","getText","any","()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","126.00048","calls","(/*Args:*/<any>target)","getText","any","()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","126.00048","Compare","source.getText()","","=== /*any*/","(/*Args:*/<any>target).getText()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","126.00048","CompareR","target.getText()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>source).getText()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","126.00048","return","","","boolean","(/*Args:*/<any>source).getText() === (/*Args:*/<any>target).getText()"
"../tslint-microsoft-contrib-master/src/utils/AstUtils.ts","AstUtils","","128.00015","return","","","boolean","false"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker","","8.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker","","10.00012","TS.PropertyDefined","BannedTermWalker","failureString","string",""
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker","","10.00028","TS.PropertyDefined","BannedTermWalker","failureString","string",""
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker","","11.00012","TS.PropertyDefined","BannedTermWalker","bannedTerms","string[]",""
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker","","11.00025","TS.PropertyDefined","BannedTermWalker","bannedTerms","string[]",""
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".constructor","11.00035","TS.MethodDefined","BannedTermWalker","Constructor","any","/**
* Implementation of the banned-term rulesets.
 */
"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".constructor","13.00032","define.Parameter","/*<BannedTermWalker>*/ this.","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".constructor","13.00058","define.Parameter","/*<BannedTermWalker>*/ this.","options","any","/*Args:*/<any>options"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".constructor","13.00083","define.Parameter","/*<BannedTermWalker>*/ this.","failureString","string","/*Args:*/<string>failureString"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".constructor","13.00104","define.Parameter","/*<BannedTermWalker>*/ this.","bannedTerms","string[]","/*Args:*/<string[]>bannedTerms"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".constructor","14.00026","call.arguments[0]","super","","any","BannedTermWalker.sourceFile"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".constructor","14.00026","call.arguments[1]","super","","any","BannedTermWalker.options"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".constructor","14.00026","calls","super","","void","(BannedTermWalker.sourceFile, BannedTermWalker.options)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".constructor","14.00026","pickUpedName","sourceFile","","","(BannedTermWalker.sourceFile, BannedTermWalker.options)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".constructor","14.00026","pickUpedName","options","","","(BannedTermWalker.sourceFile, BannedTermWalker.options)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".constructor","15.00029","Assign","/*<BannedTermWalker>*/ this","failureString","= /*string*/","BannedTermWalker.failureString"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".constructor","15.00029","pickUpedName","/*<BannedTermWalker>*/ this","failureString","","BannedTermWalker.failureString"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".constructor","15.00029","pickUpedName","failureString","","","BannedTermWalker.failureString"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".constructor","16.00027","Assign","/*<BannedTermWalker>*/ this","bannedTerms","= /*string[]*/","BannedTermWalker.bannedTerms"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".constructor","16.00027","pickUpedName","/*<BannedTermWalker>*/ this","bannedTerms","","BannedTermWalker.bannedTerms"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".constructor","16.00027","pickUpedName","bannedTerms","","","BannedTermWalker.bannedTerms"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".","19.00014","TS.MethodDefined","BannedTermWalker","visitVariableDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitVariableDeclaration","19.00049","define.Parameter","visitVariableDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitVariableDeclaration","20.00027","call.arguments[0]","/*<BannedTermWalker>*/ this","validateNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitVariableDeclaration","20.00027","calls","/*<BannedTermWalker>*/ this","validateNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitVariableDeclaration","20.00027","pickUpedName","/*<BannedTermWalker>*/ this","validateNode","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitVariableDeclaration","21.00040","call.arguments[0]","super","visitVariableDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitVariableDeclaration","21.00040","calls","super","visitVariableDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".","24.00014","TS.MethodDefined","BannedTermWalker","visitFunctionDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitFunctionDeclaration","24.00049","define.Parameter","visitFunctionDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitFunctionDeclaration","25.00027","call.arguments[0]","/*<BannedTermWalker>*/ this","validateNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitFunctionDeclaration","25.00027","calls","/*<BannedTermWalker>*/ this","validateNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitFunctionDeclaration","25.00027","pickUpedName","/*<BannedTermWalker>*/ this","validateNode","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitFunctionDeclaration","26.00040","call.arguments[0]","super","visitFunctionDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitFunctionDeclaration","26.00040","calls","super","visitFunctionDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".","30.00014","TS.MethodDefined","BannedTermWalker","visitPropertyDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitPropertyDeclaration","30.00049","define.Parameter","visitPropertyDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitPropertyDeclaration","31.00027","call.arguments[0]","/*<BannedTermWalker>*/ this","validateNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitPropertyDeclaration","31.00027","calls","/*<BannedTermWalker>*/ this","validateNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitPropertyDeclaration","31.00027","pickUpedName","/*<BannedTermWalker>*/ this","validateNode","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitPropertyDeclaration","32.00040","call.arguments[0]","super","visitPropertyDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitPropertyDeclaration","32.00040","calls","super","visitPropertyDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".","36.00014","TS.MethodDefined","BannedTermWalker","visitPropertySignature","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitPropertySignature","36.00047","define.Parameter","visitPropertySignature","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitPropertySignature","37.00027","call.arguments[0]","/*<BannedTermWalker>*/ this","validateNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitPropertySignature","37.00027","calls","/*<BannedTermWalker>*/ this","validateNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitPropertySignature","37.00027","pickUpedName","/*<BannedTermWalker>*/ this","validateNode","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitPropertySignature","38.00038","call.arguments[0]","super","visitPropertySignature","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitPropertySignature","38.00038","calls","super","visitPropertySignature","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".","41.00014","TS.MethodDefined","BannedTermWalker","visitSetAccessor","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitSetAccessor","41.00041","define.Parameter","visitSetAccessor","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitSetAccessor","42.00027","call.arguments[0]","/*<BannedTermWalker>*/ this","validateNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitSetAccessor","42.00027","calls","/*<BannedTermWalker>*/ this","validateNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitSetAccessor","42.00027","pickUpedName","/*<BannedTermWalker>*/ this","validateNode","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitSetAccessor","43.00032","call.arguments[0]","super","visitSetAccessor","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitSetAccessor","43.00032","calls","super","visitSetAccessor","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".","46.00014","TS.MethodDefined","BannedTermWalker","visitGetAccessor","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitGetAccessor","46.00041","define.Parameter","visitGetAccessor","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitGetAccessor","47.00027","call.arguments[0]","/*<BannedTermWalker>*/ this","validateNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitGetAccessor","47.00027","calls","/*<BannedTermWalker>*/ this","validateNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitGetAccessor","47.00027","pickUpedName","/*<BannedTermWalker>*/ this","validateNode","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitGetAccessor","48.00032","call.arguments[0]","super","visitGetAccessor","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitGetAccessor","48.00032","calls","super","visitGetAccessor","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".","51.00014","TS.MethodDefined","BannedTermWalker","visitMethodDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitMethodDeclaration","51.00047","define.Parameter","visitMethodDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitMethodDeclaration","52.00027","call.arguments[0]","/*<BannedTermWalker>*/ this","validateNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitMethodDeclaration","52.00027","calls","/*<BannedTermWalker>*/ this","validateNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitMethodDeclaration","52.00027","pickUpedName","/*<BannedTermWalker>*/ this","validateNode","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitMethodDeclaration","53.00038","call.arguments[0]","super","visitMethodDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitMethodDeclaration","53.00038","calls","super","visitMethodDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".","56.00014","TS.MethodDefined","BannedTermWalker","visitParameterDeclaration","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitParameterDeclaration","56.00050","define.Parameter","visitParameterDeclaration","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitParameterDeclaration","57.00027","call.arguments[0]","/*<BannedTermWalker>*/ this","validateNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitParameterDeclaration","57.00027","calls","/*<BannedTermWalker>*/ this","validateNode","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitParameterDeclaration","57.00027","pickUpedName","/*<BannedTermWalker>*/ this","validateNode","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitParameterDeclaration","58.00041","call.arguments[0]","super","visitParameterDeclaration","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".visitParameterDeclaration","58.00041","calls","super","visitParameterDeclaration","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".","61.00012","TS.MethodDefined","BannedTermWalker","validateNode","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","61.00035","define.Parameter","validateNode","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","61.00049","Conditional","(node).name","","/*IfStatement*/ any/* no Else Clause*/","((/*Args:*/<any>node)).name"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","62.00032","Conditional","(node).name.text","","/*IfStatement*/ any/* no Else Clause*/","((/*Args:*/<any>node)).name.text"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","64.00020","TS.VariableDeclaration","","text","string",""
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","64.00054","Assign","text","","any","((/*Args:*/<any>node)).name.text"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","64.00059","Conditional","/*<BannedTermWalker>*/ this.isBannedTerm(text)","","/*IfStatement*/ boolean/* no Else Clause*/","this.isBannedTerm(((/*Args:*/<any>node)).name.text)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","65.00039","call.arguments[0]","/*<BannedTermWalker>*/ this","isBannedTerm","string","((/*Args:*/<any>node)).name.text"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","65.00039","calls","/*<BannedTermWalker>*/ this","isBannedTerm","boolean","(((/*Args:*/<any>node)).name.text)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","65.00039","pickUpedName","/*<BannedTermWalker>*/ this","isBannedTerm","","(((/*Args:*/<any>node)).name.text)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","66.00061","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","66.00078","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","66.00110","BinaryExpression","/*<BannedTermWalker>*/ this","failureString","+ /*string*/","((/*Args:*/<any>node)).name.text"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","66.00110","call.arguments[0]","/*<BannedTermWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","66.00110","call.arguments[1]","/*<BannedTermWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","66.00110","call.arguments[2]","/*<BannedTermWalker>*/ this","createFailure","string","BannedTermWalker.failureString + ((/*Args:*/<any>node)).name.text"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","66.00110","calls","/*<BannedTermWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), BannedTermWalker.failureString + ((/*Args:*/<any>node)).name.text)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","66.00110","pickUpedName","/*<BannedTermWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), BannedTermWalker.failureString + ((/*Args:*/<any>node)).name.text)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","66.00110","pickUpedName","/*<BannedTermWalker>*/ this","failureString","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), BannedTermWalker.failureString + ((/*Args:*/<any>node)).name.text)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","66.00110","call.arguments[0]","/*<BannedTermWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), BannedTermWalker.failureString + ((/*Args:*/<any>node)).name.text)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","66.00110","calls","/*<BannedTermWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), BannedTermWalker.failureString + ((/*Args:*/<any>node)).name.text))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","66.00110","pickUpedName","/*<BannedTermWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), BannedTermWalker.failureString + ((/*Args:*/<any>node)).name.text))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","66.00110","pickUpedName","/*<BannedTermWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), BannedTermWalker.failureString + ((/*Args:*/<any>node)).name.text))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".validateNode","66.00110","pickUpedName","/*<BannedTermWalker>*/ this","failureString","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), BannedTermWalker.failureString + ((/*Args:*/<any>node)).name.text))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".","72.00012","TS.MethodDefined","BannedTermWalker","isBannedTerm","(text: string) => boolean","(@param)?\W+text *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".isBannedTerm","72.00032","define.Parameter","isBannedTerm","text","string","/*Args:*/<string>text"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".isBannedTerm","73.00041","call.arguments[0]","BannedTermWalker.bannedTerms","indexOf","string","(/*Args:*/<string>text)"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".isBannedTerm","73.00041","calls","BannedTermWalker.bannedTerms","indexOf","number","((/*Args:*/<string>text))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".isBannedTerm","73.00041","pickUpedName","/*<BannedTermWalker>*/ this.bannedTerms","indexOf","","((/*Args:*/<string>text))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".isBannedTerm","73.00052","Compare","BannedTermWalker.bannedTerms.indexOf(text)","","!== /*number*/","- 1"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".isBannedTerm","73.00052","pickUpedName","/*<BannedTermWalker>*/ this","","","- 1"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".isBannedTerm","73.00052","CompareR","- 1","","/*Reverse*/!== /*number*/","BannedTermWalker.bannedTerms.indexOf((/*Args:*/<string>text))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".isBannedTerm","73.00052","pickUpedName","/*<BannedTermWalker>*/ this.bannedTerms","indexOf","","BannedTermWalker.bannedTerms.indexOf((/*Args:*/<string>text))"
"../tslint-microsoft-contrib-master/src/utils/BannedTermWalker.ts","BannedTermWalker",".isBannedTerm","73.00052","return","","","boolean","BannedTermWalker.bannedTerms.indexOf((/*Args:*/<string>text)) !== - 1"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker","","8.00006","ref.type","Lint.RuleWalker","","extends",""
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".","11.00014","TS.MethodDefined","ErrorTolerantWalker","visitNode","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","11.00034","define.Parameter","visitNode","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","13.00029","call.arguments[0]","super","visitNode","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","13.00029","calls","super","visitNode","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","14.00018","TS.VariableDeclaration","","e","any",""
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","15.00016","TS.VariableDeclaration","","msg","string",""
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","16.00018","BinaryExpression","'An error occurred visiting a node.'","","+ /*string*/","'\nWalker: '"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","16.00039","calls","/*<ErrorTolerantWalker>*/ this","getClassName","string","()"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","16.00039","pickUpedName","/*<ErrorTolerantWalker>*/ this","getClassName","","()"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","16.00039","BinaryExpression","'An error occurred visiting a node.\nWalker: '","","+ /*string*/","this.getClassName()"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","16.00039","pickUpedName","/*<ErrorTolerantWalker>*/ this","getClassName","","this.getClassName()"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","17.00018","BinaryExpression","'An error occurred visiting a node.\nWalker: ' + this.getClassName()","","+ /*string*/","'\nNode: '"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","17.00018","pickUpedName","/*<ErrorTolerantWalker>*/ this","","","'\nNode: '"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","17.00033","Conditional","node.getFullText","","/*ConditionalExpression*/ any","(/*Args:*/<any>node).getFullText"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","17.00057","calls","(/*Args:*/<any>node)","getFullText","any","()"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","17.00072","BinaryExpression","'An error occurred visiting a node.\nWalker: ' + this.getClassName() + '\nNode: '","","+ /*any*/","(((/*Args:*/<any>node).getFullText ? (/*Args:*/<any>node).getFullText() : '<unknown>'))"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","17.00072","pickUpedName","/*<ErrorTolerantWalker>*/ this","","","(((/*Args:*/<any>node).getFullText ? (/*Args:*/<any>node).getFullText() : '<unknown>'))"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","18.00018","BinaryExpression","'An error occurred visiting a node.\nWalker: ' + this.getClassName() + '\nNode: ' + (((/*Args:*/<any>node).getFullText ? (/*Args:*/<any>node).getFullText() : '<unknown>'))","","+ /*string*/","'\n'"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","18.00018","pickUpedName","/*<ErrorTolerantWalker>*/ this","","","'\n'"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","18.00025","BinaryExpression","'An error occurred visiting a node.\nWalker: ' + this.getClassName() + '\nNode: ' + (((/*Args:*/<any>node).getFullText ? (/*Args:*/<any>node).getFullText() : '<unknown>')) + '\n'","","+ /*any*/","e"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","18.00025","pickUpedName","/*<ErrorTolerantWalker>*/ this","","","e"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","18.00025","Assign","msg","","string","'An error occurred visiting a node.\nWalker: ' + this.getClassName() + '\nNode: ' + (((/*Args:*/<any>node).getFullText ? (/*Args:*/<any>node).getFullText() : '<unknown>')) + '\n' + e"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","18.00025","pickUpedName","/*<ErrorTolerantWalker>*/ this","getClassName","","'An error occurred visiting a node.\nWalker: ' + this.getClassName() + '\nNode: ' + (((/*Args:*/<any>node).getFullText ? (/*Args:*/<any>node).getFullText() : '<unknown>')) + '\n' + e"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","20.00048","Conditional","node.getStart","","/*ConditionalExpression*/ any","(/*Args:*/<any>node).getStart"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","21.00038","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","21.00053","Conditional","node.getWidth","","/*ConditionalExpression*/ any","(/*Args:*/<any>node).getWidth"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","22.00038","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","22.00053","call.arguments[0]","/*<ErrorTolerantWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart ? (/*Args:*/<any>node).getStart() : 0)"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","22.00053","call.arguments[1]","/*<ErrorTolerantWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getWidth ? (/*Args:*/<any>node).getWidth() : 0)"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","22.00053","call.arguments[2]","/*<ErrorTolerantWalker>*/ this","createFailure","string","'An error occurred visiting a node.\nWalker: ' + this.getClassName() + '\nNode: ' + (((/*Args:*/<any>node).getFullText ? (/*Args:*/<any>node).getFullText() : '<unknown>')) + '\n' + e"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","22.00053","calls","/*<ErrorTolerantWalker>*/ this","createFailure","any","(((/*Args:*/<any>node).getStart ? (/*Args:*/<any>node).getStart() : 0), ((/*Args:*/<any>node).getWidth ? (/*Args:*/<any>node).getWidth() : 0), 'An error occurred visiting a node.\nWalker: ' + this.getClassName() + '\nNode: ' + (((/*Args:*/<any>node).getFullText ? (/*Args:*/<any>node).getFullText() : '<unknown>')) + '\n' + e)"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","22.00053","pickUpedName","/*<ErrorTolerantWalker>*/ this","createFailure","","(((/*Args:*/<any>node).getStart ? (/*Args:*/<any>node).getStart() : 0), ((/*Args:*/<any>node).getWidth ? (/*Args:*/<any>node).getWidth() : 0), 'An error occurred visiting a node.\nWalker: ' + this.getClassName() + '\nNode: ' + (((/*Args:*/<any>node).getFullText ? (/*Args:*/<any>node).getFullText() : '<unknown>')) + '\n' + e)"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","22.00053","call.arguments[0]","/*<ErrorTolerantWalker>*/ this","addFailure","any","this.createFailure(((/*Args:*/<any>node).getStart ? (/*Args:*/<any>node).getStart() : 0), ((/*Args:*/<any>node).getWidth ? (/*Args:*/<any>node).getWidth() : 0), 'An error occurred visiting a node.\nWalker: ' + this.getClassName() + '\nNode: ' + (((/*Args:*/<any>node).getFullText ? (/*Args:*/<any>node).getFullText() : '<unknown>')) + '\n' + e)"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","22.00053","calls","/*<ErrorTolerantWalker>*/ this","addFailure","any","(this.createFailure(((/*Args:*/<any>node).getStart ? (/*Args:*/<any>node).getStart() : 0), ((/*Args:*/<any>node).getWidth ? (/*Args:*/<any>node).getWidth() : 0), 'An error occurred visiting a node.\nWalker: ' + this.getClassName() + '\nNode: ' + (((/*Args:*/<any>node).getFullText ? (/*Args:*/<any>node).getFullText() : '<unknown>')) + '\n' + e))"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","22.00053","pickUpedName","/*<ErrorTolerantWalker>*/ this","addFailure","","(this.createFailure(((/*Args:*/<any>node).getStart ? (/*Args:*/<any>node).getStart() : 0), ((/*Args:*/<any>node).getWidth ? (/*Args:*/<any>node).getWidth() : 0), 'An error occurred visiting a node.\nWalker: ' + this.getClassName() + '\nNode: ' + (((/*Args:*/<any>node).getFullText ? (/*Args:*/<any>node).getFullText() : '<unknown>')) + '\n' + e))"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".visitNode","22.00053","pickUpedName","/*<ErrorTolerantWalker>*/ this","createFailure","","(this.createFailure(((/*Args:*/<any>node).getStart ? (/*Args:*/<any>node).getStart() : 0), ((/*Args:*/<any>node).getWidth ? (/*Args:*/<any>node).getWidth() : 0), 'An error occurred visiting a node.\nWalker: ' + this.getClassName() + '\nNode: ' + (((/*Args:*/<any>node).getFullText ? (/*Args:*/<any>node).getFullText() : '<unknown>')) + '\n' + e))"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".","27.00012","TS.MethodDefined","ErrorTolerantWalker","getClassName","() => string","@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","30.00012","TS.VariableDeclaration","","result","string",""
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","30.00047","calls","/*<ErrorTolerantWalker>*/ this.constructor","toString","string","()"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","30.00047","pickUpedName","/*<ErrorTolerantWalker>*/ this.constructor","toString","","()"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","30.00064","call.arguments[0]","/*<ErrorTolerantWalker>*/ this.constructor.toString()","match","RegExp","/function\s+([\w\$]+)\s*\(/"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","30.00064","calls","/*<ErrorTolerantWalker>*/ this.constructor.toString()","match","RegExpMatchArray","(/function\s+([\w\$]+)\s*\(/)"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","30.00064","pickUpedName","/*<ErrorTolerantWalker>*/ this.constructor","toString","","(/function\s+([\w\$]+)\s*\(/)"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","30.00098","BinaryExpression","/*<ErrorTolerantWalker>*/ this.constructor.toString().match(/function\s+([\w\$]+)\s*\(/)[1]","","|| /*string*/","''"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","30.00098","pickUpedName","/*<ErrorTolerantWalker>*/ this","","","''"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","30.00098","Assign","result","","string","this.constructor.toString().match(/function\s+([\w\$]+)\s*\(/)[1] || ''"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","30.00098","pickUpedName","/*<ErrorTolerantWalker>*/ this.constructor","toString","","this.constructor.toString().match(/function\s+([\w\$]+)\s*\(/)[1] || ''"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","30.00102","Conditional","result == null || result.length === 0","","/*IfStatement*/ boolean/* no Else Clause*/","this.constructor.toString().match(/function\s+([\w\$]+)\s*\(/)[1] || '' == null || this.constructor.toString().match(/function\s+([\w\$]+)\s*\(/)[1] || ''.length === 0"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","31.00022","Compare","result","","== /*null*/","null"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","31.00022","CompareR","null","","/*Reverse*/== /*string*/","this.constructor.toString().match(/function\s+([\w\$]+)\s*\(/)[1] || ''"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","31.00048","Compare","result","length","=== /*number*/","0"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","31.00048","CompareR","0","","/*Reverse*/=== /*number*/","this.constructor.toString().match(/function\s+([\w\$]+)\s*\(/)[1] || ''.length"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","31.00048","BinaryExpression","result == null","","|| /*boolean*/","this.constructor.toString().match(/function\s+([\w\$]+)\s*\(/)[1] || ''.length === 0"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","32.00094","calls","/*<ErrorTolerantWalker>*/ this.constructor","toString","string","()"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","32.00094","pickUpedName","/*<ErrorTolerantWalker>*/ this.constructor","toString","","()"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","32.00094","BinaryExpression","'Could not determine class name from input: '","","+ /*string*/","this.constructor.toString()"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","32.00094","pickUpedName","/*<ErrorTolerantWalker>*/ this.constructor","toString","","this.constructor.toString()"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","32.00094","throw","","","Error","(new Error('Could not determine class name from input: ' + this.constructor.toString()))"
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","32.00094","ref.type","Error","","throw",""
"../tslint-microsoft-contrib-master/src/utils/ErrorTolerantWalker.ts","ErrorTolerantWalker",".getClassName","34.00015","return","","","string","this.constructor.toString().match(/function\s+([\w\$]+)\s*\(/)[1] || ''"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker","","10.00006","ref.type","ScopedSymbolTrackingWalker","","extends",""
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker","","12.00012","TS.PropertyDefined","NoStringParameterToFunctionCallWalker","failureString","string",""
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker","","12.00028","TS.PropertyDefined","NoStringParameterToFunctionCallWalker","failureString","string",""
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker","","13.00012","TS.PropertyDefined","NoStringParameterToFunctionCallWalker","targetFunctionName","string",""
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker","","13.00033","TS.PropertyDefined","NoStringParameterToFunctionCallWalker","targetFunctionName","string",""
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","13.00041","TS.MethodDefined","NoStringParameterToFunctionCallWalker","Constructor","any","/**
* A walker that creates failures whenever it detects a string parameter is being passed to a certain constructor. .
 */
"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","15.00040","define.Parameter","/*<NoStringParameterToFunctionCallWalker>*/ this.","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","16.00044","define.Parameter","/*<NoStringParameterToFunctionCallWalker>*/ this.","targetFunctionName","string","/*Args:*/<string>targetFunctionName"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","17.00039","define.Parameter","/*<NoStringParameterToFunctionCallWalker>*/ this.","options","any","/*Args:*/<any>options"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","18.00046","define.Parameter","/*<NoStringParameterToFunctionCallWalker>*/ this.","languageServices","any","/*Args:*/<any>languageServices"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","19.00035","call.arguments[0]","super","","any","NoStringParameterToFunctionCallWalker.sourceFile"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","19.00035","call.arguments[1]","super","","any","NoStringParameterToFunctionCallWalker.options"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","19.00035","call.arguments[2]","super","","any","NoStringParameterToFunctionCallWalker.languageServices"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","19.00035","calls","super","","void","(NoStringParameterToFunctionCallWalker.sourceFile, NoStringParameterToFunctionCallWalker.options, NoStringParameterToFunctionCallWalker.languageServices)"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","19.00035","pickUpedName","sourceFile","","","(NoStringParameterToFunctionCallWalker.sourceFile, NoStringParameterToFunctionCallWalker.options, NoStringParameterToFunctionCallWalker.languageServices)"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","19.00035","pickUpedName","options","","","(NoStringParameterToFunctionCallWalker.sourceFile, NoStringParameterToFunctionCallWalker.options, NoStringParameterToFunctionCallWalker.languageServices)"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","19.00035","pickUpedName","languageServices","","","(NoStringParameterToFunctionCallWalker.sourceFile, NoStringParameterToFunctionCallWalker.options, NoStringParameterToFunctionCallWalker.languageServices)"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","20.00034","Assign","/*<NoStringParameterToFunctionCallWalker>*/ this","targetFunctionName","= /*string*/","NoStringParameterToFunctionCallWalker.targetFunctionName"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","20.00034","pickUpedName","/*<NoStringParameterToFunctionCallWalker>*/ this","targetFunctionName","","NoStringParameterToFunctionCallWalker.targetFunctionName"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","20.00034","pickUpedName","targetFunctionName","","","NoStringParameterToFunctionCallWalker.targetFunctionName"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","21.00044","BinaryExpression","'Forbidden '","","+ /*string*/","NoStringParameterToFunctionCallWalker.targetFunctionName"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","21.00044","pickUpedName","targetFunctionName","","","NoStringParameterToFunctionCallWalker.targetFunctionName"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","21.00065","BinaryExpression","'Forbidden ' + targetFunctionName","","+ /*string*/","' string parameter: '"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","21.00065","Assign","/*<NoStringParameterToFunctionCallWalker>*/ this","failureString","= /*string*/","'Forbidden ' + NoStringParameterToFunctionCallWalker.targetFunctionName + ' string parameter: '"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","21.00065","pickUpedName","/*<NoStringParameterToFunctionCallWalker>*/ this","failureString","","'Forbidden ' + NoStringParameterToFunctionCallWalker.targetFunctionName + ' string parameter: '"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".constructor","21.00065","pickUpedName","targetFunctionName","","","'Forbidden ' + NoStringParameterToFunctionCallWalker.targetFunctionName + ' string parameter: '"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".","24.00014","TS.MethodDefined","NoStringParameterToFunctionCallWalker","visitCallExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".visitCallExpression","24.00044","define.Parameter","visitCallExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".visitCallExpression","25.00033","call.arguments[0]","/*<NoStringParameterToFunctionCallWalker>*/ this","validateExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".visitCallExpression","25.00033","calls","/*<NoStringParameterToFunctionCallWalker>*/ this","validateExpression","void","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".visitCallExpression","25.00033","pickUpedName","/*<NoStringParameterToFunctionCallWalker>*/ this","validateExpression","","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".visitCallExpression","26.00035","call.arguments[0]","super","visitCallExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".visitCallExpression","26.00035","calls","super","visitCallExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".","29.00012","TS.MethodDefined","NoStringParameterToFunctionCallWalker","validateExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","29.00042","define.Parameter","validateExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","30.00012","TS.VariableDeclaration","","functionName","string",""
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","30.00062","call.arguments[0]","AstUtils","getFunctionName","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","30.00062","calls","AstUtils","getFunctionName","string","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","30.00062","Assign","functionName","","string","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","31.00012","TS.VariableDeclaration","","firstArg","any",""
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","31.00055","Assign","firstArg","","any","(/*Args:*/<any>node).arguments[0]"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","31.00058","Conditional","functionName === NoStringParameterToFunctionCallWalker.targetFunctionName && firstArg != null","","/*IfStatement*/ boolean/* no Else Clause*/","AstUtils.getFunctionName((/*Args:*/<any>node)) === NoStringParameterToFunctionCallWalker.targetFunctionName && (/*Args:*/<any>node).arguments[0] != null"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","32.00035","ref.varName","/*<NoStringParameterToFunctionCallWalker>*/ this","targetFunctionName","string",""
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","32.00035","Compare","functionName","","=== /*string*/","NoStringParameterToFunctionCallWalker.targetFunctionName"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","32.00035","pickUpedName","/*<NoStringParameterToFunctionCallWalker>*/ this","targetFunctionName","","NoStringParameterToFunctionCallWalker.targetFunctionName"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","32.00035","CompareR","/*<NoStringParameterToFunctionCallWalker>*/ this","","/*Reverse*/=== /*string*/","AstUtils.getFunctionName((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","32.00068","Compare","firstArg","","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","32.00068","CompareR","null","","/*Reverse*/!= /*any*/","(/*Args:*/<any>node).arguments[0]"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","32.00068","BinaryExpression","functionName === NoStringParameterToFunctionCallWalker.targetFunctionName","","&& /*boolean*/","(/*Args:*/<any>node).arguments[0] != null"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","32.00068","pickUpedName","/*<NoStringParameterToFunctionCallWalker>*/ this","","","(/*Args:*/<any>node).arguments[0] != null"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","32.00076","Conditional","! this.isExpressionEvaluatingToFunction(firstArg)","","/*IfStatement*/ boolean/* no Else Clause*/","! this.isExpressionEvaluatingToFunction((/*Args:*/<any>node).arguments[0])"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","34.00056","call.arguments[0]","/*<NoStringParameterToFunctionCallWalker>*/ this","isExpressionEvaluatingToFunction","any","(/*Args:*/<any>node).arguments[0]"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","34.00056","calls","/*<NoStringParameterToFunctionCallWalker>*/ this","isExpressionEvaluatingToFunction","any","((/*Args:*/<any>node).arguments[0])"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","34.00056","pickUpedName","/*<NoStringParameterToFunctionCallWalker>*/ this","isExpressionEvaluatingToFunction","","((/*Args:*/<any>node).arguments[0])"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","35.00020","TS.VariableDeclaration","","msg","string",""
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","35.00066","calls","(/*Args:*/<any>node).arguments[0]","getFullText","any","()"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","35.00080","calls","(/*Args:*/<any>node).arguments[0].getFullText()","trim","any","()"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","35.00099","call.arguments[0]","(/*Args:*/<any>node).arguments[0].getFullText().trim()","substring","number","0"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","35.00099","call.arguments[1]","(/*Args:*/<any>node).arguments[0].getFullText().trim()","substring","number","40"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","35.00099","calls","(/*Args:*/<any>node).arguments[0].getFullText().trim()","substring","any","(0, 40)"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","35.00099","BinaryExpression","/*<NoStringParameterToFunctionCallWalker>*/ this","failureString","+ /*any*/","(/*Args:*/<any>node).arguments[0].getFullText().trim().substring(0, 40)"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","35.00099","Assign","msg","","string","'Forbidden ' + NoStringParameterToFunctionCallWalker.targetFunctionName + ' string parameter: ' + (/*Args:*/<any>node).arguments[0].getFullText().trim().substring(0, 40)"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","35.00099","pickUpedName","/*<NoStringParameterToFunctionCallWalker>*/ this","failureString","","'Forbidden ' + NoStringParameterToFunctionCallWalker.targetFunctionName + ' string parameter: ' + (/*Args:*/<any>node).arguments[0].getFullText().trim().substring(0, 40)"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","36.00057","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","36.00074","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","36.00085","call.arguments[0]","/*<NoStringParameterToFunctionCallWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","36.00085","call.arguments[1]","/*<NoStringParameterToFunctionCallWalker>*/ this","createFailure","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","36.00085","call.arguments[2]","/*<NoStringParameterToFunctionCallWalker>*/ this","createFailure","string","'Forbidden ' + NoStringParameterToFunctionCallWalker.targetFunctionName + ' string parameter: ' + (/*Args:*/<any>node).arguments[0].getFullText().trim().substring(0, 40)"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","36.00085","calls","/*<NoStringParameterToFunctionCallWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden ' + NoStringParameterToFunctionCallWalker.targetFunctionName + ' string parameter: ' + (/*Args:*/<any>node).arguments[0].getFullText().trim().substring(0, 40))"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","36.00085","pickUpedName","/*<NoStringParameterToFunctionCallWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden ' + NoStringParameterToFunctionCallWalker.targetFunctionName + ' string parameter: ' + (/*Args:*/<any>node).arguments[0].getFullText().trim().substring(0, 40))"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","36.00085","call.arguments[0]","/*<NoStringParameterToFunctionCallWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden ' + NoStringParameterToFunctionCallWalker.targetFunctionName + ' string parameter: ' + (/*Args:*/<any>node).arguments[0].getFullText().trim().substring(0, 40))"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","36.00085","calls","/*<NoStringParameterToFunctionCallWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden ' + NoStringParameterToFunctionCallWalker.targetFunctionName + ' string parameter: ' + (/*Args:*/<any>node).arguments[0].getFullText().trim().substring(0, 40)))"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","36.00085","pickUpedName","/*<NoStringParameterToFunctionCallWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden ' + NoStringParameterToFunctionCallWalker.targetFunctionName + ' string parameter: ' + (/*Args:*/<any>node).arguments[0].getFullText().trim().substring(0, 40)))"
"../tslint-microsoft-contrib-master/src/utils/NoStringParameterToFunctionCallWalker.ts","NoStringParameterToFunctionCallWalker",".validateExpression","36.00085","pickUpedName","/*<NoStringParameterToFunctionCallWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Forbidden ' + NoStringParameterToFunctionCallWalker.targetFunctionName + ' string parameter: ' + (/*Args:*/<any>node).arguments[0].getFullText().trim().substring(0, 40)))"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","11.00034","TS.PropertyDefined","SyntaxKind","Unknown","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","12.00025","TS.PropertyDefined","SyntaxKind","EndOfFileToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","13.00032","TS.PropertyDefined","SyntaxKind","SingleLineCommentTrivia","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","14.00041","TS.PropertyDefined","SyntaxKind","MultiLineCommentTrivia","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","15.00040","TS.PropertyDefined","SyntaxKind","NewLineTrivia","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","16.00031","TS.PropertyDefined","SyntaxKind","WhitespaceTrivia","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","17.00034","TS.PropertyDefined","SyntaxKind","ShebangTrivia","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","18.00032","TS.PropertyDefined","SyntaxKind","ConflictMarkerTrivia","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","19.00038","TS.PropertyDefined","SyntaxKind","NumericLiteral","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","20.00032","TS.PropertyDefined","SyntaxKind","StringLiteral","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","21.00031","TS.PropertyDefined","SyntaxKind","RegularExpressionLiteral","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","22.00042","TS.PropertyDefined","SyntaxKind","NoSubstitutionTemplateLiteral","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","23.00047","TS.PropertyDefined","SyntaxKind","TemplateHead","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","24.00030","TS.PropertyDefined","SyntaxKind","TemplateMiddle","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","25.00032","TS.PropertyDefined","SyntaxKind","TemplateTail","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","26.00030","TS.PropertyDefined","SyntaxKind","OpenBraceToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","27.00032","TS.PropertyDefined","SyntaxKind","CloseBraceToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","28.00033","TS.PropertyDefined","SyntaxKind","OpenParenToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","29.00032","TS.PropertyDefined","SyntaxKind","CloseParenToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","30.00033","TS.PropertyDefined","SyntaxKind","OpenBracketToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","31.00034","TS.PropertyDefined","SyntaxKind","CloseBracketToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","32.00035","TS.PropertyDefined","SyntaxKind","DotToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","33.00026","TS.PropertyDefined","SyntaxKind","DotDotDotToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","34.00032","TS.PropertyDefined","SyntaxKind","SemicolonToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","35.00032","TS.PropertyDefined","SyntaxKind","CommaToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","36.00028","TS.PropertyDefined","SyntaxKind","LessThanToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","37.00031","TS.PropertyDefined","SyntaxKind","LessThanSlashToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","38.00037","TS.PropertyDefined","SyntaxKind","GreaterThanToken","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","39.00034","TS.PropertyDefined","SyntaxKind","LessThanEqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","40.00037","TS.PropertyDefined","SyntaxKind","GreaterThanEqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","41.00040","TS.PropertyDefined","SyntaxKind","EqualsEqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","42.00035","TS.PropertyDefined","SyntaxKind","ExclamationEqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","43.00040","TS.PropertyDefined","SyntaxKind","EqualsEqualsEqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","44.00041","TS.PropertyDefined","SyntaxKind","ExclamationEqualsEqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","45.00046","TS.PropertyDefined","SyntaxKind","EqualsGreaterThanToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","46.00040","TS.PropertyDefined","SyntaxKind","PlusToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","47.00027","TS.PropertyDefined","SyntaxKind","MinusToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","48.00028","TS.PropertyDefined","SyntaxKind","AsteriskToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","49.00031","TS.PropertyDefined","SyntaxKind","SlashToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","50.00028","TS.PropertyDefined","SyntaxKind","PercentToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","51.00030","TS.PropertyDefined","SyntaxKind","PlusPlusToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","52.00031","TS.PropertyDefined","SyntaxKind","MinusMinusToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","53.00033","TS.PropertyDefined","SyntaxKind","LessThanLessThanToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","54.00039","TS.PropertyDefined","SyntaxKind","GreaterThanGreaterThanToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","55.00045","TS.PropertyDefined","SyntaxKind","GreaterThanGreaterThanGreaterThanToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","56.00056","TS.PropertyDefined","SyntaxKind","AmpersandToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","57.00032","TS.PropertyDefined","SyntaxKind","BarToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","58.00026","TS.PropertyDefined","SyntaxKind","CaretToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","59.00028","TS.PropertyDefined","SyntaxKind","ExclamationToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","60.00034","TS.PropertyDefined","SyntaxKind","TildeToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","61.00028","TS.PropertyDefined","SyntaxKind","AmpersandAmpersandToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","62.00041","TS.PropertyDefined","SyntaxKind","BarBarToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","63.00029","TS.PropertyDefined","SyntaxKind","QuestionToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","64.00031","TS.PropertyDefined","SyntaxKind","ColonToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","65.00028","TS.PropertyDefined","SyntaxKind","AtToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","66.00025","TS.PropertyDefined","SyntaxKind","EqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","67.00029","TS.PropertyDefined","SyntaxKind","PlusEqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","68.00033","TS.PropertyDefined","SyntaxKind","MinusEqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","69.00034","TS.PropertyDefined","SyntaxKind","AsteriskEqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","70.00037","TS.PropertyDefined","SyntaxKind","SlashEqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","71.00034","TS.PropertyDefined","SyntaxKind","PercentEqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","72.00036","TS.PropertyDefined","SyntaxKind","LessThanLessThanEqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","73.00045","TS.PropertyDefined","SyntaxKind","GreaterThanGreaterThanEqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","74.00051","TS.PropertyDefined","SyntaxKind","GreaterThanGreaterThanGreaterThanEqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","75.00062","TS.PropertyDefined","SyntaxKind","AmpersandEqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","76.00038","TS.PropertyDefined","SyntaxKind","BarEqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","77.00032","TS.PropertyDefined","SyntaxKind","CaretEqualsToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","78.00034","TS.PropertyDefined","SyntaxKind","Identifier","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","79.00028","TS.PropertyDefined","SyntaxKind","BreakKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","80.00030","TS.PropertyDefined","SyntaxKind","CaseKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","81.00029","TS.PropertyDefined","SyntaxKind","CatchKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","82.00030","TS.PropertyDefined","SyntaxKind","ClassKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","83.00030","TS.PropertyDefined","SyntaxKind","ConstKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","84.00030","TS.PropertyDefined","SyntaxKind","ContinueKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","85.00033","TS.PropertyDefined","SyntaxKind","DebuggerKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","86.00033","TS.PropertyDefined","SyntaxKind","DefaultKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","87.00032","TS.PropertyDefined","SyntaxKind","DeleteKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","88.00031","TS.PropertyDefined","SyntaxKind","DoKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","89.00027","TS.PropertyDefined","SyntaxKind","ElseKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","90.00029","TS.PropertyDefined","SyntaxKind","EnumKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","91.00029","TS.PropertyDefined","SyntaxKind","ExportKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","92.00031","TS.PropertyDefined","SyntaxKind","ExtendsKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","93.00032","TS.PropertyDefined","SyntaxKind","FalseKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","94.00030","TS.PropertyDefined","SyntaxKind","FinallyKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","95.00032","TS.PropertyDefined","SyntaxKind","ForKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","96.00028","TS.PropertyDefined","SyntaxKind","FunctionKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","97.00033","TS.PropertyDefined","SyntaxKind","IfKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","98.00027","TS.PropertyDefined","SyntaxKind","ImportKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","99.00031","TS.PropertyDefined","SyntaxKind","InKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","100.00027","TS.PropertyDefined","SyntaxKind","InstanceOfKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","101.00035","TS.PropertyDefined","SyntaxKind","NewKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","102.00028","TS.PropertyDefined","SyntaxKind","NullKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","103.00029","TS.PropertyDefined","SyntaxKind","ReturnKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","104.00031","TS.PropertyDefined","SyntaxKind","SuperKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","105.00030","TS.PropertyDefined","SyntaxKind","SwitchKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","106.00031","TS.PropertyDefined","SyntaxKind","ThisKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","107.00029","TS.PropertyDefined","SyntaxKind","ThrowKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","108.00030","TS.PropertyDefined","SyntaxKind","TrueKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","109.00029","TS.PropertyDefined","SyntaxKind","TryKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","110.00028","TS.PropertyDefined","SyntaxKind","TypeOfKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","111.00031","TS.PropertyDefined","SyntaxKind","VarKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","112.00028","TS.PropertyDefined","SyntaxKind","VoidKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","113.00029","TS.PropertyDefined","SyntaxKind","WhileKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","114.00030","TS.PropertyDefined","SyntaxKind","WithKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","115.00029","TS.PropertyDefined","SyntaxKind","ImplementsKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","116.00035","TS.PropertyDefined","SyntaxKind","InterfaceKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","117.00034","TS.PropertyDefined","SyntaxKind","LetKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","118.00028","TS.PropertyDefined","SyntaxKind","PackageKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","119.00032","TS.PropertyDefined","SyntaxKind","PrivateKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","120.00032","TS.PropertyDefined","SyntaxKind","ProtectedKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","121.00034","TS.PropertyDefined","SyntaxKind","PublicKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","122.00031","TS.PropertyDefined","SyntaxKind","StaticKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","123.00031","TS.PropertyDefined","SyntaxKind","YieldKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","124.00030","TS.PropertyDefined","SyntaxKind","AbstractKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","125.00034","TS.PropertyDefined","SyntaxKind","AsKeyword","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","126.00027","TS.PropertyDefined","SyntaxKind","AnyKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","127.00028","TS.PropertyDefined","SyntaxKind","AsyncKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","128.00031","TS.PropertyDefined","SyntaxKind","AwaitKeyword","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","129.00031","TS.PropertyDefined","SyntaxKind","BooleanKeyword","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","130.00032","TS.PropertyDefined","SyntaxKind","ConstructorKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","131.00036","TS.PropertyDefined","SyntaxKind","DeclareKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","132.00032","TS.PropertyDefined","SyntaxKind","GetKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","133.00028","TS.PropertyDefined","SyntaxKind","IsKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","134.00028","TS.PropertyDefined","SyntaxKind","ModuleKeyword","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","135.00031","TS.PropertyDefined","SyntaxKind","NamespaceKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","136.00034","TS.PropertyDefined","SyntaxKind","RequireKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","137.00032","TS.PropertyDefined","SyntaxKind","NumberKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","138.00031","TS.PropertyDefined","SyntaxKind","SetKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","139.00028","TS.PropertyDefined","SyntaxKind","StringKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","140.00031","TS.PropertyDefined","SyntaxKind","SymbolKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","141.00031","TS.PropertyDefined","SyntaxKind","TypeKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","142.00029","TS.PropertyDefined","SyntaxKind","FromKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","143.00029","TS.PropertyDefined","SyntaxKind","OfKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","144.00027","TS.PropertyDefined","SyntaxKind","QualifiedName","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","145.00031","TS.PropertyDefined","SyntaxKind","ComputedPropertyName","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","146.00038","TS.PropertyDefined","SyntaxKind","TypeParameter","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","147.00031","TS.PropertyDefined","SyntaxKind","Parameter","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","148.00027","TS.PropertyDefined","SyntaxKind","Decorator","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","149.00027","TS.PropertyDefined","SyntaxKind","PropertySignature","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","150.00035","TS.PropertyDefined","SyntaxKind","PropertyDeclaration","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","151.00037","TS.PropertyDefined","SyntaxKind","MethodSignature","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","152.00033","TS.PropertyDefined","SyntaxKind","MethodDeclaration","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","153.00035","TS.PropertyDefined","SyntaxKind","Constructor","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","154.00029","TS.PropertyDefined","SyntaxKind","GetAccessor","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","155.00029","TS.PropertyDefined","SyntaxKind","SetAccessor","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","156.00029","TS.PropertyDefined","SyntaxKind","CallSignature","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","157.00031","TS.PropertyDefined","SyntaxKind","ConstructSignature","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","158.00036","TS.PropertyDefined","SyntaxKind","IndexSignature","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","159.00032","TS.PropertyDefined","SyntaxKind","TypePredicate","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","160.00032","TS.PropertyDefined","SyntaxKind","TypeReference","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","161.00031","TS.PropertyDefined","SyntaxKind","FunctionType","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","162.00030","TS.PropertyDefined","SyntaxKind","ConstructorType","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","163.00033","TS.PropertyDefined","SyntaxKind","TypeQuery","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","164.00027","TS.PropertyDefined","SyntaxKind","TypeLiteral","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","165.00029","TS.PropertyDefined","SyntaxKind","ArrayType","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","166.00027","TS.PropertyDefined","SyntaxKind","TupleType","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","167.00027","TS.PropertyDefined","SyntaxKind","UnionType","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","168.00027","TS.PropertyDefined","SyntaxKind","IntersectionType","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","169.00035","TS.PropertyDefined","SyntaxKind","ParenthesizedType","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","170.00035","TS.PropertyDefined","SyntaxKind","ObjectBindingPattern","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","171.00038","TS.PropertyDefined","SyntaxKind","ArrayBindingPattern","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","172.00037","TS.PropertyDefined","SyntaxKind","BindingElement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","173.00032","TS.PropertyDefined","SyntaxKind","ArrayLiteralExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","174.00040","TS.PropertyDefined","SyntaxKind","ObjectLiteralExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","175.00041","TS.PropertyDefined","SyntaxKind","PropertyAccessExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","176.00042","TS.PropertyDefined","SyntaxKind","ElementAccessExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","177.00041","TS.PropertyDefined","SyntaxKind","CallExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","178.00032","TS.PropertyDefined","SyntaxKind","NewExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","179.00031","TS.PropertyDefined","SyntaxKind","TaggedTemplateExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","180.00042","TS.PropertyDefined","SyntaxKind","TypeAssertionExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","181.00041","TS.PropertyDefined","SyntaxKind","ParenthesizedExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","182.00041","TS.PropertyDefined","SyntaxKind","FunctionExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","183.00036","TS.PropertyDefined","SyntaxKind","ArrowFunction","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","184.00031","TS.PropertyDefined","SyntaxKind","DeleteExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","185.00034","TS.PropertyDefined","SyntaxKind","TypeOfExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","186.00034","TS.PropertyDefined","SyntaxKind","VoidExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","187.00032","TS.PropertyDefined","SyntaxKind","AwaitExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","188.00034","TS.PropertyDefined","SyntaxKind","PrefixUnaryExpression","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","189.00039","TS.PropertyDefined","SyntaxKind","PostfixUnaryExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","190.00040","TS.PropertyDefined","SyntaxKind","BinaryExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","191.00034","TS.PropertyDefined","SyntaxKind","ConditionalExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","192.00039","TS.PropertyDefined","SyntaxKind","TemplateExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","193.00036","TS.PropertyDefined","SyntaxKind","YieldExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","194.00033","TS.PropertyDefined","SyntaxKind","SpreadElementExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","195.00041","TS.PropertyDefined","SyntaxKind","ClassExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","196.00033","TS.PropertyDefined","SyntaxKind","OmittedExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","197.00035","TS.PropertyDefined","SyntaxKind","ExpressionWithTypeArguments","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","198.00045","TS.PropertyDefined","SyntaxKind","AsExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","199.00031","TS.PropertyDefined","SyntaxKind","TemplateSpan","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","200.00030","TS.PropertyDefined","SyntaxKind","SemicolonClassElement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","201.00039","TS.PropertyDefined","SyntaxKind","Block","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","202.00023","TS.PropertyDefined","SyntaxKind","VariableStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","203.00035","TS.PropertyDefined","SyntaxKind","EmptyStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","204.00032","TS.PropertyDefined","SyntaxKind","ExpressionStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","205.00037","TS.PropertyDefined","SyntaxKind","IfStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","206.00029","TS.PropertyDefined","SyntaxKind","DoStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","207.00029","TS.PropertyDefined","SyntaxKind","WhileStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","208.00032","TS.PropertyDefined","SyntaxKind","ForStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","209.00030","TS.PropertyDefined","SyntaxKind","ForInStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","210.00032","TS.PropertyDefined","SyntaxKind","ForOfStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","211.00032","TS.PropertyDefined","SyntaxKind","ContinueStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","212.00035","TS.PropertyDefined","SyntaxKind","BreakStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","213.00032","TS.PropertyDefined","SyntaxKind","ReturnStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","214.00033","TS.PropertyDefined","SyntaxKind","WithStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","215.00031","TS.PropertyDefined","SyntaxKind","SwitchStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","216.00033","TS.PropertyDefined","SyntaxKind","LabeledStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","217.00034","TS.PropertyDefined","SyntaxKind","ThrowStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","218.00032","TS.PropertyDefined","SyntaxKind","TryStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","219.00030","TS.PropertyDefined","SyntaxKind","DebuggerStatement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","220.00035","TS.PropertyDefined","SyntaxKind","VariableDeclaration","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","221.00037","TS.PropertyDefined","SyntaxKind","VariableDeclarationList","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","222.00041","TS.PropertyDefined","SyntaxKind","FunctionDeclaration","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","223.00037","TS.PropertyDefined","SyntaxKind","ClassDeclaration","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","224.00034","TS.PropertyDefined","SyntaxKind","InterfaceDeclaration","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","225.00038","TS.PropertyDefined","SyntaxKind","TypeAliasDeclaration","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","226.00038","TS.PropertyDefined","SyntaxKind","EnumDeclaration","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","227.00033","TS.PropertyDefined","SyntaxKind","ModuleDeclaration","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","228.00035","TS.PropertyDefined","SyntaxKind","ModuleBlock","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","229.00029","TS.PropertyDefined","SyntaxKind","CaseBlock","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","230.00027","TS.PropertyDefined","SyntaxKind","ImportEqualsDeclaration","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","231.00041","TS.PropertyDefined","SyntaxKind","ImportDeclaration","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","232.00035","TS.PropertyDefined","SyntaxKind","ImportClause","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","233.00030","TS.PropertyDefined","SyntaxKind","NamespaceImport","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","234.00033","TS.PropertyDefined","SyntaxKind","NamedImports","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","235.00030","TS.PropertyDefined","SyntaxKind","ImportSpecifier","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","236.00033","TS.PropertyDefined","SyntaxKind","ExportAssignment","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","237.00034","TS.PropertyDefined","SyntaxKind","ExportDeclaration","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","238.00035","TS.PropertyDefined","SyntaxKind","NamedExports","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","239.00030","TS.PropertyDefined","SyntaxKind","ExportSpecifier","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","240.00033","TS.PropertyDefined","SyntaxKind","MissingDeclaration","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","241.00036","TS.PropertyDefined","SyntaxKind","ExternalModuleReference","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","242.00041","TS.PropertyDefined","SyntaxKind","JsxElement","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","243.00029","TS.PropertyDefined","SyntaxKind","JsxSelfClosingElement","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","244.00040","TS.PropertyDefined","SyntaxKind","JsxOpeningElement","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","245.00036","TS.PropertyDefined","SyntaxKind","JsxText","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","246.00026","TS.PropertyDefined","SyntaxKind","JsxClosingElement","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","247.00036","TS.PropertyDefined","SyntaxKind","JsxAttribute","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","248.00031","TS.PropertyDefined","SyntaxKind","JsxSpreadAttribute","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","249.00037","TS.PropertyDefined","SyntaxKind","JsxExpression","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","250.00032","TS.PropertyDefined","SyntaxKind","CaseClause","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","251.00028","TS.PropertyDefined","SyntaxKind","DefaultClause","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","252.00031","TS.PropertyDefined","SyntaxKind","HeritageClause","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","253.00032","TS.PropertyDefined","SyntaxKind","CatchClause","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","254.00029","TS.PropertyDefined","SyntaxKind","PropertyAssignment","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","255.00036","TS.PropertyDefined","SyntaxKind","ShorthandPropertyAssignment","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","256.00045","TS.PropertyDefined","SyntaxKind","EnumMember","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","257.00028","TS.PropertyDefined","SyntaxKind","SourceFile","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","258.00028","TS.PropertyDefined","SyntaxKind","JSDocTypeExpression","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","259.00038","TS.PropertyDefined","SyntaxKind","JSDocAllType","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","260.00031","TS.PropertyDefined","SyntaxKind","JSDocUnknownType","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","261.00035","TS.PropertyDefined","SyntaxKind","JSDocArrayType","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","262.00033","TS.PropertyDefined","SyntaxKind","JSDocUnionType","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","263.00033","TS.PropertyDefined","SyntaxKind","JSDocTupleType","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","264.00033","TS.PropertyDefined","SyntaxKind","JSDocNullableType","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","265.00036","TS.PropertyDefined","SyntaxKind","JSDocNonNullableType","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","266.00039","TS.PropertyDefined","SyntaxKind","JSDocRecordType","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","267.00034","TS.PropertyDefined","SyntaxKind","JSDocRecordMember","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","268.00036","TS.PropertyDefined","SyntaxKind","JSDocTypeReference","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","269.00037","TS.PropertyDefined","SyntaxKind","JSDocOptionalType","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","270.00036","TS.PropertyDefined","SyntaxKind","JSDocFunctionType","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","271.00036","TS.PropertyDefined","SyntaxKind","JSDocVariadicType","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","272.00036","TS.PropertyDefined","SyntaxKind","JSDocConstructorType","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","273.00039","TS.PropertyDefined","SyntaxKind","JSDocThisType","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","274.00032","TS.PropertyDefined","SyntaxKind","JSDocComment","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","275.00031","TS.PropertyDefined","SyntaxKind","JSDocTag","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","276.00027","TS.PropertyDefined","SyntaxKind","JSDocParameterTag","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","277.00036","TS.PropertyDefined","SyntaxKind","JSDocReturnTag","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","278.00033","TS.PropertyDefined","SyntaxKind","JSDocTypeTag","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","279.00031","TS.PropertyDefined","SyntaxKind","JSDocTemplateTag","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","280.00035","TS.PropertyDefined","SyntaxKind","SyntaxList","number","/**
1.6 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","281.00028","TS.PropertyDefined","SyntaxKind","Count","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","282.00023","TS.PropertyDefined","SyntaxKind","FirstAssignment","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","283.00033","TS.PropertyDefined","SyntaxKind","LastAssignment","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","284.00032","TS.PropertyDefined","SyntaxKind","FirstReservedWord","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","285.00035","TS.PropertyDefined","SyntaxKind","LastReservedWord","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","286.00034","TS.PropertyDefined","SyntaxKind","FirstKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","287.00030","TS.PropertyDefined","SyntaxKind","LastKeyword","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","288.00029","TS.PropertyDefined","SyntaxKind","FirstFutureReservedWord","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","289.00041","TS.PropertyDefined","SyntaxKind","LastFutureReservedWord","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","290.00040","TS.PropertyDefined","SyntaxKind","FirstTypeNode","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","291.00031","TS.PropertyDefined","SyntaxKind","LastTypeNode","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","292.00030","TS.PropertyDefined","SyntaxKind","FirstPunctuation","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","293.00034","TS.PropertyDefined","SyntaxKind","LastPunctuation","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","294.00033","TS.PropertyDefined","SyntaxKind","FirstToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","295.00028","TS.PropertyDefined","SyntaxKind","LastToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","296.00027","TS.PropertyDefined","SyntaxKind","FirstTriviaToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","297.00034","TS.PropertyDefined","SyntaxKind","LastTriviaToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","298.00033","TS.PropertyDefined","SyntaxKind","FirstLiteralToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","299.00035","TS.PropertyDefined","SyntaxKind","LastLiteralToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","300.00034","TS.PropertyDefined","SyntaxKind","FirstTemplateToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","301.00036","TS.PropertyDefined","SyntaxKind","LastTemplateToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","302.00035","TS.PropertyDefined","SyntaxKind","FirstBinaryOperator","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","303.00037","TS.PropertyDefined","SyntaxKind","LastBinaryOperator","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","304.00036","TS.PropertyDefined","SyntaxKind","FirstNode","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","305.00027","TS.PropertyDefined","SyntaxKind","AsteriskAsteriskToken","number",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind",".","306.00040","TS.PropertyDefined","SyntaxKind","AsteriskAsteriskEqualsToken","number","/**
1.7 only
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","310.00008","TS.VariableDeclaration","","cachedKinds","SyntaxKind",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","310.00044","def.func","SyntaxKind","current","() => SyntaxKind","/**
tslint:disable:variable-name */
tslint:disable:no-string-literal */

@event  !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","313.00055","Conditional","cachedKinds == null","","/*IfStatement*/ boolean/* no Else Clause*/","cachedKinds == null"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","314.00027","Compare","cachedKinds","","== /*null*/","null"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","314.00027","CompareR","null","","/*Reverse*/== /*SyntaxKind*/","cachedKinds"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","609.00053","Assign","cachedKinds","","= /*SyntaxKind*/","<SyntaxKind>{Unknown: (ts).SyntaxKind['Unknown'], EndOfFileToken: (ts).SyntaxKind['EndOfFileToken'], SingleLineCommentTrivia: (ts).SyntaxKind['SingleLineCommentTrivia'], MultiLineCommentTrivia: (ts).SyntaxKind['MultiLineCommentTrivia'], NewLineTrivia: (ts).SyntaxKind['NewLineTrivia'], WhitespaceTrivia: (ts).SyntaxKind['WhitespaceTrivia'], ShebangTrivia: (ts).SyntaxKind['ShebangTrivia'], ConflictMarkerTrivia: (ts).SyntaxKind['ConflictMarkerTrivia'], NumericLiteral: (ts).SyntaxKind['NumericLiteral'], StringLiteral: (ts).SyntaxKind['StringLiteral'], RegularExpressionLiteral: (ts).SyntaxKind['RegularExpressionLiteral'], NoSubstitutionTemplateLiteral: (ts).SyntaxKind['NoSubstitutionTemplateLiteral'], TemplateHead: (ts).SyntaxKind['TemplateHead'], TemplateMiddle: (ts).SyntaxKind['TemplateMiddle'], TemplateTail: (ts).SyntaxKind['TemplateTail'], OpenBraceToken: (ts).SyntaxKind['OpenBraceToken'], CloseBraceToken: (ts).SyntaxKind['CloseBraceToken'], OpenParenToken: (ts).SyntaxKind['OpenParenToken'], CloseParenToken: (ts).SyntaxKind['CloseParenToken'], OpenBracketToken: (ts).SyntaxKind['OpenBracketToken'], CloseBracketToken: (ts).SyntaxKind['CloseBracketToken'], DotToken: (ts).SyntaxKind['DotToken'], DotDotDotToken: (ts).SyntaxKind['DotDotDotToken'], SemicolonToken: (ts).SyntaxKind['SemicolonToken'], CommaToken: (ts).SyntaxKind['CommaToken'], LessThanToken: (ts).SyntaxKind['LessThanToken'], LessThanSlashToken: (ts).SyntaxKind['LessThanSlashToken'], GreaterThanToken: (ts).SyntaxKind['GreaterThanToken'], LessThanEqualsToken: (ts).SyntaxKind['LessThanEqualsToken'], GreaterThanEqualsToken: (ts).SyntaxKind['GreaterThanEqualsToken'], EqualsEqualsToken: (ts).SyntaxKind['EqualsEqualsToken'], ExclamationEqualsToken: (ts).SyntaxKind['ExclamationEqualsToken'], EqualsEqualsEqualsToken: (ts).SyntaxKind['EqualsEqualsEqualsToken'], ExclamationEqualsEqualsToken: (ts).SyntaxKind['ExclamationEqualsEqualsToken'], EqualsGreaterThanToken: (ts).SyntaxKind['EqualsGreaterThanToken'], PlusToken: (ts).SyntaxKind['PlusToken'], MinusToken: (ts).SyntaxKind['MinusToken'], AsteriskToken: (ts).SyntaxKind['AsteriskToken'], SlashToken: (ts).SyntaxKind['SlashToken'], PercentToken: (ts).SyntaxKind['PercentToken'], PlusPlusToken: (ts).SyntaxKind['PlusPlusToken'], MinusMinusToken: (ts).SyntaxKind['MinusMinusToken'], LessThanLessThanToken: (ts).SyntaxKind['LessThanLessThanToken'], GreaterThanGreaterThanToken: (ts).SyntaxKind['GreaterThanGreaterThanToken'], GreaterThanGreaterThanGreaterThanToken: (ts).SyntaxKind['GreaterThanGreaterThanGreaterThanToken'], AmpersandToken: (ts).SyntaxKind['AmpersandToken'], BarToken: (ts).SyntaxKind['BarToken'], CaretToken: (ts).SyntaxKind['CaretToken'], ExclamationToken: (ts).SyntaxKind['ExclamationToken'], TildeToken: (ts).SyntaxKind['TildeToken'], AmpersandAmpersandToken: (ts).SyntaxKind['AmpersandAmpersandToken'], BarBarToken: (ts).SyntaxKind['BarBarToken'], QuestionToken: (ts).SyntaxKind['QuestionToken'], ColonToken: (ts).SyntaxKind['ColonToken'], AtToken: (ts).SyntaxKind['AtToken'], EqualsToken: (ts).SyntaxKind['EqualsToken'], PlusEqualsToken: (ts).SyntaxKind['PlusEqualsToken'], MinusEqualsToken: (ts).SyntaxKind['MinusEqualsToken'], AsteriskEqualsToken: (ts).SyntaxKind['AsteriskEqualsToken'], SlashEqualsToken: (ts).SyntaxKind['SlashEqualsToken'], PercentEqualsToken: (ts).SyntaxKind['PercentEqualsToken'], LessThanLessThanEqualsToken: (ts).SyntaxKind['LessThanLessThanEqualsToken'], GreaterThanGreaterThanEqualsToken: (ts).SyntaxKind['GreaterThanGreaterThanEqualsToken'], GreaterThanGreaterThanGreaterThanEqualsToken: (ts).SyntaxKind['GreaterThanGreaterThanGreaterThanEqualsToken'], AmpersandEqualsToken: (ts).SyntaxKind['AmpersandEqualsToken'], BarEqualsToken: (ts).SyntaxKind['BarEqualsToken'], CaretEqualsToken: (ts).SyntaxKind['CaretEqualsToken'], Identifier: (ts).SyntaxKind['Identifier'], BreakKeyword: (ts).SyntaxKind['BreakKeyword'], CaseKeyword: (ts).SyntaxKind['CaseKeyword'], CatchKeyword: (ts).SyntaxKind['CatchKeyword'], ClassKeyword: (ts).SyntaxKind['ClassKeyword'], ConstKeyword: (ts).SyntaxKind['ConstKeyword'], ContinueKeyword: (ts).SyntaxKind['ContinueKeyword'], DebuggerKeyword: (ts).SyntaxKind['DebuggerKeyword'], DefaultKeyword: (ts).SyntaxKind['DefaultKeyword'], DeleteKeyword: (ts).SyntaxKind['DeleteKeyword'], DoKeyword: (ts).SyntaxKind['DoKeyword'], ElseKeyword: (ts).SyntaxKind['ElseKeyword'], EnumKeyword: (ts).SyntaxKind['EnumKeyword'], ExportKeyword: (ts).SyntaxKind['ExportKeyword'], ExtendsKeyword: (ts).SyntaxKind['ExtendsKeyword'], FalseKeyword: (ts).SyntaxKind['FalseKeyword'], FinallyKeyword: (ts).SyntaxKind['FinallyKeyword'], ForKeyword: (ts).SyntaxKind['ForKeyword'], FunctionKeyword: (ts).SyntaxKind['FunctionKeyword'], IfKeyword: (ts).SyntaxKind['IfKeyword'], ImportKeyword: (ts).SyntaxKind['ImportKeyword'], InKeyword: (ts).SyntaxKind['InKeyword'], InstanceOfKeyword: (ts).SyntaxKind['InstanceOfKeyword'], NewKeyword: (ts).SyntaxKind['NewKeyword'], NullKeyword: (ts).SyntaxKind['NullKeyword'], ReturnKeyword: (ts).SyntaxKind['ReturnKeyword'], SuperKeyword: (ts).SyntaxKind['SuperKeyword'], SwitchKeyword: (ts).SyntaxKind['SwitchKeyword'], ThisKeyword: (ts).SyntaxKind['ThisKeyword'], ThrowKeyword: (ts).SyntaxKind['ThrowKeyword'], TrueKeyword: (ts).SyntaxKind['TrueKeyword'], TryKeyword: (ts).SyntaxKind['TryKeyword'], TypeOfKeyword: (ts).SyntaxKind['TypeOfKeyword'], VarKeyword: (ts).SyntaxKind['VarKeyword'], VoidKeyword: (ts).SyntaxKind['VoidKeyword'], WhileKeyword: (ts).SyntaxKind['WhileKeyword'], WithKeyword: (ts).SyntaxKind['WithKeyword'], ImplementsKeyword: (ts).SyntaxKind['ImplementsKeyword'], InterfaceKeyword: (ts).SyntaxKind['InterfaceKeyword'], LetKeyword: (ts).SyntaxKind['LetKeyword'], PackageKeyword: (ts).SyntaxKind['PackageKeyword'], PrivateKeyword: (ts).SyntaxKind['PrivateKeyword'], ProtectedKeyword: (ts).SyntaxKind['ProtectedKeyword'], PublicKeyword: (ts).SyntaxKind['PublicKeyword'], StaticKeyword: (ts).SyntaxKind['StaticKeyword'], YieldKeyword: (ts).SyntaxKind['YieldKeyword'], AbstractKeyword: (ts).SyntaxKind['AbstractKeyword'], AsKeyword: (ts).SyntaxKind['AsKeyword'], AnyKeyword: (ts).SyntaxKind['AnyKeyword'], AsyncKeyword: (ts).SyntaxKind['AsyncKeyword'], AwaitKeyword: (ts).SyntaxKind['AwaitKeyword'], BooleanKeyword: (ts).SyntaxKind['BooleanKeyword'], ConstructorKeyword: (ts).SyntaxKind['ConstructorKeyword'], DeclareKeyword: (ts).SyntaxKind['DeclareKeyword'], GetKeyword: (ts).SyntaxKind['GetKeyword'], IsKeyword: (ts).SyntaxKind['IsKeyword'], ModuleKeyword: (ts).SyntaxKind['ModuleKeyword'], NamespaceKeyword: (ts).SyntaxKind['NamespaceKeyword'], RequireKeyword: (ts).SyntaxKind['RequireKeyword'], NumberKeyword: (ts).SyntaxKind['NumberKeyword'], SetKeyword: (ts).SyntaxKind['SetKeyword'], StringKeyword: (ts).SyntaxKind['StringKeyword'], SymbolKeyword: (ts).SyntaxKind['SymbolKeyword'], TypeKeyword: (ts).SyntaxKind['TypeKeyword'], FromKeyword: (ts).SyntaxKind['FromKeyword'], OfKeyword: (ts).SyntaxKind['OfKeyword'], QualifiedName: (ts).SyntaxKind['QualifiedName'], ComputedPropertyName: (ts).SyntaxKind['ComputedPropertyName'], TypeParameter: (ts).SyntaxKind['TypeParameter'], Parameter: (ts).SyntaxKind['Parameter'], Decorator: (ts).SyntaxKind['Decorator'], PropertySignature: (ts).SyntaxKind['PropertySignature'], PropertyDeclaration: (ts).SyntaxKind['PropertyDeclaration'], MethodSignature: (ts).SyntaxKind['MethodSignature'], MethodDeclaration: (ts).SyntaxKind['MethodDeclaration'], Constructor: (ts).SyntaxKind['Constructor'], GetAccessor: (ts).SyntaxKind['GetAccessor'], SetAccessor: (ts).SyntaxKind['SetAccessor'], CallSignature: (ts).SyntaxKind['CallSignature'], ConstructSignature: (ts).SyntaxKind['ConstructSignature'], IndexSignature: (ts).SyntaxKind['IndexSignature'], TypePredicate: (ts).SyntaxKind['TypePredicate'], TypeReference: (ts).SyntaxKind['TypeReference'], FunctionType: (ts).SyntaxKind['FunctionType'], ConstructorType: (ts).SyntaxKind['ConstructorType'], TypeQuery: (ts).SyntaxKind['TypeQuery'], TypeLiteral: (ts).SyntaxKind['TypeLiteral'], ArrayType: (ts).SyntaxKind['ArrayType'], TupleType: (ts).SyntaxKind['TupleType'], UnionType: (ts).SyntaxKind['UnionType'], IntersectionType: (ts).SyntaxKind['IntersectionType'], ParenthesizedType: (ts).SyntaxKind['ParenthesizedType'], ObjectBindingPattern: (ts).SyntaxKind['ObjectBindingPattern'], ArrayBindingPattern: (ts).SyntaxKind['ArrayBindingPattern'], BindingElement: (ts).SyntaxKind['BindingElement'], ArrayLiteralExpression: (ts).SyntaxKind['ArrayLiteralExpression'], ObjectLiteralExpression: (ts).SyntaxKind['ObjectLiteralExpression'], PropertyAccessExpression: (ts).SyntaxKind['PropertyAccessExpression'], ElementAccessExpression: (ts).SyntaxKind['ElementAccessExpression'], CallExpression: (ts).SyntaxKind['CallExpression'], NewExpression: (ts).SyntaxKind['NewExpression'], TaggedTemplateExpression: (ts).SyntaxKind['TaggedTemplateExpression'], TypeAssertionExpression: (ts).SyntaxKind['TypeAssertionExpression'], ParenthesizedExpression: (ts).SyntaxKind['ParenthesizedExpression'], FunctionExpression: (ts).SyntaxKind['FunctionExpression'], ArrowFunction: (ts).SyntaxKind['ArrowFunction'], DeleteExpression: (ts).SyntaxKind['DeleteExpression'], TypeOfExpression: (ts).SyntaxKind['TypeOfExpression'], VoidExpression: (ts).SyntaxKind['VoidExpression'], AwaitExpression: (ts).SyntaxKind['AwaitExpression'], PrefixUnaryExpression: (ts).SyntaxKind['PrefixUnaryExpression'], PostfixUnaryExpression: (ts).SyntaxKind['PostfixUnaryExpression'], BinaryExpression: (ts).SyntaxKind['BinaryExpression'], ConditionalExpression: (ts).SyntaxKind['ConditionalExpression'], TemplateExpression: (ts).SyntaxKind['TemplateExpression'], YieldExpression: (ts).SyntaxKind['YieldExpression'], SpreadElementExpression: (ts).SyntaxKind['SpreadElementExpression'], ClassExpression: (ts).SyntaxKind['ClassExpression'], OmittedExpression: (ts).SyntaxKind['OmittedExpression'], ExpressionWithTypeArguments: (ts).SyntaxKind['ExpressionWithTypeArguments'], AsExpression: (ts).SyntaxKind['AsExpression'], TemplateSpan: (ts).SyntaxKind['TemplateSpan'], SemicolonClassElement: (ts).SyntaxKind['SemicolonClassElement'], Block: (ts).SyntaxKind['Block'], VariableStatement: (ts).SyntaxKind['VariableStatement'], EmptyStatement: (ts).SyntaxKind['EmptyStatement'], ExpressionStatement: (ts).SyntaxKind['ExpressionStatement'], IfStatement: (ts).SyntaxKind['IfStatement'], DoStatement: (ts).SyntaxKind['DoStatement'], WhileStatement: (ts).SyntaxKind['WhileStatement'], ForStatement: (ts).SyntaxKind['ForStatement'], ForInStatement: (ts).SyntaxKind['ForInStatement'], ForOfStatement: (ts).SyntaxKind['ForOfStatement'], ContinueStatement: (ts).SyntaxKind['ContinueStatement'], BreakStatement: (ts).SyntaxKind['BreakStatement'], ReturnStatement: (ts).SyntaxKind['ReturnStatement'], WithStatement: (ts).SyntaxKind['WithStatement'], SwitchStatement: (ts).SyntaxKind['SwitchStatement'], LabeledStatement: (ts).SyntaxKind['LabeledStatement'], ThrowStatement: (ts).SyntaxKind['ThrowStatement'], TryStatement: (ts).SyntaxKind['TryStatement'], DebuggerStatement: (ts).SyntaxKind['DebuggerStatement'], VariableDeclaration: (ts).SyntaxKind['VariableDeclaration'], VariableDeclarationList: (ts).SyntaxKind['VariableDeclarationList'], FunctionDeclaration: (ts).SyntaxKind['FunctionDeclaration'], ClassDeclaration: (ts).SyntaxKind['ClassDeclaration'], InterfaceDeclaration: (ts).SyntaxKind['InterfaceDeclaration'], TypeAliasDeclaration: (ts).SyntaxKind['TypeAliasDeclaration'], EnumDeclaration: (ts).SyntaxKind['EnumDeclaration'], ModuleDeclaration: (ts).SyntaxKind['ModuleDeclaration'], ModuleBlock: (ts).SyntaxKind['ModuleBlock'], CaseBlock: (ts).SyntaxKind['CaseBlock'], ImportEqualsDeclaration: (ts).SyntaxKind['ImportEqualsDeclaration'], ImportDeclaration: (ts).SyntaxKind['ImportDeclaration'], ImportClause: (ts).SyntaxKind['ImportClause'], NamespaceImport: (ts).SyntaxKind['NamespaceImport'], NamedImports: (ts).SyntaxKind['NamedImports'], ImportSpecifier: (ts).SyntaxKind['ImportSpecifier'], ExportAssignment: (ts).SyntaxKind['ExportAssignment'], ExportDeclaration: (ts).SyntaxKind['ExportDeclaration'], NamedExports: (ts).SyntaxKind['NamedExports'], ExportSpecifier: (ts).SyntaxKind['ExportSpecifier'], MissingDeclaration: (ts).SyntaxKind['MissingDeclaration'], ExternalModuleReference: (ts).SyntaxKind['ExternalModuleReference'], JsxElement: (ts).SyntaxKind['JsxElement'], JsxSelfClosingElement: (ts).SyntaxKind['JsxSelfClosingElement'], JsxOpeningElement: (ts).SyntaxKind['JsxOpeningElement'], JsxText: (ts).SyntaxKind['JsxText'], JsxClosingElement: (ts).SyntaxKind['JsxClosingElement'], JsxAttribute: (ts).SyntaxKind['JsxAttribute'], JsxSpreadAttribute: (ts).SyntaxKind['JsxSpreadAttribute'], JsxExpression: (ts).SyntaxKind['JsxExpression'], CaseClause: (ts).SyntaxKind['CaseClause'], DefaultClause: (ts).SyntaxKind['DefaultClause'], HeritageClause: (ts).SyntaxKind['HeritageClause'], CatchClause: (ts).SyntaxKind['CatchClause'], PropertyAssignment: (ts).SyntaxKind['PropertyAssignment'], ShorthandPropertyAssignment: (ts).SyntaxKind['ShorthandPropertyAssignment'], EnumMember: (ts).SyntaxKind['EnumMember'], SourceFile: (ts).SyntaxKind['SourceFile'], JSDocTypeExpression: (ts).SyntaxKind['JSDocTypeExpression'], JSDocAllType: (ts).SyntaxKind['JSDocAllType'], JSDocUnknownType: (ts).SyntaxKind['JSDocUnknownType'], JSDocArrayType: (ts).SyntaxKind['JSDocArrayType'], JSDocUnionType: (ts).SyntaxKind['JSDocUnionType'], JSDocTupleType: (ts).SyntaxKind['JSDocTupleType'], JSDocNullableType: (ts).SyntaxKind['JSDocNullableType'], JSDocNonNullableType: (ts).SyntaxKind['JSDocNonNullableType'], JSDocRecordType: (ts).SyntaxKind['JSDocRecordType'], JSDocRecordMember: (ts).SyntaxKind['JSDocRecordMember'], JSDocTypeReference: (ts).SyntaxKind['JSDocTypeReference'], JSDocOptionalType: (ts).SyntaxKind['JSDocOptionalType'], JSDocFunctionType: (ts).SyntaxKind['JSDocFunctionType'], JSDocVariadicType: (ts).SyntaxKind['JSDocVariadicType'], JSDocConstructorType: (ts).SyntaxKind['JSDocConstructorType'], JSDocThisType: (ts).SyntaxKind['JSDocThisType'], JSDocComment: (ts).SyntaxKind['JSDocComment'], JSDocTag: (ts).SyntaxKind['JSDocTag'], JSDocParameterTag: (ts).SyntaxKind['JSDocParameterTag'], JSDocReturnTag: (ts).SyntaxKind['JSDocReturnTag'], JSDocTypeTag: (ts).SyntaxKind['JSDocTypeTag'], JSDocTemplateTag: (ts).SyntaxKind['JSDocTemplateTag'], SyntaxList: (ts).SyntaxKind['SyntaxList'], Count: (ts).SyntaxKind['Count'], FirstAssignment: (ts).SyntaxKind['FirstAssignment'], LastAssignment: (ts).SyntaxKind['LastAssignment'], FirstReservedWord: (ts).SyntaxKind['FirstReservedWord'], LastReservedWord: (ts).SyntaxKind['LastReservedWord'], FirstKeyword: (ts).SyntaxKind['FirstKeyword'], LastKeyword: (ts).SyntaxKind['LastKeyword'], FirstFutureReservedWord: (ts).SyntaxKind['FirstFutureReservedWord'], LastFutureReservedWord: (ts).SyntaxKind['LastFutureReservedWord'], FirstTypeNode: (ts).SyntaxKind['FirstTypeNode'], LastTypeNode: (ts).SyntaxKind['LastTypeNode'], FirstPunctuation: (ts).SyntaxKind['FirstPunctuation'], LastPunctuation: (ts).SyntaxKind['LastPunctuation'], FirstToken: (ts).SyntaxKind['FirstToken'], LastToken: (ts).SyntaxKind['LastToken'], FirstTriviaToken: (ts).SyntaxKind['FirstTriviaToken'], LastTriviaToken: (ts).SyntaxKind['LastTriviaToken'], FirstLiteralToken: (ts).SyntaxKind['FirstLiteralToken'], LastLiteralToken: (ts).SyntaxKind['LastLiteralToken'], FirstTemplateToken: (ts).SyntaxKind['FirstTemplateToken'], LastTemplateToken: (ts).SyntaxKind['LastTemplateToken'], FirstBinaryOperator: (ts).SyntaxKind['FirstBinaryOperator'], LastBinaryOperator: (ts).SyntaxKind['LastBinaryOperator'], FirstNode: (ts).SyntaxKind['FirstNode']}"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","609.00053","ref.type","SyntaxKind","","",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","609.00053","pickUpedName","cachedKinds","","","<SyntaxKind>{Unknown: (ts).SyntaxKind['Unknown'], EndOfFileToken: (ts).SyntaxKind['EndOfFileToken'], SingleLineCommentTrivia: (ts).SyntaxKind['SingleLineCommentTrivia'], MultiLineCommentTrivia: (ts).SyntaxKind['MultiLineCommentTrivia'], NewLineTrivia: (ts).SyntaxKind['NewLineTrivia'], WhitespaceTrivia: (ts).SyntaxKind['WhitespaceTrivia'], ShebangTrivia: (ts).SyntaxKind['ShebangTrivia'], ConflictMarkerTrivia: (ts).SyntaxKind['ConflictMarkerTrivia'], NumericLiteral: (ts).SyntaxKind['NumericLiteral'], StringLiteral: (ts).SyntaxKind['StringLiteral'], RegularExpressionLiteral: (ts).SyntaxKind['RegularExpressionLiteral'], NoSubstitutionTemplateLiteral: (ts).SyntaxKind['NoSubstitutionTemplateLiteral'], TemplateHead: (ts).SyntaxKind['TemplateHead'], TemplateMiddle: (ts).SyntaxKind['TemplateMiddle'], TemplateTail: (ts).SyntaxKind['TemplateTail'], OpenBraceToken: (ts).SyntaxKind['OpenBraceToken'], CloseBraceToken: (ts).SyntaxKind['CloseBraceToken'], OpenParenToken: (ts).SyntaxKind['OpenParenToken'], CloseParenToken: (ts).SyntaxKind['CloseParenToken'], OpenBracketToken: (ts).SyntaxKind['OpenBracketToken'], CloseBracketToken: (ts).SyntaxKind['CloseBracketToken'], DotToken: (ts).SyntaxKind['DotToken'], DotDotDotToken: (ts).SyntaxKind['DotDotDotToken'], SemicolonToken: (ts).SyntaxKind['SemicolonToken'], CommaToken: (ts).SyntaxKind['CommaToken'], LessThanToken: (ts).SyntaxKind['LessThanToken'], LessThanSlashToken: (ts).SyntaxKind['LessThanSlashToken'], GreaterThanToken: (ts).SyntaxKind['GreaterThanToken'], LessThanEqualsToken: (ts).SyntaxKind['LessThanEqualsToken'], GreaterThanEqualsToken: (ts).SyntaxKind['GreaterThanEqualsToken'], EqualsEqualsToken: (ts).SyntaxKind['EqualsEqualsToken'], ExclamationEqualsToken: (ts).SyntaxKind['ExclamationEqualsToken'], EqualsEqualsEqualsToken: (ts).SyntaxKind['EqualsEqualsEqualsToken'], ExclamationEqualsEqualsToken: (ts).SyntaxKind['ExclamationEqualsEqualsToken'], EqualsGreaterThanToken: (ts).SyntaxKind['EqualsGreaterThanToken'], PlusToken: (ts).SyntaxKind['PlusToken'], MinusToken: (ts).SyntaxKind['MinusToken'], AsteriskToken: (ts).SyntaxKind['AsteriskToken'], SlashToken: (ts).SyntaxKind['SlashToken'], PercentToken: (ts).SyntaxKind['PercentToken'], PlusPlusToken: (ts).SyntaxKind['PlusPlusToken'], MinusMinusToken: (ts).SyntaxKind['MinusMinusToken'], LessThanLessThanToken: (ts).SyntaxKind['LessThanLessThanToken'], GreaterThanGreaterThanToken: (ts).SyntaxKind['GreaterThanGreaterThanToken'], GreaterThanGreaterThanGreaterThanToken: (ts).SyntaxKind['GreaterThanGreaterThanGreaterThanToken'], AmpersandToken: (ts).SyntaxKind['AmpersandToken'], BarToken: (ts).SyntaxKind['BarToken'], CaretToken: (ts).SyntaxKind['CaretToken'], ExclamationToken: (ts).SyntaxKind['ExclamationToken'], TildeToken: (ts).SyntaxKind['TildeToken'], AmpersandAmpersandToken: (ts).SyntaxKind['AmpersandAmpersandToken'], BarBarToken: (ts).SyntaxKind['BarBarToken'], QuestionToken: (ts).SyntaxKind['QuestionToken'], ColonToken: (ts).SyntaxKind['ColonToken'], AtToken: (ts).SyntaxKind['AtToken'], EqualsToken: (ts).SyntaxKind['EqualsToken'], PlusEqualsToken: (ts).SyntaxKind['PlusEqualsToken'], MinusEqualsToken: (ts).SyntaxKind['MinusEqualsToken'], AsteriskEqualsToken: (ts).SyntaxKind['AsteriskEqualsToken'], SlashEqualsToken: (ts).SyntaxKind['SlashEqualsToken'], PercentEqualsToken: (ts).SyntaxKind['PercentEqualsToken'], LessThanLessThanEqualsToken: (ts).SyntaxKind['LessThanLessThanEqualsToken'], GreaterThanGreaterThanEqualsToken: (ts).SyntaxKind['GreaterThanGreaterThanEqualsToken'], GreaterThanGreaterThanGreaterThanEqualsToken: (ts).SyntaxKind['GreaterThanGreaterThanGreaterThanEqualsToken'], AmpersandEqualsToken: (ts).SyntaxKind['AmpersandEqualsToken'], BarEqualsToken: (ts).SyntaxKind['BarEqualsToken'], CaretEqualsToken: (ts).SyntaxKind['CaretEqualsToken'], Identifier: (ts).SyntaxKind['Identifier'], BreakKeyword: (ts).SyntaxKind['BreakKeyword'], CaseKeyword: (ts).SyntaxKind['CaseKeyword'], CatchKeyword: (ts).SyntaxKind['CatchKeyword'], ClassKeyword: (ts).SyntaxKind['ClassKeyword'], ConstKeyword: (ts).SyntaxKind['ConstKeyword'], ContinueKeyword: (ts).SyntaxKind['ContinueKeyword'], DebuggerKeyword: (ts).SyntaxKind['DebuggerKeyword'], DefaultKeyword: (ts).SyntaxKind['DefaultKeyword'], DeleteKeyword: (ts).SyntaxKind['DeleteKeyword'], DoKeyword: (ts).SyntaxKind['DoKeyword'], ElseKeyword: (ts).SyntaxKind['ElseKeyword'], EnumKeyword: (ts).SyntaxKind['EnumKeyword'], ExportKeyword: (ts).SyntaxKind['ExportKeyword'], ExtendsKeyword: (ts).SyntaxKind['ExtendsKeyword'], FalseKeyword: (ts).SyntaxKind['FalseKeyword'], FinallyKeyword: (ts).SyntaxKind['FinallyKeyword'], ForKeyword: (ts).SyntaxKind['ForKeyword'], FunctionKeyword: (ts).SyntaxKind['FunctionKeyword'], IfKeyword: (ts).SyntaxKind['IfKeyword'], ImportKeyword: (ts).SyntaxKind['ImportKeyword'], InKeyword: (ts).SyntaxKind['InKeyword'], InstanceOfKeyword: (ts).SyntaxKind['InstanceOfKeyword'], NewKeyword: (ts).SyntaxKind['NewKeyword'], NullKeyword: (ts).SyntaxKind['NullKeyword'], ReturnKeyword: (ts).SyntaxKind['ReturnKeyword'], SuperKeyword: (ts).SyntaxKind['SuperKeyword'], SwitchKeyword: (ts).SyntaxKind['SwitchKeyword'], ThisKeyword: (ts).SyntaxKind['ThisKeyword'], ThrowKeyword: (ts).SyntaxKind['ThrowKeyword'], TrueKeyword: (ts).SyntaxKind['TrueKeyword'], TryKeyword: (ts).SyntaxKind['TryKeyword'], TypeOfKeyword: (ts).SyntaxKind['TypeOfKeyword'], VarKeyword: (ts).SyntaxKind['VarKeyword'], VoidKeyword: (ts).SyntaxKind['VoidKeyword'], WhileKeyword: (ts).SyntaxKind['WhileKeyword'], WithKeyword: (ts).SyntaxKind['WithKeyword'], ImplementsKeyword: (ts).SyntaxKind['ImplementsKeyword'], InterfaceKeyword: (ts).SyntaxKind['InterfaceKeyword'], LetKeyword: (ts).SyntaxKind['LetKeyword'], PackageKeyword: (ts).SyntaxKind['PackageKeyword'], PrivateKeyword: (ts).SyntaxKind['PrivateKeyword'], ProtectedKeyword: (ts).SyntaxKind['ProtectedKeyword'], PublicKeyword: (ts).SyntaxKind['PublicKeyword'], StaticKeyword: (ts).SyntaxKind['StaticKeyword'], YieldKeyword: (ts).SyntaxKind['YieldKeyword'], AbstractKeyword: (ts).SyntaxKind['AbstractKeyword'], AsKeyword: (ts).SyntaxKind['AsKeyword'], AnyKeyword: (ts).SyntaxKind['AnyKeyword'], AsyncKeyword: (ts).SyntaxKind['AsyncKeyword'], AwaitKeyword: (ts).SyntaxKind['AwaitKeyword'], BooleanKeyword: (ts).SyntaxKind['BooleanKeyword'], ConstructorKeyword: (ts).SyntaxKind['ConstructorKeyword'], DeclareKeyword: (ts).SyntaxKind['DeclareKeyword'], GetKeyword: (ts).SyntaxKind['GetKeyword'], IsKeyword: (ts).SyntaxKind['IsKeyword'], ModuleKeyword: (ts).SyntaxKind['ModuleKeyword'], NamespaceKeyword: (ts).SyntaxKind['NamespaceKeyword'], RequireKeyword: (ts).SyntaxKind['RequireKeyword'], NumberKeyword: (ts).SyntaxKind['NumberKeyword'], SetKeyword: (ts).SyntaxKind['SetKeyword'], StringKeyword: (ts).SyntaxKind['StringKeyword'], SymbolKeyword: (ts).SyntaxKind['SymbolKeyword'], TypeKeyword: (ts).SyntaxKind['TypeKeyword'], FromKeyword: (ts).SyntaxKind['FromKeyword'], OfKeyword: (ts).SyntaxKind['OfKeyword'], QualifiedName: (ts).SyntaxKind['QualifiedName'], ComputedPropertyName: (ts).SyntaxKind['ComputedPropertyName'], TypeParameter: (ts).SyntaxKind['TypeParameter'], Parameter: (ts).SyntaxKind['Parameter'], Decorator: (ts).SyntaxKind['Decorator'], PropertySignature: (ts).SyntaxKind['PropertySignature'], PropertyDeclaration: (ts).SyntaxKind['PropertyDeclaration'], MethodSignature: (ts).SyntaxKind['MethodSignature'], MethodDeclaration: (ts).SyntaxKind['MethodDeclaration'], Constructor: (ts).SyntaxKind['Constructor'], GetAccessor: (ts).SyntaxKind['GetAccessor'], SetAccessor: (ts).SyntaxKind['SetAccessor'], CallSignature: (ts).SyntaxKind['CallSignature'], ConstructSignature: (ts).SyntaxKind['ConstructSignature'], IndexSignature: (ts).SyntaxKind['IndexSignature'], TypePredicate: (ts).SyntaxKind['TypePredicate'], TypeReference: (ts).SyntaxKind['TypeReference'], FunctionType: (ts).SyntaxKind['FunctionType'], ConstructorType: (ts).SyntaxKind['ConstructorType'], TypeQuery: (ts).SyntaxKind['TypeQuery'], TypeLiteral: (ts).SyntaxKind['TypeLiteral'], ArrayType: (ts).SyntaxKind['ArrayType'], TupleType: (ts).SyntaxKind['TupleType'], UnionType: (ts).SyntaxKind['UnionType'], IntersectionType: (ts).SyntaxKind['IntersectionType'], ParenthesizedType: (ts).SyntaxKind['ParenthesizedType'], ObjectBindingPattern: (ts).SyntaxKind['ObjectBindingPattern'], ArrayBindingPattern: (ts).SyntaxKind['ArrayBindingPattern'], BindingElement: (ts).SyntaxKind['BindingElement'], ArrayLiteralExpression: (ts).SyntaxKind['ArrayLiteralExpression'], ObjectLiteralExpression: (ts).SyntaxKind['ObjectLiteralExpression'], PropertyAccessExpression: (ts).SyntaxKind['PropertyAccessExpression'], ElementAccessExpression: (ts).SyntaxKind['ElementAccessExpression'], CallExpression: (ts).SyntaxKind['CallExpression'], NewExpression: (ts).SyntaxKind['NewExpression'], TaggedTemplateExpression: (ts).SyntaxKind['TaggedTemplateExpression'], TypeAssertionExpression: (ts).SyntaxKind['TypeAssertionExpression'], ParenthesizedExpression: (ts).SyntaxKind['ParenthesizedExpression'], FunctionExpression: (ts).SyntaxKind['FunctionExpression'], ArrowFunction: (ts).SyntaxKind['ArrowFunction'], DeleteExpression: (ts).SyntaxKind['DeleteExpression'], TypeOfExpression: (ts).SyntaxKind['TypeOfExpression'], VoidExpression: (ts).SyntaxKind['VoidExpression'], AwaitExpression: (ts).SyntaxKind['AwaitExpression'], PrefixUnaryExpression: (ts).SyntaxKind['PrefixUnaryExpression'], PostfixUnaryExpression: (ts).SyntaxKind['PostfixUnaryExpression'], BinaryExpression: (ts).SyntaxKind['BinaryExpression'], ConditionalExpression: (ts).SyntaxKind['ConditionalExpression'], TemplateExpression: (ts).SyntaxKind['TemplateExpression'], YieldExpression: (ts).SyntaxKind['YieldExpression'], SpreadElementExpression: (ts).SyntaxKind['SpreadElementExpression'], ClassExpression: (ts).SyntaxKind['ClassExpression'], OmittedExpression: (ts).SyntaxKind['OmittedExpression'], ExpressionWithTypeArguments: (ts).SyntaxKind['ExpressionWithTypeArguments'], AsExpression: (ts).SyntaxKind['AsExpression'], TemplateSpan: (ts).SyntaxKind['TemplateSpan'], SemicolonClassElement: (ts).SyntaxKind['SemicolonClassElement'], Block: (ts).SyntaxKind['Block'], VariableStatement: (ts).SyntaxKind['VariableStatement'], EmptyStatement: (ts).SyntaxKind['EmptyStatement'], ExpressionStatement: (ts).SyntaxKind['ExpressionStatement'], IfStatement: (ts).SyntaxKind['IfStatement'], DoStatement: (ts).SyntaxKind['DoStatement'], WhileStatement: (ts).SyntaxKind['WhileStatement'], ForStatement: (ts).SyntaxKind['ForStatement'], ForInStatement: (ts).SyntaxKind['ForInStatement'], ForOfStatement: (ts).SyntaxKind['ForOfStatement'], ContinueStatement: (ts).SyntaxKind['ContinueStatement'], BreakStatement: (ts).SyntaxKind['BreakStatement'], ReturnStatement: (ts).SyntaxKind['ReturnStatement'], WithStatement: (ts).SyntaxKind['WithStatement'], SwitchStatement: (ts).SyntaxKind['SwitchStatement'], LabeledStatement: (ts).SyntaxKind['LabeledStatement'], ThrowStatement: (ts).SyntaxKind['ThrowStatement'], TryStatement: (ts).SyntaxKind['TryStatement'], DebuggerStatement: (ts).SyntaxKind['DebuggerStatement'], VariableDeclaration: (ts).SyntaxKind['VariableDeclaration'], VariableDeclarationList: (ts).SyntaxKind['VariableDeclarationList'], FunctionDeclaration: (ts).SyntaxKind['FunctionDeclaration'], ClassDeclaration: (ts).SyntaxKind['ClassDeclaration'], InterfaceDeclaration: (ts).SyntaxKind['InterfaceDeclaration'], TypeAliasDeclaration: (ts).SyntaxKind['TypeAliasDeclaration'], EnumDeclaration: (ts).SyntaxKind['EnumDeclaration'], ModuleDeclaration: (ts).SyntaxKind['ModuleDeclaration'], ModuleBlock: (ts).SyntaxKind['ModuleBlock'], CaseBlock: (ts).SyntaxKind['CaseBlock'], ImportEqualsDeclaration: (ts).SyntaxKind['ImportEqualsDeclaration'], ImportDeclaration: (ts).SyntaxKind['ImportDeclaration'], ImportClause: (ts).SyntaxKind['ImportClause'], NamespaceImport: (ts).SyntaxKind['NamespaceImport'], NamedImports: (ts).SyntaxKind['NamedImports'], ImportSpecifier: (ts).SyntaxKind['ImportSpecifier'], ExportAssignment: (ts).SyntaxKind['ExportAssignment'], ExportDeclaration: (ts).SyntaxKind['ExportDeclaration'], NamedExports: (ts).SyntaxKind['NamedExports'], ExportSpecifier: (ts).SyntaxKind['ExportSpecifier'], MissingDeclaration: (ts).SyntaxKind['MissingDeclaration'], ExternalModuleReference: (ts).SyntaxKind['ExternalModuleReference'], JsxElement: (ts).SyntaxKind['JsxElement'], JsxSelfClosingElement: (ts).SyntaxKind['JsxSelfClosingElement'], JsxOpeningElement: (ts).SyntaxKind['JsxOpeningElement'], JsxText: (ts).SyntaxKind['JsxText'], JsxClosingElement: (ts).SyntaxKind['JsxClosingElement'], JsxAttribute: (ts).SyntaxKind['JsxAttribute'], JsxSpreadAttribute: (ts).SyntaxKind['JsxSpreadAttribute'], JsxExpression: (ts).SyntaxKind['JsxExpression'], CaseClause: (ts).SyntaxKind['CaseClause'], DefaultClause: (ts).SyntaxKind['DefaultClause'], HeritageClause: (ts).SyntaxKind['HeritageClause'], CatchClause: (ts).SyntaxKind['CatchClause'], PropertyAssignment: (ts).SyntaxKind['PropertyAssignment'], ShorthandPropertyAssignment: (ts).SyntaxKind['ShorthandPropertyAssignment'], EnumMember: (ts).SyntaxKind['EnumMember'], SourceFile: (ts).SyntaxKind['SourceFile'], JSDocTypeExpression: (ts).SyntaxKind['JSDocTypeExpression'], JSDocAllType: (ts).SyntaxKind['JSDocAllType'], JSDocUnknownType: (ts).SyntaxKind['JSDocUnknownType'], JSDocArrayType: (ts).SyntaxKind['JSDocArrayType'], JSDocUnionType: (ts).SyntaxKind['JSDocUnionType'], JSDocTupleType: (ts).SyntaxKind['JSDocTupleType'], JSDocNullableType: (ts).SyntaxKind['JSDocNullableType'], JSDocNonNullableType: (ts).SyntaxKind['JSDocNonNullableType'], JSDocRecordType: (ts).SyntaxKind['JSDocRecordType'], JSDocRecordMember: (ts).SyntaxKind['JSDocRecordMember'], JSDocTypeReference: (ts).SyntaxKind['JSDocTypeReference'], JSDocOptionalType: (ts).SyntaxKind['JSDocOptionalType'], JSDocFunctionType: (ts).SyntaxKind['JSDocFunctionType'], JSDocVariadicType: (ts).SyntaxKind['JSDocVariadicType'], JSDocConstructorType: (ts).SyntaxKind['JSDocConstructorType'], JSDocThisType: (ts).SyntaxKind['JSDocThisType'], JSDocComment: (ts).SyntaxKind['JSDocComment'], JSDocTag: (ts).SyntaxKind['JSDocTag'], JSDocParameterTag: (ts).SyntaxKind['JSDocParameterTag'], JSDocReturnTag: (ts).SyntaxKind['JSDocReturnTag'], JSDocTypeTag: (ts).SyntaxKind['JSDocTypeTag'], JSDocTemplateTag: (ts).SyntaxKind['JSDocTemplateTag'], SyntaxList: (ts).SyntaxKind['SyntaxList'], Count: (ts).SyntaxKind['Count'], FirstAssignment: (ts).SyntaxKind['FirstAssignment'], LastAssignment: (ts).SyntaxKind['LastAssignment'], FirstReservedWord: (ts).SyntaxKind['FirstReservedWord'], LastReservedWord: (ts).SyntaxKind['LastReservedWord'], FirstKeyword: (ts).SyntaxKind['FirstKeyword'], LastKeyword: (ts).SyntaxKind['LastKeyword'], FirstFutureReservedWord: (ts).SyntaxKind['FirstFutureReservedWord'], LastFutureReservedWord: (ts).SyntaxKind['LastFutureReservedWord'], FirstTypeNode: (ts).SyntaxKind['FirstTypeNode'], LastTypeNode: (ts).SyntaxKind['LastTypeNode'], FirstPunctuation: (ts).SyntaxKind['FirstPunctuation'], LastPunctuation: (ts).SyntaxKind['LastPunctuation'], FirstToken: (ts).SyntaxKind['FirstToken'], LastToken: (ts).SyntaxKind['LastToken'], FirstTriviaToken: (ts).SyntaxKind['FirstTriviaToken'], LastTriviaToken: (ts).SyntaxKind['LastTriviaToken'], FirstLiteralToken: (ts).SyntaxKind['FirstLiteralToken'], LastLiteralToken: (ts).SyntaxKind['LastLiteralToken'], FirstTemplateToken: (ts).SyntaxKind['FirstTemplateToken'], LastTemplateToken: (ts).SyntaxKind['LastTemplateToken'], FirstBinaryOperator: (ts).SyntaxKind['FirstBinaryOperator'], LastBinaryOperator: (ts).SyntaxKind['LastBinaryOperator'], FirstNode: (ts).SyntaxKind['FirstNode']}"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","610.00019","Conditional","cachedKinds.Count !== (ts).SyntaxKind['Count']","","/*IfStatement*/ boolean/* no Else Clause*/","(ts).SyntaxKind['Count'] !== (ts).SyntaxKind['Count']"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","611.00060","ref.varName","(ts)","SyntaxKind['Count']","any",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","611.00060","Compare","cachedKinds","Count","!== /*any*/","(ts).SyntaxKind['Count']"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","611.00060","CompareR","(ts)","","/*Reverse*/!== /*number*/","(ts).SyntaxKind['Count']"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","611.00060","pickUpedName","cachedKinds","Count","","(ts).SyntaxKind['Count']"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","612.00073","ref.varName","ts","version","any",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","612.00073","BinaryExpression","'Unsupported TypeScript version: '","","+ /*any*/","ts.version"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","612.00073","throw","","","Error","(new Error('Unsupported TypeScript version: ' + ts.version))"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","612.00073","ref.type","Error","","throw",""
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","615.00015","return","","","SyntaxKind","<SyntaxKind>{Unknown: (ts).SyntaxKind['Unknown'], EndOfFileToken: (ts).SyntaxKind['EndOfFileToken'], SingleLineCommentTrivia: (ts).SyntaxKind['SingleLineCommentTrivia'], MultiLineCommentTrivia: (ts).SyntaxKind['MultiLineCommentTrivia'], NewLineTrivia: (ts).SyntaxKind['NewLineTrivia'], WhitespaceTrivia: (ts).SyntaxKind['WhitespaceTrivia'], ShebangTrivia: (ts).SyntaxKind['ShebangTrivia'], ConflictMarkerTrivia: (ts).SyntaxKind['ConflictMarkerTrivia'], NumericLiteral: (ts).SyntaxKind['NumericLiteral'], StringLiteral: (ts).SyntaxKind['StringLiteral'], RegularExpressionLiteral: (ts).SyntaxKind['RegularExpressionLiteral'], NoSubstitutionTemplateLiteral: (ts).SyntaxKind['NoSubstitutionTemplateLiteral'], TemplateHead: (ts).SyntaxKind['TemplateHead'], TemplateMiddle: (ts).SyntaxKind['TemplateMiddle'], TemplateTail: (ts).SyntaxKind['TemplateTail'], OpenBraceToken: (ts).SyntaxKind['OpenBraceToken'], CloseBraceToken: (ts).SyntaxKind['CloseBraceToken'], OpenParenToken: (ts).SyntaxKind['OpenParenToken'], CloseParenToken: (ts).SyntaxKind['CloseParenToken'], OpenBracketToken: (ts).SyntaxKind['OpenBracketToken'], CloseBracketToken: (ts).SyntaxKind['CloseBracketToken'], DotToken: (ts).SyntaxKind['DotToken'], DotDotDotToken: (ts).SyntaxKind['DotDotDotToken'], SemicolonToken: (ts).SyntaxKind['SemicolonToken'], CommaToken: (ts).SyntaxKind['CommaToken'], LessThanToken: (ts).SyntaxKind['LessThanToken'], LessThanSlashToken: (ts).SyntaxKind['LessThanSlashToken'], GreaterThanToken: (ts).SyntaxKind['GreaterThanToken'], LessThanEqualsToken: (ts).SyntaxKind['LessThanEqualsToken'], GreaterThanEqualsToken: (ts).SyntaxKind['GreaterThanEqualsToken'], EqualsEqualsToken: (ts).SyntaxKind['EqualsEqualsToken'], ExclamationEqualsToken: (ts).SyntaxKind['ExclamationEqualsToken'], EqualsEqualsEqualsToken: (ts).SyntaxKind['EqualsEqualsEqualsToken'], ExclamationEqualsEqualsToken: (ts).SyntaxKind['ExclamationEqualsEqualsToken'], EqualsGreaterThanToken: (ts).SyntaxKind['EqualsGreaterThanToken'], PlusToken: (ts).SyntaxKind['PlusToken'], MinusToken: (ts).SyntaxKind['MinusToken'], AsteriskToken: (ts).SyntaxKind['AsteriskToken'], SlashToken: (ts).SyntaxKind['SlashToken'], PercentToken: (ts).SyntaxKind['PercentToken'], PlusPlusToken: (ts).SyntaxKind['PlusPlusToken'], MinusMinusToken: (ts).SyntaxKind['MinusMinusToken'], LessThanLessThanToken: (ts).SyntaxKind['LessThanLessThanToken'], GreaterThanGreaterThanToken: (ts).SyntaxKind['GreaterThanGreaterThanToken'], GreaterThanGreaterThanGreaterThanToken: (ts).SyntaxKind['GreaterThanGreaterThanGreaterThanToken'], AmpersandToken: (ts).SyntaxKind['AmpersandToken'], BarToken: (ts).SyntaxKind['BarToken'], CaretToken: (ts).SyntaxKind['CaretToken'], ExclamationToken: (ts).SyntaxKind['ExclamationToken'], TildeToken: (ts).SyntaxKind['TildeToken'], AmpersandAmpersandToken: (ts).SyntaxKind['AmpersandAmpersandToken'], BarBarToken: (ts).SyntaxKind['BarBarToken'], QuestionToken: (ts).SyntaxKind['QuestionToken'], ColonToken: (ts).SyntaxKind['ColonToken'], AtToken: (ts).SyntaxKind['AtToken'], EqualsToken: (ts).SyntaxKind['EqualsToken'], PlusEqualsToken: (ts).SyntaxKind['PlusEqualsToken'], MinusEqualsToken: (ts).SyntaxKind['MinusEqualsToken'], AsteriskEqualsToken: (ts).SyntaxKind['AsteriskEqualsToken'], SlashEqualsToken: (ts).SyntaxKind['SlashEqualsToken'], PercentEqualsToken: (ts).SyntaxKind['PercentEqualsToken'], LessThanLessThanEqualsToken: (ts).SyntaxKind['LessThanLessThanEqualsToken'], GreaterThanGreaterThanEqualsToken: (ts).SyntaxKind['GreaterThanGreaterThanEqualsToken'], GreaterThanGreaterThanGreaterThanEqualsToken: (ts).SyntaxKind['GreaterThanGreaterThanGreaterThanEqualsToken'], AmpersandEqualsToken: (ts).SyntaxKind['AmpersandEqualsToken'], BarEqualsToken: (ts).SyntaxKind['BarEqualsToken'], CaretEqualsToken: (ts).SyntaxKind['CaretEqualsToken'], Identifier: (ts).SyntaxKind['Identifier'], BreakKeyword: (ts).SyntaxKind['BreakKeyword'], CaseKeyword: (ts).SyntaxKind['CaseKeyword'], CatchKeyword: (ts).SyntaxKind['CatchKeyword'], ClassKeyword: (ts).SyntaxKind['ClassKeyword'], ConstKeyword: (ts).SyntaxKind['ConstKeyword'], ContinueKeyword: (ts).SyntaxKind['ContinueKeyword'], DebuggerKeyword: (ts).SyntaxKind['DebuggerKeyword'], DefaultKeyword: (ts).SyntaxKind['DefaultKeyword'], DeleteKeyword: (ts).SyntaxKind['DeleteKeyword'], DoKeyword: (ts).SyntaxKind['DoKeyword'], ElseKeyword: (ts).SyntaxKind['ElseKeyword'], EnumKeyword: (ts).SyntaxKind['EnumKeyword'], ExportKeyword: (ts).SyntaxKind['ExportKeyword'], ExtendsKeyword: (ts).SyntaxKind['ExtendsKeyword'], FalseKeyword: (ts).SyntaxKind['FalseKeyword'], FinallyKeyword: (ts).SyntaxKind['FinallyKeyword'], ForKeyword: (ts).SyntaxKind['ForKeyword'], FunctionKeyword: (ts).SyntaxKind['FunctionKeyword'], IfKeyword: (ts).SyntaxKind['IfKeyword'], ImportKeyword: (ts).SyntaxKind['ImportKeyword'], InKeyword: (ts).SyntaxKind['InKeyword'], InstanceOfKeyword: (ts).SyntaxKind['InstanceOfKeyword'], NewKeyword: (ts).SyntaxKind['NewKeyword'], NullKeyword: (ts).SyntaxKind['NullKeyword'], ReturnKeyword: (ts).SyntaxKind['ReturnKeyword'], SuperKeyword: (ts).SyntaxKind['SuperKeyword'], SwitchKeyword: (ts).SyntaxKind['SwitchKeyword'], ThisKeyword: (ts).SyntaxKind['ThisKeyword'], ThrowKeyword: (ts).SyntaxKind['ThrowKeyword'], TrueKeyword: (ts).SyntaxKind['TrueKeyword'], TryKeyword: (ts).SyntaxKind['TryKeyword'], TypeOfKeyword: (ts).SyntaxKind['TypeOfKeyword'], VarKeyword: (ts).SyntaxKind['VarKeyword'], VoidKeyword: (ts).SyntaxKind['VoidKeyword'], WhileKeyword: (ts).SyntaxKind['WhileKeyword'], WithKeyword: (ts).SyntaxKind['WithKeyword'], ImplementsKeyword: (ts).SyntaxKind['ImplementsKeyword'], InterfaceKeyword: (ts).SyntaxKind['InterfaceKeyword'], LetKeyword: (ts).SyntaxKind['LetKeyword'], PackageKeyword: (ts).SyntaxKind['PackageKeyword'], PrivateKeyword: (ts).SyntaxKind['PrivateKeyword'], ProtectedKeyword: (ts).SyntaxKind['ProtectedKeyword'], PublicKeyword: (ts).SyntaxKind['PublicKeyword'], StaticKeyword: (ts).SyntaxKind['StaticKeyword'], YieldKeyword: (ts).SyntaxKind['YieldKeyword'], AbstractKeyword: (ts).SyntaxKind['AbstractKeyword'], AsKeyword: (ts).SyntaxKind['AsKeyword'], AnyKeyword: (ts).SyntaxKind['AnyKeyword'], AsyncKeyword: (ts).SyntaxKind['AsyncKeyword'], AwaitKeyword: (ts).SyntaxKind['AwaitKeyword'], BooleanKeyword: (ts).SyntaxKind['BooleanKeyword'], ConstructorKeyword: (ts).SyntaxKind['ConstructorKeyword'], DeclareKeyword: (ts).SyntaxKind['DeclareKeyword'], GetKeyword: (ts).SyntaxKind['GetKeyword'], IsKeyword: (ts).SyntaxKind['IsKeyword'], ModuleKeyword: (ts).SyntaxKind['ModuleKeyword'], NamespaceKeyword: (ts).SyntaxKind['NamespaceKeyword'], RequireKeyword: (ts).SyntaxKind['RequireKeyword'], NumberKeyword: (ts).SyntaxKind['NumberKeyword'], SetKeyword: (ts).SyntaxKind['SetKeyword'], StringKeyword: (ts).SyntaxKind['StringKeyword'], SymbolKeyword: (ts).SyntaxKind['SymbolKeyword'], TypeKeyword: (ts).SyntaxKind['TypeKeyword'], FromKeyword: (ts).SyntaxKind['FromKeyword'], OfKeyword: (ts).SyntaxKind['OfKeyword'], QualifiedName: (ts).SyntaxKind['QualifiedName'], ComputedPropertyName: (ts).SyntaxKind['ComputedPropertyName'], TypeParameter: (ts).SyntaxKind['TypeParameter'], Parameter: (ts).SyntaxKind['Parameter'], Decorator: (ts).SyntaxKind['Decorator'], PropertySignature: (ts).SyntaxKind['PropertySignature'], PropertyDeclaration: (ts).SyntaxKind['PropertyDeclaration'], MethodSignature: (ts).SyntaxKind['MethodSignature'], MethodDeclaration: (ts).SyntaxKind['MethodDeclaration'], Constructor: (ts).SyntaxKind['Constructor'], GetAccessor: (ts).SyntaxKind['GetAccessor'], SetAccessor: (ts).SyntaxKind['SetAccessor'], CallSignature: (ts).SyntaxKind['CallSignature'], ConstructSignature: (ts).SyntaxKind['ConstructSignature'], IndexSignature: (ts).SyntaxKind['IndexSignature'], TypePredicate: (ts).SyntaxKind['TypePredicate'], TypeReference: (ts).SyntaxKind['TypeReference'], FunctionType: (ts).SyntaxKind['FunctionType'], ConstructorType: (ts).SyntaxKind['ConstructorType'], TypeQuery: (ts).SyntaxKind['TypeQuery'], TypeLiteral: (ts).SyntaxKind['TypeLiteral'], ArrayType: (ts).SyntaxKind['ArrayType'], TupleType: (ts).SyntaxKind['TupleType'], UnionType: (ts).SyntaxKind['UnionType'], IntersectionType: (ts).SyntaxKind['IntersectionType'], ParenthesizedType: (ts).SyntaxKind['ParenthesizedType'], ObjectBindingPattern: (ts).SyntaxKind['ObjectBindingPattern'], ArrayBindingPattern: (ts).SyntaxKind['ArrayBindingPattern'], BindingElement: (ts).SyntaxKind['BindingElement'], ArrayLiteralExpression: (ts).SyntaxKind['ArrayLiteralExpression'], ObjectLiteralExpression: (ts).SyntaxKind['ObjectLiteralExpression'], PropertyAccessExpression: (ts).SyntaxKind['PropertyAccessExpression'], ElementAccessExpression: (ts).SyntaxKind['ElementAccessExpression'], CallExpression: (ts).SyntaxKind['CallExpression'], NewExpression: (ts).SyntaxKind['NewExpression'], TaggedTemplateExpression: (ts).SyntaxKind['TaggedTemplateExpression'], TypeAssertionExpression: (ts).SyntaxKind['TypeAssertionExpression'], ParenthesizedExpression: (ts).SyntaxKind['ParenthesizedExpression'], FunctionExpression: (ts).SyntaxKind['FunctionExpression'], ArrowFunction: (ts).SyntaxKind['ArrowFunction'], DeleteExpression: (ts).SyntaxKind['DeleteExpression'], TypeOfExpression: (ts).SyntaxKind['TypeOfExpression'], VoidExpression: (ts).SyntaxKind['VoidExpression'], AwaitExpression: (ts).SyntaxKind['AwaitExpression'], PrefixUnaryExpression: (ts).SyntaxKind['PrefixUnaryExpression'], PostfixUnaryExpression: (ts).SyntaxKind['PostfixUnaryExpression'], BinaryExpression: (ts).SyntaxKind['BinaryExpression'], ConditionalExpression: (ts).SyntaxKind['ConditionalExpression'], TemplateExpression: (ts).SyntaxKind['TemplateExpression'], YieldExpression: (ts).SyntaxKind['YieldExpression'], SpreadElementExpression: (ts).SyntaxKind['SpreadElementExpression'], ClassExpression: (ts).SyntaxKind['ClassExpression'], OmittedExpression: (ts).SyntaxKind['OmittedExpression'], ExpressionWithTypeArguments: (ts).SyntaxKind['ExpressionWithTypeArguments'], AsExpression: (ts).SyntaxKind['AsExpression'], TemplateSpan: (ts).SyntaxKind['TemplateSpan'], SemicolonClassElement: (ts).SyntaxKind['SemicolonClassElement'], Block: (ts).SyntaxKind['Block'], VariableStatement: (ts).SyntaxKind['VariableStatement'], EmptyStatement: (ts).SyntaxKind['EmptyStatement'], ExpressionStatement: (ts).SyntaxKind['ExpressionStatement'], IfStatement: (ts).SyntaxKind['IfStatement'], DoStatement: (ts).SyntaxKind['DoStatement'], WhileStatement: (ts).SyntaxKind['WhileStatement'], ForStatement: (ts).SyntaxKind['ForStatement'], ForInStatement: (ts).SyntaxKind['ForInStatement'], ForOfStatement: (ts).SyntaxKind['ForOfStatement'], ContinueStatement: (ts).SyntaxKind['ContinueStatement'], BreakStatement: (ts).SyntaxKind['BreakStatement'], ReturnStatement: (ts).SyntaxKind['ReturnStatement'], WithStatement: (ts).SyntaxKind['WithStatement'], SwitchStatement: (ts).SyntaxKind['SwitchStatement'], LabeledStatement: (ts).SyntaxKind['LabeledStatement'], ThrowStatement: (ts).SyntaxKind['ThrowStatement'], TryStatement: (ts).SyntaxKind['TryStatement'], DebuggerStatement: (ts).SyntaxKind['DebuggerStatement'], VariableDeclaration: (ts).SyntaxKind['VariableDeclaration'], VariableDeclarationList: (ts).SyntaxKind['VariableDeclarationList'], FunctionDeclaration: (ts).SyntaxKind['FunctionDeclaration'], ClassDeclaration: (ts).SyntaxKind['ClassDeclaration'], InterfaceDeclaration: (ts).SyntaxKind['InterfaceDeclaration'], TypeAliasDeclaration: (ts).SyntaxKind['TypeAliasDeclaration'], EnumDeclaration: (ts).SyntaxKind['EnumDeclaration'], ModuleDeclaration: (ts).SyntaxKind['ModuleDeclaration'], ModuleBlock: (ts).SyntaxKind['ModuleBlock'], CaseBlock: (ts).SyntaxKind['CaseBlock'], ImportEqualsDeclaration: (ts).SyntaxKind['ImportEqualsDeclaration'], ImportDeclaration: (ts).SyntaxKind['ImportDeclaration'], ImportClause: (ts).SyntaxKind['ImportClause'], NamespaceImport: (ts).SyntaxKind['NamespaceImport'], NamedImports: (ts).SyntaxKind['NamedImports'], ImportSpecifier: (ts).SyntaxKind['ImportSpecifier'], ExportAssignment: (ts).SyntaxKind['ExportAssignment'], ExportDeclaration: (ts).SyntaxKind['ExportDeclaration'], NamedExports: (ts).SyntaxKind['NamedExports'], ExportSpecifier: (ts).SyntaxKind['ExportSpecifier'], MissingDeclaration: (ts).SyntaxKind['MissingDeclaration'], ExternalModuleReference: (ts).SyntaxKind['ExternalModuleReference'], JsxElement: (ts).SyntaxKind['JsxElement'], JsxSelfClosingElement: (ts).SyntaxKind['JsxSelfClosingElement'], JsxOpeningElement: (ts).SyntaxKind['JsxOpeningElement'], JsxText: (ts).SyntaxKind['JsxText'], JsxClosingElement: (ts).SyntaxKind['JsxClosingElement'], JsxAttribute: (ts).SyntaxKind['JsxAttribute'], JsxSpreadAttribute: (ts).SyntaxKind['JsxSpreadAttribute'], JsxExpression: (ts).SyntaxKind['JsxExpression'], CaseClause: (ts).SyntaxKind['CaseClause'], DefaultClause: (ts).SyntaxKind['DefaultClause'], HeritageClause: (ts).SyntaxKind['HeritageClause'], CatchClause: (ts).SyntaxKind['CatchClause'], PropertyAssignment: (ts).SyntaxKind['PropertyAssignment'], ShorthandPropertyAssignment: (ts).SyntaxKind['ShorthandPropertyAssignment'], EnumMember: (ts).SyntaxKind['EnumMember'], SourceFile: (ts).SyntaxKind['SourceFile'], JSDocTypeExpression: (ts).SyntaxKind['JSDocTypeExpression'], JSDocAllType: (ts).SyntaxKind['JSDocAllType'], JSDocUnknownType: (ts).SyntaxKind['JSDocUnknownType'], JSDocArrayType: (ts).SyntaxKind['JSDocArrayType'], JSDocUnionType: (ts).SyntaxKind['JSDocUnionType'], JSDocTupleType: (ts).SyntaxKind['JSDocTupleType'], JSDocNullableType: (ts).SyntaxKind['JSDocNullableType'], JSDocNonNullableType: (ts).SyntaxKind['JSDocNonNullableType'], JSDocRecordType: (ts).SyntaxKind['JSDocRecordType'], JSDocRecordMember: (ts).SyntaxKind['JSDocRecordMember'], JSDocTypeReference: (ts).SyntaxKind['JSDocTypeReference'], JSDocOptionalType: (ts).SyntaxKind['JSDocOptionalType'], JSDocFunctionType: (ts).SyntaxKind['JSDocFunctionType'], JSDocVariadicType: (ts).SyntaxKind['JSDocVariadicType'], JSDocConstructorType: (ts).SyntaxKind['JSDocConstructorType'], JSDocThisType: (ts).SyntaxKind['JSDocThisType'], JSDocComment: (ts).SyntaxKind['JSDocComment'], JSDocTag: (ts).SyntaxKind['JSDocTag'], JSDocParameterTag: (ts).SyntaxKind['JSDocParameterTag'], JSDocReturnTag: (ts).SyntaxKind['JSDocReturnTag'], JSDocTypeTag: (ts).SyntaxKind['JSDocTypeTag'], JSDocTemplateTag: (ts).SyntaxKind['JSDocTemplateTag'], SyntaxList: (ts).SyntaxKind['SyntaxList'], Count: (ts).SyntaxKind['Count'], FirstAssignment: (ts).SyntaxKind['FirstAssignment'], LastAssignment: (ts).SyntaxKind['LastAssignment'], FirstReservedWord: (ts).SyntaxKind['FirstReservedWord'], LastReservedWord: (ts).SyntaxKind['LastReservedWord'], FirstKeyword: (ts).SyntaxKind['FirstKeyword'], LastKeyword: (ts).SyntaxKind['LastKeyword'], FirstFutureReservedWord: (ts).SyntaxKind['FirstFutureReservedWord'], LastFutureReservedWord: (ts).SyntaxKind['LastFutureReservedWord'], FirstTypeNode: (ts).SyntaxKind['FirstTypeNode'], LastTypeNode: (ts).SyntaxKind['LastTypeNode'], FirstPunctuation: (ts).SyntaxKind['FirstPunctuation'], LastPunctuation: (ts).SyntaxKind['LastPunctuation'], FirstToken: (ts).SyntaxKind['FirstToken'], LastToken: (ts).SyntaxKind['LastToken'], FirstTriviaToken: (ts).SyntaxKind['FirstTriviaToken'], LastTriviaToken: (ts).SyntaxKind['LastTriviaToken'], FirstLiteralToken: (ts).SyntaxKind['FirstLiteralToken'], LastLiteralToken: (ts).SyntaxKind['LastLiteralToken'], FirstTemplateToken: (ts).SyntaxKind['FirstTemplateToken'], LastTemplateToken: (ts).SyntaxKind['LastTemplateToken'], FirstBinaryOperator: (ts).SyntaxKind['FirstBinaryOperator'], LastBinaryOperator: (ts).SyntaxKind['LastBinaryOperator'], FirstNode: (ts).SyntaxKind['FirstNode']}"
"../tslint-microsoft-contrib-master/src/utils/SyntaxKind.ts","SyntaxKind","","615.00015","ref.type","SyntaxKind","","return",""
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","6.00015","def.func","Utils","exists","<T>(list: T[], predicate: (t: T) => boolean) => boolean","/**
Logical 'any' or 'exists' function.

@event  !! missing description.
(@param)?\W+t *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","11.00037","define.Parameter","list","","T[]","/*Args:*/<T[]>list"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","11.00037","ref.type","T","","",""
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils",".","11.00057","define.Parameter","t","","T","/*Args:*/<T>t"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils",".","11.00057","ref.type","T","","",""
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","11.00063","define.Parameter","predicate","","(t: T) => boolean","/*Args:*/<(t: T) => boolean>predicate"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","11.00084","Conditional","list != null","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<T[]>list) != null"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","12.00020","Compare","list","","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","12.00020","CompareR","null","","/*Reverse*/!= /*T[]*/","(/*Args:*/<T[]>list)"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","12.00029","Conditional","i < list.length","","/*ForStatement*/ boolean","i < (/*Args:*/<T[]>list).length"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","13.00021","TS.VariableDeclaration","","i","number",""
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","13.00025","Assign","i","","number","0"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","13.00038","ref.varName","list","length","number",""
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","13.00038","Compare","i","","< /*number*/","(/*Args:*/<T[]>list).length"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","13.00038","CompareR","list","","/*Reverse*/< /*number*/","0"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","14.00020","TS.VariableDeclaration","","obj","T",""
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","14.00036","Assign","obj","","T","(/*Args:*/<T[]>list)[0]"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","14.00036","ref.type","T","","",""
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","14.00039","Conditional","predicate(obj)","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<(t: T) => boolean>predicate)((/*Args:*/<T[]>list)[0])"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","15.00031","call.arguments[0]","(/*Args:*/<(t: T) => boolean>predicate)","","T","(/*Args:*/<T[]>list)[0]"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","15.00031","calls","(/*Args:*/<(t: T) => boolean>predicate)","","boolean","((/*Args:*/<T[]>list)[0])"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","16.00027","return","","","boolean","true"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","20.00015","return","","","boolean","false"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","21.00006","def.func","Utils","reduce","<T, R>(list: T[], predicate: (memo: R, element: T) => R, initialValue: R) => R","/**
A reduce function.

@event  !! missing description.
(@param)?\W+memo *\W+ !! missing description.
(@param)?\W+element *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","26.00040","define.Parameter","list","","T[]","/*Args:*/<T[]>list"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","26.00040","ref.type","T","","",""
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils",".","26.00063","define.Parameter","memo","","R","/*Args:*/<R>memo"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils",".","26.00063","ref.type","R","","",""
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils",".","26.00075","define.Parameter","element","","T","/*Args:*/<T>element"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils",".","26.00075","ref.type","T","","",""
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","26.00081","define.Parameter","predicate","","(memo: R, element: T) => R","/*Args:*/<(memo: R, element: T) => R>predicate"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","26.00098","define.Parameter","initialValue","","R","/*Args:*/<R>initialValue"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","26.00098","ref.type","R","","",""
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","27.00012","TS.VariableDeclaration","","result","R",""
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","27.00021","TS.VariableDeclaration","","initialValue","R",""
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","27.00021","Assign","result","","R","(/*Args:*/<R>initialValue)"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","27.00021","ref.type","R","","",""
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","27.00035","Conditional","list != null","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<T[]>list) != null"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","28.00020","Compare","list","","!= /*null*/","null"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","28.00020","CompareR","null","","/*Reverse*/!= /*T[]*/","(/*Args:*/<T[]>list)"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","28.00029","Conditional","i < list.length","","/*ForStatement*/ boolean","0 < (/*Args:*/<T[]>list).length"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","29.00021","TS.VariableDeclaration","","i","number",""
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","29.00025","Assign","i","","number","0"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","29.00038","ref.varName","list","length","number",""
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","29.00038","Compare","i","","< /*number*/","(/*Args:*/<T[]>list).length"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","29.00038","CompareR","list","","/*Reverse*/< /*number*/","0"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","30.00049","call.arguments[0]","(/*Args:*/<(memo: R, element: T) => R>predicate)","","R","(/*Args:*/<R>initialValue)"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","30.00049","call.arguments[1]","(/*Args:*/<(memo: R, element: T) => R>predicate)","","T","(/*Args:*/<T[]>list)[0]"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","30.00049","calls","(/*Args:*/<(memo: R, element: T) => R>predicate)","","R","((/*Args:*/<R>initialValue), (/*Args:*/<T[]>list)[0])"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","30.00049","Assign","result","","= /*R*/","(/*Args:*/<(memo: R, element: T) => R>predicate)((/*Args:*/<R>initialValue), (/*Args:*/<T[]>list)[0])"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","30.00049","ref.type","R","","",""
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","30.00049","pickUpedName","result","","","(/*Args:*/<(memo: R, element: T) => R>predicate)((/*Args:*/<R>initialValue), (/*Args:*/<T[]>list)[0])"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","33.00015","return","","","R","(/*Args:*/<(memo: R, element: T) => R>predicate)((/*Args:*/<R>initialValue), (/*Args:*/<T[]>list)[0])"
"../tslint-microsoft-contrib-master/src/utils/Utils.ts","Utils","","33.00015","ref.type","R","","return",""
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","Rule","","11.00013","ref.type","Lint.Rules.AbstractRule","","extends",""
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","Rule","","12.00018","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","Rule","","12.00035","TS.PropertyDefined","Rule","FAILURE_STRING","string",""
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","Rule","","12.00035","Assign","Rule","FAILURE_STRING","string","'Invalid comparison in typeof. Did you mean '"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","Rule","","14.00018","TS.PropertyDefined","Rule","VALID_TERMS","string[]",""
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","Rule","","14.00100","TS.PropertyDefined","Rule","VALID_TERMS","string[]",""
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","Rule","","14.00100","Assign","Rule","VALID_TERMS","string[]","['undefined', 'object', 'boolean', 'number', 'string', 'function', 'symbol']"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","Rule",".","16.00011","TS.MethodDefined","Rule","apply","(sourceFile: any) => any[]","(@param)?\W+sourceFile *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","Rule",".apply","16.00033","define.Parameter","apply","sourceFile","any","/*Args:*/<any>sourceFile"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","Rule",".apply","17.00080","calls","/*<Rule>*/ this","getOptions","any","()"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","Rule",".apply","17.00080","pickUpedName","/*<Rule>*/ this","getOptions","","()"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","Rule",".apply","17.00080","call.arguments[0]","/*<Rule>*/ this","applyWithWalker","any","(new ValidTypeofRuleWalker((/*Args:*/<any>sourceFile), this.getOptions()))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","Rule",".apply","17.00080","calls","/*<Rule>*/ this","applyWithWalker","any","((new ValidTypeofRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","Rule",".apply","17.00080","pickUpedName","/*<Rule>*/ this","applyWithWalker","","((new ValidTypeofRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","Rule",".apply","17.00080","pickUpedName","/*<Rule>*/ this","getOptions","","((new ValidTypeofRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","Rule",".apply","17.00080","return","","","any","this.applyWithWalker((new ValidTypeofRuleWalker((/*Args:*/<any>sourceFile), this.getOptions())))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","Rule","","22.00006","defined","ValidTypeofRuleWalker","","TS.Class","
"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker","","22.00006","ref.type","ErrorTolerantWalker","","extends",""
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".","24.00014","TS.MethodDefined","ValidTypeofRuleWalker","visitBinaryExpression","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","24.00046","define.Parameter","visitBinaryExpression","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","24.00071","Conditional","node.left.kind === SyntaxKind.current().TypeOfExpression && node.right.kind === SyntaxKind.current().StringLiteral","","/*IfStatement*/ boolean","(/*Args:*/<any>node).left.kind === SyntaxKind.current().TypeOfExpression && (/*Args:*/<any>node).right.kind === SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","25.00043","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","25.00043","pickUpedName","SyntaxKind","current","","()"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","25.00053","ref.varName","SyntaxKind.current()","TypeOfExpression","number",""
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","25.00053","Compare","node.left","kind","=== /*number*/","SyntaxKind.current().TypeOfExpression"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","25.00053","pickUpedName","SyntaxKind","current","","SyntaxKind.current().TypeOfExpression"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","25.00053","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).left.kind"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","25.00104","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","25.00104","pickUpedName","SyntaxKind","current","","()"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","25.00114","ref.varName","SyntaxKind.current()","StringLiteral","number",""
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","25.00114","Compare","node.right","kind","=== /*number*/","SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","25.00114","pickUpedName","SyntaxKind","current","","SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","25.00114","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).right.kind"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","25.00114","BinaryExpression","node.left.kind === SyntaxKind.current().TypeOfExpression","","&& /*boolean*/","(/*Args:*/<any>node).right.kind === SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","25.00114","pickUpedName","SyntaxKind","current","","(/*Args:*/<any>node).right.kind === SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","26.00056","call.arguments[0]","/*<ValidTypeofRuleWalker>*/ this","validateTypeOf","any","(/*Args:*/<any>node).right"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","26.00056","calls","/*<ValidTypeofRuleWalker>*/ this","validateTypeOf","void","((/*Args:*/<any>node).right)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","26.00056","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","validateTypeOf","","((/*Args:*/<any>node).right)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","27.00015","Conditional","node.right.kind === SyntaxKind.current().TypeOfExpression && node.left.kind === SyntaxKind.current().StringLiteral","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<any>node).right.kind === SyntaxKind.current().TypeOfExpression && (/*Args:*/<any>node).left.kind === SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","27.00051","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","27.00051","pickUpedName","SyntaxKind","current","","()"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","27.00061","ref.varName","SyntaxKind.current()","TypeOfExpression","number",""
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","27.00061","Compare","node.right","kind","=== /*number*/","SyntaxKind.current().TypeOfExpression"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","27.00061","pickUpedName","SyntaxKind","current","","SyntaxKind.current().TypeOfExpression"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","27.00061","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).right.kind"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","27.00111","calls","SyntaxKind","current","SyntaxKind","()"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","27.00111","pickUpedName","SyntaxKind","current","","()"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","27.00121","ref.varName","SyntaxKind.current()","StringLiteral","number",""
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","27.00121","Compare","node.left","kind","=== /*number*/","SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","27.00121","pickUpedName","SyntaxKind","current","","SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","27.00121","CompareR","SyntaxKind.current()","","/*Reverse*/=== /*any*/","(/*Args:*/<any>node).left.kind"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","27.00121","BinaryExpression","node.right.kind === SyntaxKind.current().TypeOfExpression","","&& /*boolean*/","(/*Args:*/<any>node).left.kind === SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","27.00121","pickUpedName","SyntaxKind","current","","(/*Args:*/<any>node).left.kind === SyntaxKind.current().StringLiteral"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","28.00056","call.arguments[0]","/*<ValidTypeofRuleWalker>*/ this","validateTypeOf","any","(/*Args:*/<any>node).left"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","28.00056","calls","/*<ValidTypeofRuleWalker>*/ this","validateTypeOf","void","((/*Args:*/<any>node).left)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","28.00056","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","validateTypeOf","","((/*Args:*/<any>node).left)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","30.00037","call.arguments[0]","super","visitBinaryExpression","any","(/*Args:*/<any>node)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".visitBinaryExpression","30.00037","calls","super","visitBinaryExpression","any","((/*Args:*/<any>node))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".","33.00012","TS.MethodDefined","ValidTypeofRuleWalker","validateTypeOf","(node: any) => void","(@param)?\W+node *\W+ !! missing description.
"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","33.00037","define.Parameter","validateTypeOf","node","any","/*Args:*/<any>node"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","33.00059","Conditional","Rule.VALID_TERMS.indexOf(node.text) === - 1","","/*IfStatement*/ boolean/* no Else Clause*/","['undefined', 'object', 'boolean', 'number', 'string', 'function', 'symbol'].indexOf((/*Args:*/<any>node).text) === - 1"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","34.00043","call.arguments[0]","['undefined', 'object', 'boolean', 'number', 'string', 'function', 'symbol']","indexOf","any","(/*Args:*/<any>node).text"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","34.00043","calls","['undefined', 'object', 'boolean', 'number', 'string', 'function', 'symbol']","indexOf","number","((/*Args:*/<any>node).text)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","34.00043","pickUpedName","Rule.VALID_TERMS","indexOf","","((/*Args:*/<any>node).text)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","34.00054","Compare","Rule.VALID_TERMS.indexOf(node.text)","","=== /*number*/","- 1"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","34.00054","CompareR","- 1","","/*Reverse*/=== /*number*/","['undefined', 'object', 'boolean', 'number', 'string', 'function', 'symbol'].indexOf((/*Args:*/<any>node).text)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","34.00054","pickUpedName","Rule.VALID_TERMS","indexOf","","['undefined', 'object', 'boolean', 'number', 'string', 'function', 'symbol'].indexOf((/*Args:*/<any>node).text)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","35.00016","TS.VariableDeclaration","","start","number",""
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","35.00038","calls","(/*Args:*/<any>node)","getStart","any","()"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","35.00038","Assign","start","","any","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","36.00016","TS.VariableDeclaration","","width","number",""
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","36.00038","calls","(/*Args:*/<any>node)","getWidth","any","()"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","36.00038","Assign","width","","any","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00109","call.arguments[0]","/*<ValidTypeofRuleWalker>*/ this","getClosestTerm","any","(/*Args:*/<any>node).text"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00109","calls","/*<ValidTypeofRuleWalker>*/ this","getClosestTerm","string","((/*Args:*/<any>node).text)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00109","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","getClosestTerm","","((/*Args:*/<any>node).text)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00109","BinaryExpression","Rule","FAILURE_STRING","+ /*string*/","this.getClosestTerm((/*Args:*/<any>node).text)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00109","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","getClosestTerm","","this.getClosestTerm((/*Args:*/<any>node).text)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00116","BinaryExpression","Rule.FAILURE_STRING + this.getClosestTerm(node.text)","","+ /*string*/","'?'"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00116","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","","","'?'"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00116","call.arguments[0]","/*<ValidTypeofRuleWalker>*/ this","createFailure","number","(/*Args:*/<any>node).getStart()"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00116","call.arguments[1]","/*<ValidTypeofRuleWalker>*/ this","createFailure","number","(/*Args:*/<any>node).getWidth()"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00116","call.arguments[2]","/*<ValidTypeofRuleWalker>*/ this","createFailure","string","'Invalid comparison in typeof. Did you mean ' + this.getClosestTerm((/*Args:*/<any>node).text) + '?'"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00116","calls","/*<ValidTypeofRuleWalker>*/ this","createFailure","any","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Invalid comparison in typeof. Did you mean ' + this.getClosestTerm((/*Args:*/<any>node).text) + '?')"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00116","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","createFailure","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Invalid comparison in typeof. Did you mean ' + this.getClosestTerm((/*Args:*/<any>node).text) + '?')"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00116","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","getClosestTerm","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Invalid comparison in typeof. Did you mean ' + this.getClosestTerm((/*Args:*/<any>node).text) + '?')"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00116","pickUpedName","Rule","FAILURE_STRING","","((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Invalid comparison in typeof. Did you mean ' + this.getClosestTerm((/*Args:*/<any>node).text) + '?')"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00116","call.arguments[0]","/*<ValidTypeofRuleWalker>*/ this","addFailure","any","this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Invalid comparison in typeof. Did you mean ' + this.getClosestTerm((/*Args:*/<any>node).text) + '?')"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00116","calls","/*<ValidTypeofRuleWalker>*/ this","addFailure","any","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Invalid comparison in typeof. Did you mean ' + this.getClosestTerm((/*Args:*/<any>node).text) + '?'))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00116","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","addFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Invalid comparison in typeof. Did you mean ' + this.getClosestTerm((/*Args:*/<any>node).text) + '?'))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00116","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","createFailure","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Invalid comparison in typeof. Did you mean ' + this.getClosestTerm((/*Args:*/<any>node).text) + '?'))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00116","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","getClosestTerm","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Invalid comparison in typeof. Did you mean ' + this.getClosestTerm((/*Args:*/<any>node).text) + '?'))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".validateTypeOf","37.00116","pickUpedName","Rule","FAILURE_STRING","","(this.createFailure((/*Args:*/<any>node).getStart(), (/*Args:*/<any>node).getWidth(), 'Invalid comparison in typeof. Did you mean ' + this.getClosestTerm((/*Args:*/<any>node).text) + '?'))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".","41.00012","TS.MethodDefined","ValidTypeofRuleWalker","getClosestTerm","(term: string) => string","(@param)?\W+term *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm","41.00033","define.Parameter","getClosestTerm","term","string","/*Args:*/<string>term"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm","42.00012","TS.VariableDeclaration","","closestMatch","number",""
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm","42.00035","Assign","closestMatch","","number","99999999"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","43.00046","call.func","Utils","reduce","(closestTerm: string, thisTerm: string) => string",""
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","43.00060","define.Parameter","closestTerm","","string","/*Args:*/<string>closestTerm"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","43.00078","define.Parameter","thisTerm","","string","/*Args:*/<string>thisTerm"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","44.00016","TS.VariableDeclaration","","distance","number",""
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","44.00054","call.arguments[0]","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","string","(/*Args:*/<string>term)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","44.00054","call.arguments[1]","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","string","(/*Args:*/<string>thisTerm)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","44.00054","calls","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","number","((/*Args:*/<string>term), (/*Args:*/<string>thisTerm))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","44.00054","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","","((/*Args:*/<string>term), (/*Args:*/<string>thisTerm))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","44.00054","pickUpedName","term","","","((/*Args:*/<string>term), (/*Args:*/<string>thisTerm))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","44.00054","Assign","distance","","number","this.hammingDistance((/*Args:*/<string>term), (/*Args:*/<string>thisTerm))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","44.00054","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","","this.hammingDistance((/*Args:*/<string>term), (/*Args:*/<string>thisTerm))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","44.00054","pickUpedName","term","","","this.hammingDistance((/*Args:*/<string>term), (/*Args:*/<string>thisTerm))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","44.00065","Conditional","distance < closestMatch","","/*IfStatement*/ boolean/* no Else Clause*/","this.hammingDistance((/*Args:*/<string>term), (/*Args:*/<string>thisTerm)) < 99999999"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","45.00027","Compare","distance","","< /*number*/","99999999"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","45.00027","pickUpedName","closestMatch","","","99999999"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","45.00027","CompareR","closestMatch","","/*Reverse*/< /*number*/","this.hammingDistance((/*Args:*/<string>term), (/*Args:*/<string>thisTerm))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","46.00031","Assign","closestMatch","","= /*number*/","this.hammingDistance((/*Args:*/<string>term), (/*Args:*/<string>thisTerm))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","46.00031","pickUpedName","closestMatch","","","this.hammingDistance((/*Args:*/<string>term), (/*Args:*/<string>thisTerm))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","47.00030","Assign","closestTerm","","= /*string*/","(/*Args:*/<string>thisTerm)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","47.00030","pickUpedName","closestTerm","","","(/*Args:*/<string>thisTerm)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm;Utils.reduce(Arguments[1])","49.00019","return","","","string","(/*Args:*/<string>thisTerm)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm","50.00011","call.arguments[0]","Utils","reduce","string[]","['undefined', 'object', 'boolean', 'number', 'string', 'function', 'symbol']"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm","50.00011","call.arguments[1]","Utils","reduce","(closestTerm: string, thisTerm: string) => string","/**(closestTerm: string, thisTerm: string) => string**/"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm","50.00011","call.arguments[2]","Utils","reduce","string","''"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm","50.00011","calls","Utils","reduce","string","(['undefined', 'object', 'boolean', 'number', 'string', 'function', 'symbol'], /**(closestTerm: string, thisTerm: string) => string**/, '')"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm","50.00011","pickUpedName","Rule","VALID_TERMS","","(['undefined', 'object', 'boolean', 'number', 'string', 'function', 'symbol'], /**(closestTerm: string, thisTerm: string) => string**/, '')"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".getClosestTerm","50.00011","return","","","string","Utils.reduce(['undefined', 'object', 'boolean', 'number', 'string', 'function', 'symbol'], /**(closestTerm: string, thisTerm: string) => string**/, '')"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".","56.00012","TS.MethodDefined","ValidTypeofRuleWalker","hammingDistance","(source: string, target: string) => number","/**
Calculates the Hamming distance between two strings. Easier to implement than Levenstein distance.

(@param)?\W+source *\W+ !! missing description.
(@param)?\W+target *\W+ !! missing description.
@return  !! missing description.
"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","56.00036","define.Parameter","hammingDistance","source","string","/*Args:*/<string>source"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","56.00052","define.Parameter","hammingDistance","target","string","/*Args:*/<string>target"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","56.00070","Conditional","source.length === 0","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<string>source).length === 0"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","57.00030","Compare","source","length","=== /*number*/","0"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","57.00030","CompareR","0","","/*Reverse*/=== /*number*/","(/*Args:*/<string>source).length"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","58.00027","return","","","number","(/*Args:*/<string>target).length"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","59.00010","Conditional","target.length === 0","","/*IfStatement*/ boolean/* no Else Clause*/","(/*Args:*/<string>target).length === 0"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","60.00030","Compare","target","length","=== /*number*/","0"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","60.00030","CompareR","0","","/*Reverse*/=== /*number*/","(/*Args:*/<string>target).length"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","61.00027","return","","","number","(/*Args:*/<string>source).length"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","65.00052","call.arguments[0]","(/*Args:*/<string>source)","substr","number","1"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","65.00052","calls","(/*Args:*/<string>source)","substr","string","(1)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","65.00055","call.arguments[0]","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","string","(/*Args:*/<string>source).substr(1)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","65.00055","call.arguments[1]","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","string","(/*Args:*/<string>target)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","65.00055","calls","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","number","((/*Args:*/<string>source).substr(1), (/*Args:*/<string>target))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","65.00055","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","","((/*Args:*/<string>source).substr(1), (/*Args:*/<string>target))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","65.00065","BinaryExpression","/*<ValidTypeofRuleWalker>*/ this.hammingDistance(source.substr(1), target)","","+ /*number*/","1"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","65.00065","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","","","1"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","66.00052","call.arguments[0]","(/*Args:*/<string>target)","substr","number","1"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","66.00052","calls","(/*Args:*/<string>target)","substr","string","(1)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","66.00055","call.arguments[0]","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","string","(/*Args:*/<string>target).substr(1)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","66.00055","call.arguments[1]","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","string","(/*Args:*/<string>source)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","66.00055","calls","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","number","((/*Args:*/<string>target).substr(1), (/*Args:*/<string>source))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","66.00055","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","","((/*Args:*/<string>target).substr(1), (/*Args:*/<string>source))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","66.00065","BinaryExpression","/*<ValidTypeofRuleWalker>*/ this.hammingDistance(target.substr(1), source)","","+ /*number*/","1"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","66.00065","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","","","1"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00053","call.arguments[0]","(/*Args:*/<string>source)","substr","number","1"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00053","calls","(/*Args:*/<string>source)","substr","string","(1)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00071","call.arguments[0]","(/*Args:*/<string>target)","substr","number","1"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00071","calls","(/*Args:*/<string>target)","substr","string","(1)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00071","call.arguments[0]","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","string","(/*Args:*/<string>source).substr(1)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00071","call.arguments[1]","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","string","(/*Args:*/<string>target).substr(1)"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00071","calls","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","number","((/*Args:*/<string>source).substr(1), (/*Args:*/<string>target).substr(1))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00071","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","","((/*Args:*/<string>source).substr(1), (/*Args:*/<string>target).substr(1))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00078","Conditional","source[0] !== target[0]","","/*ConditionalExpression*/ boolean","(/*Args:*/<string>source)[0] !== (/*Args:*/<string>target)[0]"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00099","ref.varName","target[0]","","string",""
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00099","Compare","source[0]","","!== /*string*/","(/*Args:*/<string>target)[0]"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00099","CompareR","target[0]","","/*Reverse*/!== /*string*/","(/*Args:*/<string>source)[0]"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00107","BinaryExpression","/*<ValidTypeofRuleWalker>*/ this.hammingDistance(source.substr(1), target.substr(1))","","+ /*number*/","(((/*Args:*/<string>source)[0] !== (/*Args:*/<string>target)[0] ? 1 : 0))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00107","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","","","(((/*Args:*/<string>source)[0] !== (/*Args:*/<string>target)[0] ? 1 : 0))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00107","call.arguments[0]","Math","min","number","this.hammingDistance((/*Args:*/<string>source).substr(1), (/*Args:*/<string>target)) + 1"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00107","call.arguments[1]","Math","min","number","this.hammingDistance((/*Args:*/<string>target).substr(1), (/*Args:*/<string>source)) + 1"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00107","call.arguments[2]","Math","min","number","this.hammingDistance((/*Args:*/<string>source).substr(1), (/*Args:*/<string>target).substr(1)) + (((/*Args:*/<string>source)[0] !== (/*Args:*/<string>target)[0] ? 1 : 0))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00107","calls","Math","min","number","(this.hammingDistance((/*Args:*/<string>source).substr(1), (/*Args:*/<string>target)) + 1, this.hammingDistance((/*Args:*/<string>target).substr(1), (/*Args:*/<string>source)) + 1, this.hammingDistance((/*Args:*/<string>source).substr(1), (/*Args:*/<string>target).substr(1)) + (((/*Args:*/<string>source)[0] !== (/*Args:*/<string>target)[0] ? 1 : 0)))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","67.00107","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","hammingDistance","","(this.hammingDistance((/*Args:*/<string>source).substr(1), (/*Args:*/<string>target)) + 1, this.hammingDistance((/*Args:*/<string>target).substr(1), (/*Args:*/<string>source)) + 1, this.hammingDistance((/*Args:*/<string>source).substr(1), (/*Args:*/<string>target).substr(1)) + (((/*Args:*/<string>source)[0] !== (/*Args:*/<string>target)[0] ? 1 : 0)))"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","68.00016","BinaryExpression","Math.min(this.hammingDistance(source.substr(1), target) + 1, this.hammingDistance(target.substr(1), source) + 1, this.hammingDistance(source.substr(1), target.substr(1)) + (((/*Args:*/<string>source)[0] !== (/*Args:*/<string>target)[0] ? 1 : 0)))","","+ /*number*/","1"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","68.00016","pickUpedName","/*<ValidTypeofRuleWalker>*/ this","","","1"
"../tslint-microsoft-contrib-master/src/validTypeofRule.ts","ValidTypeofRuleWalker",".hammingDistance","68.00016","return","","","number","Math.min(this.hammingDistance((/*Args:*/<string>source).substr(1), (/*Args:*/<string>target)) + 1, this.hammingDistance((/*Args:*/<string>target).substr(1), (/*Args:*/<string>source)) + 1, this.hammingDistance((/*Args:*/<string>source).substr(1), (/*Args:*/<string>target).substr(1)) + (((/*Args:*/<string>source)[0] !== (/*Args:*/<string>target)[0] ? 1 : 0))) + 1"


